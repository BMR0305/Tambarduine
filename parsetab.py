
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNCOMPAREleftNEleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEDIVIDE_EleftMODULEleftEXPONENTleftLPARENTRPARENTA ABANICO ASSIGN B COMMA COMPARE CUANDO D DEF DIVIDE DIVIDE_E DOT EC ELSE ET EXEC EXPONENT F FALSE FEC FOR GOLPE GT GTE I ID IF LBRACKET LPARENT LT LTE METRONOMO MINUS MODULE NE NEG NUMBER_F NUMBER_I PERCUTOR PLUS PRIN PRINT RBRACKET RPARENT SEMICOLOM SET SN SPACE STEP STRING T TIMES TO TRUE TYPE VERTICAL VIBRATOprogram : prinDecl program\n\t\t\t | functionDecl program\n\t\t\t | empty emptyprinDecl : DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKETfunctionDecl : DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKETstatementList : statement statementList : statementList statement statement : SET ID COMMA TRUE SEMICOLOM\n    \t\t\t| SET ID COMMA FALSE SEMICOLOM\n    \t\t\t| SET ID COMMA expression SEMICOLOMstatement : EXEC ID LPARENT varList RPARENT SEMICOLOMstatement : TYPE LPARENT ID RPARENT SEMICOLOMstatement : IF conditionif LBRACKET statementList RBRACKET empty\n                 | IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET statement : FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET\n    \t\t\t| FOR ID TO expression empty empty LBRACKET statementList RBRACKETstatement : EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM\n\t                 | EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOMstatement : SET ID DOT NEG SEMICOLOMstatement : SET ID DOT T SEMICOLOM\n    \t\t\t | SET ID DOT F SEMICOLOMstatement : ABANICO LPARENT A RPARENT SEMICOLOM\n       \t\t\t| ABANICO LPARENT B RPARENT SEMICOLOMstatement : VERTICAL LPARENT D RPARENT SEMICOLOM\n       \t\t\t| VERTICAL LPARENT I RPARENT SEMICOLOMstatement : PERCUTOR LPARENT A empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT B empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT A B RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT D empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT I empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT D I RPARENT SEMICOLOMstatement : GOLPE LPARENT RPARENT SEMICOLOMstatement : VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOMstatement : METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM\n    \t\t      | METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM\n    \t\t      | METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM\n    \t\t      | METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOMstatement : PRINT LPARENT printTextList RPARENT SEMICOLOMprintTextList : printTextprintTextList : printTextList COMMA printTextprintText : var\n\t\t\t\t| STRINGvarList : var\n\t\t\t\t| emptyvarList : varList COMMA var var : ID\n\t\t\t| NUMBER_I\n\t\t\t| NUMBER_F\n\t\t\t| TRUE\n\t\t\t| FALSEconditionif : expression relation expression\n\t\t\t\t| TRUE\n\t\t\t\t| FALSE\n\t\t\t\t| ID\n\t\t\t\t| ID relation varinCaseLista : inCasea inCaseLista : inCaseLista inCaseainCasea : CUANDO ID relation expression ET LBRACKET statementList RBRACKETinCaseListb : inCaseb inCaseListb : inCaseListb inCasebinCaseb : CUANDO relation expression ET LBRACKET statementList RBRACKETrelation : COMPARErelation : NErelation : LTrelation : GTrelation : LTErelation : GTEexpression : termexpression : addingOperator termexpression : expression addingOperator termaddingOperator : PLUSaddingOperator : MINUSterm : factorterm : term multiplyingOperator factormultiplyingOperator : TIMESmultiplyingOperator : DIVIDEmultiplyingOperator : DIVIDE_Efactor : factorMfactor : factor MODULE factorMfactorM : indexfactorM : factorM EXPONENT indexindex : NUMBER_I empty\n\t\t\t  | NUMBER_F empty\n\t\t\t  | addingOperator NUMBER_I\n\t\t\t  | addingOperator NUMBER_F\n\t\t\t  | addingOperator ID\n\t\t\t  | ID emptyindex : LPARENT expression RPARENTempty : '
    
_lr_action_items = {'DEF':([0,2,3,42,128,],[5,5,5,-4,-5,]),'$end':([0,1,2,3,4,6,7,8,42,128,],[-89,0,-89,-89,-89,-1,-2,-3,-4,-5,]),'PRIN':([5,],[9,]),'ID':([5,12,24,27,28,30,31,32,46,53,55,56,61,66,73,75,77,80,81,82,83,84,85,86,87,88,90,91,92,93,94,99,100,105,152,153,169,],[10,14,14,44,45,51,62,64,78,98,-71,-72,104,111,14,104,14,104,104,-62,-63,-64,-65,-66,-67,14,104,-75,-76,-77,144,104,104,104,104,104,14,]),'LPARENT':([9,10,29,30,33,34,35,36,37,38,39,45,53,55,56,61,75,80,81,82,83,84,85,86,87,90,91,92,93,99,100,105,152,153,],[11,12,46,61,67,68,69,70,71,72,73,77,61,-71,-72,61,61,61,61,-62,-63,-64,-65,-66,-67,61,-75,-76,-77,61,61,61,61,61,]),'RPARENT':([11,12,14,15,16,17,18,19,20,21,41,52,54,57,58,59,60,70,77,78,89,95,96,97,98,101,102,103,104,112,113,114,115,116,117,118,119,121,124,125,126,127,135,139,141,142,143,144,145,146,147,158,159,160,161,162,163,196,197,198,199,201,],[13,-89,-46,23,-43,-44,-47,-48,-49,-50,-45,-68,-73,-78,-80,-89,-89,120,-89,136,-87,-69,-84,-85,-86,-82,-83,147,-89,154,155,156,157,-89,-89,-89,-89,165,168,-39,-41,-42,176,-70,-74,-84,-85,-86,-79,-81,-88,189,190,191,192,193,194,217,218,219,220,-40,]),'NUMBER_I':([12,24,30,53,55,56,61,71,73,75,77,80,81,82,83,84,85,86,87,88,90,91,92,93,94,99,100,105,152,153,166,167,169,179,],[18,18,59,96,-71,-72,59,121,18,59,18,59,59,-62,-63,-64,-65,-66,-67,18,59,-75,-76,-77,142,59,59,59,59,59,196,198,18,205,]),'NUMBER_F':([12,24,30,53,55,56,61,73,75,77,80,81,82,83,84,85,86,87,88,90,91,92,93,94,99,100,105,152,153,166,167,169,],[19,19,60,97,-71,-72,60,19,60,19,60,60,-62,-63,-64,-65,-66,-67,19,60,-75,-76,-77,143,60,60,60,60,60,197,199,19,]),'TRUE':([12,24,30,73,75,77,82,83,84,85,86,87,88,169,],[20,20,49,20,129,20,-62,-63,-64,-65,-66,-67,20,20,]),'FALSE':([12,24,30,73,75,77,82,83,84,85,86,87,88,169,],[21,21,50,21,130,21,-62,-63,-64,-65,-66,-67,21,21,]),'COMMA':([12,14,15,16,17,18,19,20,21,41,44,77,122,123,124,125,126,127,135,201,],[-89,-46,24,-43,-44,-47,-48,-49,-50,-45,75,-89,166,167,169,-39,-41,-42,24,-40,]),'LBRACKET':([13,14,18,19,20,21,23,47,49,50,51,52,54,57,58,59,60,89,95,96,97,98,101,102,104,106,138,139,140,141,142,143,144,145,146,147,148,150,180,204,205,206,209,210,],[22,-46,-47,-48,-49,-50,40,79,-52,-53,-54,-68,-73,-78,-80,-89,-89,-87,-69,-84,-85,-86,-82,-83,-89,149,-51,-70,-55,-74,-84,-85,-86,-79,-81,-88,-89,182,-89,221,222,223,226,227,]),'SET':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[27,27,-6,27,-7,27,27,27,27,-32,-8,-9,-10,-19,-20,-21,-12,-89,27,27,-22,-23,-24,-25,-33,-38,-11,-13,27,-26,-28,-27,-29,-31,-30,27,27,27,27,27,-34,-36,-35,-37,27,27,27,-17,27,27,-14,-15,-16,-18,]),'EXEC':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[28,28,-6,28,-7,28,28,28,28,-32,-8,-9,-10,-19,-20,-21,-12,-89,28,28,-22,-23,-24,-25,-33,-38,-11,-13,28,-26,-28,-27,-29,-31,-30,28,28,28,28,28,-34,-36,-35,-37,28,28,28,-17,28,28,-14,-15,-16,-18,]),'TYPE':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[29,29,-6,29,-7,29,29,29,29,-32,-8,-9,-10,-19,-20,-21,-12,-89,29,29,-22,-23,-24,-25,-33,-38,-11,-13,29,-26,-28,-27,-29,-31,-30,29,29,29,29,29,-34,-36,-35,-37,29,29,29,-17,29,29,-14,-15,-16,-18,]),'IF':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[30,30,-6,30,-7,30,30,30,30,-32,-8,-9,-10,-19,-20,-21,-12,-89,30,30,-22,-23,-24,-25,-33,-38,-11,-13,30,-26,-28,-27,-29,-31,-30,30,30,30,30,30,-34,-36,-35,-37,30,30,30,-17,30,30,-14,-15,-16,-18,]),'FOR':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[31,31,-6,31,-7,31,31,31,31,-32,-8,-9,-10,-19,-20,-21,-12,-89,31,31,-22,-23,-24,-25,-33,-38,-11,-13,31,-26,-28,-27,-29,-31,-30,31,31,31,31,31,-34,-36,-35,-37,31,31,31,-17,31,31,-14,-15,-16,-18,]),'EC':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[32,32,-6,32,-7,32,32,32,32,-32,-8,-9,-10,-19,-20,-21,-12,-89,32,32,-22,-23,-24,-25,-33,-38,-11,-13,32,-26,-28,-27,-29,-31,-30,32,32,32,32,32,-34,-36,-35,-37,32,32,32,-17,32,32,-14,-15,-16,-18,]),'ABANICO':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[33,33,-6,33,-7,33,33,33,33,-32,-8,-9,-10,-19,-20,-21,-12,-89,33,33,-22,-23,-24,-25,-33,-38,-11,-13,33,-26,-28,-27,-29,-31,-30,33,33,33,33,33,-34,-36,-35,-37,33,33,33,-17,33,33,-14,-15,-16,-18,]),'VERTICAL':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[34,34,-6,34,-7,34,34,34,34,-32,-8,-9,-10,-19,-20,-21,-12,-89,34,34,-22,-23,-24,-25,-33,-38,-11,-13,34,-26,-28,-27,-29,-31,-30,34,34,34,34,34,-34,-36,-35,-37,34,34,34,-17,34,34,-14,-15,-16,-18,]),'PERCUTOR':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[35,35,-6,35,-7,35,35,35,35,-32,-8,-9,-10,-19,-20,-21,-12,-89,35,35,-22,-23,-24,-25,-33,-38,-11,-13,35,-26,-28,-27,-29,-31,-30,35,35,35,35,35,-34,-36,-35,-37,35,35,35,-17,35,35,-14,-15,-16,-18,]),'GOLPE':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[36,36,-6,36,-7,36,36,36,36,-32,-8,-9,-10,-19,-20,-21,-12,-89,36,36,-22,-23,-24,-25,-33,-38,-11,-13,36,-26,-28,-27,-29,-31,-30,36,36,36,36,36,-34,-36,-35,-37,36,36,36,-17,36,36,-14,-15,-16,-18,]),'VIBRATO':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[37,37,-6,37,-7,37,37,37,37,-32,-8,-9,-10,-19,-20,-21,-12,-89,37,37,-22,-23,-24,-25,-33,-38,-11,-13,37,-26,-28,-27,-29,-31,-30,37,37,37,37,37,-34,-36,-35,-37,37,37,37,-17,37,37,-14,-15,-16,-18,]),'METRONOMO':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[38,38,-6,38,-7,38,38,38,38,-32,-8,-9,-10,-19,-20,-21,-12,-89,38,38,-22,-23,-24,-25,-33,-38,-11,-13,38,-26,-28,-27,-29,-31,-30,38,38,38,38,38,-34,-36,-35,-37,38,38,38,-17,38,38,-14,-15,-16,-18,]),'PRINT':([22,25,26,40,43,74,79,137,149,164,170,171,172,173,174,175,177,178,181,182,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,221,222,223,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[39,39,-6,39,-7,39,39,39,39,-32,-8,-9,-10,-19,-20,-21,-12,-89,39,39,-22,-23,-24,-25,-33,-38,-11,-13,39,-26,-28,-27,-29,-31,-30,39,39,39,39,39,-34,-36,-35,-37,39,39,39,-17,39,39,-14,-15,-16,-18,]),'RBRACKET':([25,26,43,74,137,164,170,171,172,173,174,175,177,178,181,185,186,187,188,195,200,202,203,208,211,212,213,214,215,216,228,229,230,231,232,233,234,235,237,238,239,240,241,242,],[42,-6,-7,128,178,-32,-8,-9,-10,-19,-20,-21,-12,-89,207,-22,-23,-24,-25,-33,-38,-11,-13,225,-26,-28,-27,-29,-31,-30,-34,-36,-35,-37,239,240,241,-17,243,244,-14,-15,-16,-18,]),'PLUS':([30,48,51,52,53,54,55,56,57,58,59,60,61,75,80,81,82,83,84,85,86,87,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,105,131,138,139,141,142,143,144,145,146,147,148,152,153,183,184,],[55,55,-89,-68,55,-73,-71,-72,-78,-80,-89,-89,55,55,55,55,-62,-63,-64,-65,-66,-67,-87,55,-75,-76,-77,-69,-84,-85,-86,55,55,-82,-83,55,-89,55,55,55,-70,-74,-84,-85,-86,-79,-81,-88,55,55,55,55,55,]),'MINUS':([30,48,51,52,53,54,55,56,57,58,59,60,61,75,80,81,82,83,84,85,86,87,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,105,131,138,139,141,142,143,144,145,146,147,148,152,153,183,184,],[56,56,-89,-68,56,-73,-71,-72,-78,-80,-89,-89,56,56,56,56,-62,-63,-64,-65,-66,-67,-87,56,-75,-76,-77,-69,-84,-85,-86,56,56,-82,-83,56,-89,56,56,56,-70,-74,-84,-85,-86,-79,-81,-88,56,56,56,56,56,]),'CUANDO':([32,63,64,65,107,108,109,151,243,244,],[66,66,110,-56,-57,110,-59,-60,-61,-58,]),'DOT':([44,],[76,]),'COMPARE':([48,51,52,54,57,58,59,60,89,95,96,97,98,101,102,104,110,111,139,141,142,143,144,145,146,147,],[82,82,-68,-73,-78,-80,-89,-89,-87,-69,-84,-85,-86,-82,-83,-89,82,82,-70,-74,-84,-85,-86,-79,-81,-88,]),'NE':([48,51,52,54,57,58,59,60,89,95,96,97,98,101,102,104,110,111,139,141,142,143,144,145,146,147,],[83,83,-68,-73,-78,-80,-89,-89,-87,-69,-84,-85,-86,-82,-83,-89,83,83,-70,-74,-84,-85,-86,-79,-81,-88,]),'LT':([48,51,52,54,57,58,59,60,89,95,96,97,98,101,102,104,110,111,139,141,142,143,144,145,146,147,],[84,84,-68,-73,-78,-80,-89,-89,-87,-69,-84,-85,-86,-82,-83,-89,84,84,-70,-74,-84,-85,-86,-79,-81,-88,]),'GT':([48,51,52,54,57,58,59,60,89,95,96,97,98,101,102,104,110,111,139,141,142,143,144,145,146,147,],[85,85,-68,-73,-78,-80,-89,-89,-87,-69,-84,-85,-86,-82,-83,-89,85,85,-70,-74,-84,-85,-86,-79,-81,-88,]),'LTE':([48,51,52,54,57,58,59,60,89,95,96,97,98,101,102,104,110,111,139,141,142,143,144,145,146,147,],[86,86,-68,-73,-78,-80,-89,-89,-87,-69,-84,-85,-86,-82,-83,-89,86,86,-70,-74,-84,-85,-86,-79,-81,-88,]),'GTE':([48,51,52,54,57,58,59,60,89,95,96,97,98,101,102,104,110,111,139,141,142,143,144,145,146,147,],[87,87,-68,-73,-78,-80,-89,-89,-87,-69,-84,-85,-86,-82,-83,-89,87,87,-70,-74,-84,-85,-86,-79,-81,-88,]),'EXPONENT':([51,57,58,59,60,89,96,97,98,101,102,104,142,143,144,145,146,147,],[-89,100,-80,-89,-89,-87,-84,-85,-86,-82,-83,-89,-84,-85,-86,100,-81,-88,]),'MODULE':([51,54,57,58,59,60,89,96,97,98,101,102,104,141,142,143,144,145,146,147,],[-89,99,-78,-80,-89,-89,-87,-84,-85,-86,-82,-83,-89,99,-84,-85,-86,-79,-81,-88,]),'TIMES':([51,52,54,57,58,59,60,89,95,96,97,98,101,102,104,139,141,142,143,144,145,146,147,],[-89,91,-73,-78,-80,-89,-89,-87,91,-84,-85,-86,-82,-83,-89,91,-74,-84,-85,-86,-79,-81,-88,]),'DIVIDE':([51,52,54,57,58,59,60,89,95,96,97,98,101,102,104,139,141,142,143,144,145,146,147,],[-89,92,-73,-78,-80,-89,-89,-87,92,-84,-85,-86,-82,-83,-89,92,-74,-84,-85,-86,-79,-81,-88,]),'DIVIDE_E':([51,52,54,57,58,59,60,89,95,96,97,98,101,102,104,139,141,142,143,144,145,146,147,],[-89,93,-73,-78,-80,-89,-89,-87,93,-84,-85,-86,-82,-83,-89,93,-74,-84,-85,-86,-79,-81,-88,]),'SEMICOLOM':([52,54,57,58,59,60,89,95,96,97,98,101,102,104,120,129,130,131,132,133,134,136,139,141,142,143,144,145,146,147,154,155,156,157,165,168,176,189,190,191,192,193,194,217,218,219,220,224,236,],[-68,-73,-78,-80,-89,-89,-87,-69,-84,-85,-86,-82,-83,-89,164,170,171,172,173,174,175,177,-70,-74,-84,-85,-86,-79,-81,-88,185,186,187,188,195,200,202,211,212,213,214,215,216,228,229,230,231,235,242,]),'STEP':([52,54,57,58,59,60,89,95,96,97,98,101,102,104,139,141,142,143,144,145,146,147,148,],[-68,-73,-78,-80,-89,-89,-87,-69,-84,-85,-86,-82,-83,-89,-70,-74,-84,-85,-86,-79,-81,-88,179,]),'ET':([52,54,57,58,59,60,89,95,96,97,98,101,102,104,139,141,142,143,144,145,146,147,183,184,],[-68,-73,-78,-80,-89,-89,-87,-69,-84,-85,-86,-82,-83,-89,-70,-74,-84,-85,-86,-79,-81,-88,209,210,]),'TO':([62,],[105,]),'SN':([63,65,107,108,109,151,243,244,],[106,-56,-57,150,-59,-60,-61,-58,]),'A':([67,69,72,],[112,116,122,]),'B':([67,69,116,],[113,117,159,]),'D':([68,69,72,],[114,118,123,]),'I':([68,69,118,],[115,119,162,]),'STRING':([73,169,],[127,127,]),'NEG':([76,],[132,]),'T':([76,],[133,]),'F':([76,],[134,]),'ELSE':([178,],[204,]),'FEC':([207,225,],[224,236,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,6,7,]),'prinDecl':([0,2,3,],[2,2,2,]),'functionDecl':([0,2,3,],[3,3,3,]),'empty':([0,2,3,4,12,51,59,60,77,96,97,98,104,116,117,118,119,148,178,180,],[4,4,4,8,17,89,101,102,17,101,102,89,89,158,160,161,163,180,203,206,]),'varList':([12,77,],[15,135,]),'var':([12,24,73,77,88,169,],[16,41,126,16,140,126,]),'statementList':([22,40,79,149,182,221,222,223,226,227,],[25,74,137,181,208,232,233,234,237,238,]),'statement':([22,25,40,74,79,137,149,181,182,208,221,222,223,226,227,232,233,234,237,238,],[26,43,26,43,26,43,26,43,26,43,26,26,26,26,26,43,43,43,43,43,]),'conditionif':([30,],[47,]),'expression':([30,61,75,80,105,152,153,],[48,103,131,138,148,183,184,]),'term':([30,53,61,75,80,81,105,152,153,],[52,95,52,52,52,139,52,52,52,]),'addingOperator':([30,48,53,61,75,80,81,90,99,100,103,105,131,138,148,152,153,183,184,],[53,81,94,53,53,53,94,94,94,94,81,53,81,81,81,53,53,81,81,]),'factor':([30,53,61,75,80,81,90,105,152,153,],[54,54,54,54,54,54,141,54,54,54,]),'factorM':([30,53,61,75,80,81,90,99,105,152,153,],[57,57,57,57,57,57,57,145,57,57,57,]),'index':([30,53,61,75,80,81,90,99,100,105,152,153,],[58,58,58,58,58,58,58,58,146,58,58,58,]),'inCaseLista':([32,],[63,]),'inCasea':([32,63,],[65,107,]),'relation':([48,51,110,111,],[80,88,152,153,]),'multiplyingOperator':([52,95,139,],[90,90,90,]),'inCaseListb':([64,],[108,]),'inCaseb':([64,108,],[109,151,]),'printTextList':([73,],[124,]),'printText':([73,169,],[125,201,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> prinDecl program','program',2,'p_program','Parser.py',23),
  ('program -> functionDecl program','program',2,'p_program','Parser.py',24),
  ('program -> empty empty','program',2,'p_program','Parser.py',25),
  ('prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET','prinDecl',7,'p_prinDecl','Parser.py',37),
  ('functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET','functionDecl',8,'p_functionDecl','Parser.py',41),
  ('statementList -> statement','statementList',1,'p_statementList1','Parser.py',48),
  ('statementList -> statementList statement','statementList',2,'p_statementList2','Parser.py',54),
  ('statement -> SET ID COMMA TRUE SEMICOLOM','statement',5,'p_statement1','Parser.py',62),
  ('statement -> SET ID COMMA FALSE SEMICOLOM','statement',5,'p_statement1','Parser.py',63),
  ('statement -> SET ID COMMA expression SEMICOLOM','statement',5,'p_statement1','Parser.py',64),
  ('statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM','statement',6,'p_statement2','Parser.py',71),
  ('statement -> TYPE LPARENT ID RPARENT SEMICOLOM','statement',5,'p_statement3','Parser.py',78),
  ('statement -> IF conditionif LBRACKET statementList RBRACKET empty','statement',6,'p_statement4','Parser.py',85),
  ('statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET','statement',9,'p_statement4','Parser.py',86),
  ('statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET','statement',9,'p_statement5','Parser.py',96),
  ('statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET','statement',9,'p_statement5','Parser.py',97),
  ('statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM','statement',8,'p_statement6','Parser.py',105),
  ('statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM','statement',9,'p_statement6','Parser.py',106),
  ('statement -> SET ID DOT NEG SEMICOLOM','statement',5,'p_statement7','Parser.py',116),
  ('statement -> SET ID DOT T SEMICOLOM','statement',5,'p_statement8','Parser.py',123),
  ('statement -> SET ID DOT F SEMICOLOM','statement',5,'p_statement8','Parser.py',124),
  ('statement -> ABANICO LPARENT A RPARENT SEMICOLOM','statement',5,'p_statement9','Parser.py',131),
  ('statement -> ABANICO LPARENT B RPARENT SEMICOLOM','statement',5,'p_statement9','Parser.py',132),
  ('statement -> VERTICAL LPARENT D RPARENT SEMICOLOM','statement',5,'p_statement10','Parser.py',139),
  ('statement -> VERTICAL LPARENT I RPARENT SEMICOLOM','statement',5,'p_statement10','Parser.py',140),
  ('statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',148),
  ('statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',149),
  ('statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',150),
  ('statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',151),
  ('statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',152),
  ('statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',153),
  ('statement -> GOLPE LPARENT RPARENT SEMICOLOM','statement',4,'p_statement12','Parser.py',161),
  ('statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM','statement',5,'p_statement13','Parser.py',168),
  ('statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',176),
  ('statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',177),
  ('statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',178),
  ('statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',179),
  ('statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM','statement',5,'p_statement15','Parser.py',186),
  ('printTextList -> printText','printTextList',1,'p_printTextList1','Parser.py',195),
  ('printTextList -> printTextList COMMA printText','printTextList',3,'p_printTextList2','Parser.py',200),
  ('printText -> var','printText',1,'p_printText','Parser.py',205),
  ('printText -> STRING','printText',1,'p_printText','Parser.py',206),
  ('varList -> var','varList',1,'p_varList1','Parser.py',211),
  ('varList -> empty','varList',1,'p_varList1','Parser.py',212),
  ('varList -> varList COMMA var','varList',3,'p_varList2','Parser.py',217),
  ('var -> ID','var',1,'p_var','Parser.py',222),
  ('var -> NUMBER_I','var',1,'p_var','Parser.py',223),
  ('var -> NUMBER_F','var',1,'p_var','Parser.py',224),
  ('var -> TRUE','var',1,'p_var','Parser.py',225),
  ('var -> FALSE','var',1,'p_var','Parser.py',226),
  ('conditionif -> expression relation expression','conditionif',3,'p_conditionif','Parser.py',231),
  ('conditionif -> TRUE','conditionif',1,'p_conditionif','Parser.py',232),
  ('conditionif -> FALSE','conditionif',1,'p_conditionif','Parser.py',233),
  ('conditionif -> ID','conditionif',1,'p_conditionif','Parser.py',234),
  ('conditionif -> ID relation var','conditionif',3,'p_conditionif','Parser.py',235),
  ('inCaseLista -> inCasea','inCaseLista',1,'p_inCaseLista1','Parser.py',243),
  ('inCaseLista -> inCaseLista inCasea','inCaseLista',2,'p_inCaseLista2','Parser.py',248),
  ('inCasea -> CUANDO ID relation expression ET LBRACKET statementList RBRACKET','inCasea',8,'p_inCasea','Parser.py',253),
  ('inCaseListb -> inCaseb','inCaseListb',1,'p_inCaseListb1','Parser.py',259),
  ('inCaseListb -> inCaseListb inCaseb','inCaseListb',2,'p_inCaseListb2','Parser.py',264),
  ('inCaseb -> CUANDO relation expression ET LBRACKET statementList RBRACKET','inCaseb',7,'p_inCaseb','Parser.py',269),
  ('relation -> COMPARE','relation',1,'p_relation1','Parser.py',275),
  ('relation -> NE','relation',1,'p_relation2','Parser.py',280),
  ('relation -> LT','relation',1,'p_relation3','Parser.py',285),
  ('relation -> GT','relation',1,'p_relation4','Parser.py',290),
  ('relation -> LTE','relation',1,'p_relation5','Parser.py',295),
  ('relation -> GTE','relation',1,'p_relation6','Parser.py',300),
  ('expression -> term','expression',1,'p_expression1','Parser.py',305),
  ('expression -> addingOperator term','expression',2,'p_expression2','Parser.py',310),
  ('expression -> expression addingOperator term','expression',3,'p_expression3','Parser.py',315),
  ('addingOperator -> PLUS','addingOperator',1,'p_addingOperator1','Parser.py',320),
  ('addingOperator -> MINUS','addingOperator',1,'p_addingOperator2','Parser.py',325),
  ('term -> factor','term',1,'p_term1','Parser.py',330),
  ('term -> term multiplyingOperator factor','term',3,'p_term2','Parser.py',334),
  ('multiplyingOperator -> TIMES','multiplyingOperator',1,'p_multiplyingOperator1','Parser.py',339),
  ('multiplyingOperator -> DIVIDE','multiplyingOperator',1,'p_multiplyingOperator2','Parser.py',344),
  ('multiplyingOperator -> DIVIDE_E','multiplyingOperator',1,'p_multiplyingOperator3','Parser.py',349),
  ('factor -> factorM','factor',1,'p_factor1','Parser.py',354),
  ('factor -> factor MODULE factorM','factor',3,'p_factor2','Parser.py',359),
  ('factorM -> index','factorM',1,'p_factorM1','Parser.py',364),
  ('factorM -> factorM EXPONENT index','factorM',3,'p_factorM2','Parser.py',369),
  ('index -> NUMBER_I empty','index',2,'p_index1','Parser.py',374),
  ('index -> NUMBER_F empty','index',2,'p_index1','Parser.py',375),
  ('index -> addingOperator NUMBER_I','index',2,'p_index1','Parser.py',376),
  ('index -> addingOperator NUMBER_F','index',2,'p_index1','Parser.py',377),
  ('index -> addingOperator ID','index',2,'p_index1','Parser.py',378),
  ('index -> ID empty','index',2,'p_index1','Parser.py',379),
  ('index -> LPARENT expression RPARENT','index',3,'p_index2','Parser.py',387),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',392),
]
