
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNCOMPAREleftNEleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEDIVIDE_EleftMODULEleftEXPONENTleftLPARENTRPARENTA ABANICO ASSIGN B COMMA COMPARE CUANDO D DEF DIVIDE DIVIDE_E DOT EC ELSE ET EXEC EXPONENT F FALSE FEC FOR GOLPE GT GTE I ID IF LBRACKET LPARENT LT LTE METRONOMO MINUS MODULE NE NEG NUMBER_F NUMBER_I PERCUTOR PLUS PRIN PRINT RBRACKET RPARENT SEMICOLOM SET SN SPACE STEP STRING T TIMES TO TRUE TYPE VERTICAL VIBRATOprogram : prinDecl program\n\t\t\t | functionDecl program\n\t\t\t | empty emptyprinDecl : DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKETfunctionDecl : DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKETstatementList : statement statementList : statementList statement statement : SET ID COMMA TRUE SEMICOLOM\n    \t\t\t| SET ID COMMA FALSE SEMICOLOM\n    \t\t\t| SET ID COMMA expression SEMICOLOMstatement : EXEC ID LPARENT varList RPARENT SEMICOLOMstatement : TYPE LPARENT ID RPARENT SEMICOLOMstatement : IF conditionif LBRACKET statementList RBRACKET empty\n                 | IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET statement : FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET\n    \t\t\t| FOR ID TO expression STEP empty LBRACKET statementList RBRACKETstatement : EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM\n\t                 | EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOMstatement : SET ID DOT NEG SEMICOLOMstatement : SET ID DOT T SEMICOLOM\n    \t\t\t | SET ID DOT F SEMICOLOMstatement : ABANICO LPARENT A RPARENT SEMICOLOM\n       \t\t\t| ABANICO LPARENT B RPARENT SEMICOLOMstatement : VERTICAL LPARENT D RPARENT SEMICOLOM\n       \t\t\t| VERTICAL LPARENT I RPARENT SEMICOLOMstatement : PERCUTOR LPARENT A empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT B empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT A B RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT D empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT I empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT D I RPARENT SEMICOLOMstatement : GOLPE LPARENT RPARENT SEMICOLOMstatement : VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOMstatement : METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM\n    \t\t      | METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM\n    \t\t      | METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM\n    \t\t      | METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOMstatement : PRINT LPARENT printTextList RPARENT SEMICOLOMprintTextList : printTextprintTextList : printTextList COMMA printTextprintText : expression\n\t\t\t\t| STRINGvarList : var\n\t\t\t\t| emptyvarList : varList COMMA var var : ID\n\t\t\t| NUMBER_I\n\t\t\t| NUMBER_F\n\t\t\t| TRUE\n\t\t\t| FALSEconditionif : expression relation expression\n\t\t\t\t| TRUE\n\t\t\t\t| FALSE\n\t\t\t\t| IDinCaseLista : inCasea inCaseLista : inCaseLista inCaseainCasea : CUANDO ID relation expression ET LBRACKET statementList RBRACKETinCaseListb : inCaseb inCaseListb : inCaseListb inCasebinCaseb : CUANDO relation expression ET LBRACKET statementList RBRACKETrelation : COMPARErelation : NErelation : LTrelation : GTrelation : LTErelation : GTEexpression : termexpression : addingOperator termexpression : expression addingOperator termaddingOperator : PLUSaddingOperator : MINUSterm : factorterm : term multiplyingOperator factormultiplyingOperator : TIMESmultiplyingOperator : DIVIDEmultiplyingOperator : DIVIDE_Efactor : factorMfactor : factor MODULE factorMfactorM : indexfactorM : factorM EXPONENT indexindex : empty NUMBER_I\n\t\t\t  | empty NUMBER_F\n\t\t\t  | addingOperator NUMBER_I\n\t\t\t  | addingOperator NUMBER_F\n\t\t\t  | addingOperator ID\n\t\t\t  | empty IDindex : LPARENT expression RPARENTempty : '
    
_lr_action_items = {'DEF':([0,2,3,42,125,],[5,5,5,-4,-5,]),'$end':([0,1,2,3,4,6,7,8,42,125,],[-88,0,-88,-88,-88,-1,-2,-3,-4,-5,]),'PRIN':([5,],[9,]),'ID':([5,12,24,27,28,30,31,32,46,48,54,56,57,60,65,72,74,76,82,83,84,85,86,87,88,89,90,91,92,93,94,99,100,102,145,146,162,],[10,14,14,44,45,52,61,63,77,81,98,-70,-71,-88,108,-88,-88,14,-88,-88,-61,-62,-63,-64,-65,-66,-88,-74,-75,-76,98,-88,-88,-88,-88,-88,-88,]),'LPARENT':([9,10,29,30,33,34,35,36,37,38,39,45,54,56,57,60,72,74,82,83,84,85,86,87,88,89,90,91,92,93,99,100,102,145,146,162,],[11,12,46,60,66,67,68,69,70,71,72,76,60,-70,-71,60,60,60,60,60,-61,-62,-63,-64,-65,-66,60,-74,-75,-76,60,60,60,60,60,60,]),'RPARENT':([11,12,14,15,16,17,18,19,20,21,41,53,55,58,59,69,76,77,79,80,81,95,96,97,98,101,109,110,111,112,113,114,115,116,118,121,122,123,124,132,136,137,138,139,140,151,152,153,154,155,156,188,189,190,191,193,],[13,-88,-46,23,-43,-44,-47,-48,-49,-50,-45,-67,-72,-77,-79,117,-88,133,-81,-82,-86,-68,-83,-84,-85,140,147,148,149,150,-88,-88,-88,-88,158,161,-39,-41,-42,169,-69,-73,-78,-80,-87,181,182,183,184,185,186,209,210,211,212,-40,]),'NUMBER_I':([12,24,30,48,54,56,57,60,70,72,74,76,82,83,84,85,86,87,88,89,90,91,92,93,94,99,100,102,145,146,159,160,162,172,],[18,18,-88,79,96,-70,-71,-88,118,-88,-88,18,-88,-88,-61,-62,-63,-64,-65,-66,-88,-74,-75,-76,96,-88,-88,-88,-88,-88,188,190,-88,197,]),'NUMBER_F':([12,24,30,48,54,56,57,60,72,74,76,82,83,84,85,86,87,88,89,90,91,92,93,94,99,100,102,145,146,159,160,162,],[19,19,-88,80,97,-70,-71,-88,-88,-88,19,-88,-88,-61,-62,-63,-64,-65,-66,-88,-74,-75,-76,97,-88,-88,-88,-88,-88,189,191,-88,]),'TRUE':([12,24,30,74,76,],[20,20,50,126,20,]),'FALSE':([12,24,30,74,76,],[21,21,51,127,21,]),'COMMA':([12,14,15,16,17,18,19,20,21,41,44,53,55,58,59,76,79,80,81,95,96,97,98,119,120,121,122,123,124,132,136,137,138,139,140,193,],[-88,-46,24,-43,-44,-47,-48,-49,-50,-45,74,-67,-72,-77,-79,-88,-81,-82,-86,-68,-83,-84,-85,159,160,162,-39,-41,-42,24,-69,-73,-78,-80,-87,-40,]),'LBRACKET':([13,23,47,50,51,52,53,55,58,59,79,80,81,95,96,97,98,103,135,136,137,138,139,140,143,172,196,197,198,201,202,],[22,40,78,-52,-53,-54,-67,-72,-77,-79,-81,-82,-86,-68,-83,-84,-85,142,-51,-69,-73,-78,-80,-87,174,-88,213,214,215,218,219,]),'SET':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[27,27,-6,27,-7,27,27,27,27,-32,-8,-9,-10,-19,-20,-21,-12,-88,27,27,-22,-23,-24,-25,-33,-38,-11,-13,27,-26,-28,-27,-29,-31,-30,27,27,27,27,27,-34,-36,-35,-37,27,27,27,-17,27,27,-14,-15,-16,-18,]),'EXEC':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[28,28,-6,28,-7,28,28,28,28,-32,-8,-9,-10,-19,-20,-21,-12,-88,28,28,-22,-23,-24,-25,-33,-38,-11,-13,28,-26,-28,-27,-29,-31,-30,28,28,28,28,28,-34,-36,-35,-37,28,28,28,-17,28,28,-14,-15,-16,-18,]),'TYPE':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[29,29,-6,29,-7,29,29,29,29,-32,-8,-9,-10,-19,-20,-21,-12,-88,29,29,-22,-23,-24,-25,-33,-38,-11,-13,29,-26,-28,-27,-29,-31,-30,29,29,29,29,29,-34,-36,-35,-37,29,29,29,-17,29,29,-14,-15,-16,-18,]),'IF':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[30,30,-6,30,-7,30,30,30,30,-32,-8,-9,-10,-19,-20,-21,-12,-88,30,30,-22,-23,-24,-25,-33,-38,-11,-13,30,-26,-28,-27,-29,-31,-30,30,30,30,30,30,-34,-36,-35,-37,30,30,30,-17,30,30,-14,-15,-16,-18,]),'FOR':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[31,31,-6,31,-7,31,31,31,31,-32,-8,-9,-10,-19,-20,-21,-12,-88,31,31,-22,-23,-24,-25,-33,-38,-11,-13,31,-26,-28,-27,-29,-31,-30,31,31,31,31,31,-34,-36,-35,-37,31,31,31,-17,31,31,-14,-15,-16,-18,]),'EC':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[32,32,-6,32,-7,32,32,32,32,-32,-8,-9,-10,-19,-20,-21,-12,-88,32,32,-22,-23,-24,-25,-33,-38,-11,-13,32,-26,-28,-27,-29,-31,-30,32,32,32,32,32,-34,-36,-35,-37,32,32,32,-17,32,32,-14,-15,-16,-18,]),'ABANICO':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[33,33,-6,33,-7,33,33,33,33,-32,-8,-9,-10,-19,-20,-21,-12,-88,33,33,-22,-23,-24,-25,-33,-38,-11,-13,33,-26,-28,-27,-29,-31,-30,33,33,33,33,33,-34,-36,-35,-37,33,33,33,-17,33,33,-14,-15,-16,-18,]),'VERTICAL':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[34,34,-6,34,-7,34,34,34,34,-32,-8,-9,-10,-19,-20,-21,-12,-88,34,34,-22,-23,-24,-25,-33,-38,-11,-13,34,-26,-28,-27,-29,-31,-30,34,34,34,34,34,-34,-36,-35,-37,34,34,34,-17,34,34,-14,-15,-16,-18,]),'PERCUTOR':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[35,35,-6,35,-7,35,35,35,35,-32,-8,-9,-10,-19,-20,-21,-12,-88,35,35,-22,-23,-24,-25,-33,-38,-11,-13,35,-26,-28,-27,-29,-31,-30,35,35,35,35,35,-34,-36,-35,-37,35,35,35,-17,35,35,-14,-15,-16,-18,]),'GOLPE':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[36,36,-6,36,-7,36,36,36,36,-32,-8,-9,-10,-19,-20,-21,-12,-88,36,36,-22,-23,-24,-25,-33,-38,-11,-13,36,-26,-28,-27,-29,-31,-30,36,36,36,36,36,-34,-36,-35,-37,36,36,36,-17,36,36,-14,-15,-16,-18,]),'VIBRATO':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[37,37,-6,37,-7,37,37,37,37,-32,-8,-9,-10,-19,-20,-21,-12,-88,37,37,-22,-23,-24,-25,-33,-38,-11,-13,37,-26,-28,-27,-29,-31,-30,37,37,37,37,37,-34,-36,-35,-37,37,37,37,-17,37,37,-14,-15,-16,-18,]),'METRONOMO':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[38,38,-6,38,-7,38,38,38,38,-32,-8,-9,-10,-19,-20,-21,-12,-88,38,38,-22,-23,-24,-25,-33,-38,-11,-13,38,-26,-28,-27,-29,-31,-30,38,38,38,38,38,-34,-36,-35,-37,38,38,38,-17,38,38,-14,-15,-16,-18,]),'PRINT':([22,25,26,40,43,73,78,134,142,157,163,164,165,166,167,168,170,171,173,174,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,213,214,215,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[39,39,-6,39,-7,39,39,39,39,-32,-8,-9,-10,-19,-20,-21,-12,-88,39,39,-22,-23,-24,-25,-33,-38,-11,-13,39,-26,-28,-27,-29,-31,-30,39,39,39,39,39,-34,-36,-35,-37,39,39,39,-17,39,39,-14,-15,-16,-18,]),'RBRACKET':([25,26,43,73,134,157,163,164,165,166,167,168,170,171,173,177,178,179,180,187,192,194,195,200,203,204,205,206,207,208,220,221,222,223,224,225,226,227,229,230,231,232,233,234,],[42,-6,-7,125,171,-32,-8,-9,-10,-19,-20,-21,-12,-88,199,-22,-23,-24,-25,-33,-38,-11,-13,217,-26,-28,-27,-29,-31,-30,-34,-36,-35,-37,231,232,233,-17,235,236,-14,-15,-16,-18,]),'PLUS':([30,49,53,54,55,56,57,58,59,60,72,74,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,123,128,135,136,137,138,139,140,141,145,146,162,175,176,],[56,56,-67,56,-72,-70,-71,-77,-79,56,56,56,-81,-82,-86,56,56,-61,-62,-63,-64,-65,-66,56,-74,-75,-76,-68,-83,-84,-85,56,56,56,56,56,56,56,-69,-73,-78,-80,-87,56,56,56,56,56,56,]),'MINUS':([30,49,53,54,55,56,57,58,59,60,72,74,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,123,128,135,136,137,138,139,140,141,145,146,162,175,176,],[57,57,-67,57,-72,-70,-71,-77,-79,57,57,57,-81,-82,-86,57,57,-61,-62,-63,-64,-65,-66,57,-74,-75,-76,-68,-83,-84,-85,57,57,57,57,57,57,57,-69,-73,-78,-80,-87,57,57,57,57,57,57,]),'CUANDO':([32,62,63,64,104,105,106,144,235,236,],[65,65,107,-55,-56,107,-58,-59,-60,-57,]),'DOT':([44,],[75,]),'COMPARE':([49,53,55,58,59,79,80,81,95,96,97,98,107,108,136,137,138,139,140,],[84,-67,-72,-77,-79,-81,-82,-86,-68,-83,-84,-85,84,84,-69,-73,-78,-80,-87,]),'NE':([49,53,55,58,59,79,80,81,95,96,97,98,107,108,136,137,138,139,140,],[85,-67,-72,-77,-79,-81,-82,-86,-68,-83,-84,-85,85,85,-69,-73,-78,-80,-87,]),'LT':([49,53,55,58,59,79,80,81,95,96,97,98,107,108,136,137,138,139,140,],[86,-67,-72,-77,-79,-81,-82,-86,-68,-83,-84,-85,86,86,-69,-73,-78,-80,-87,]),'GT':([49,53,55,58,59,79,80,81,95,96,97,98,107,108,136,137,138,139,140,],[87,-67,-72,-77,-79,-81,-82,-86,-68,-83,-84,-85,87,87,-69,-73,-78,-80,-87,]),'LTE':([49,53,55,58,59,79,80,81,95,96,97,98,107,108,136,137,138,139,140,],[88,-67,-72,-77,-79,-81,-82,-86,-68,-83,-84,-85,88,88,-69,-73,-78,-80,-87,]),'GTE':([49,53,55,58,59,79,80,81,95,96,97,98,107,108,136,137,138,139,140,],[89,-67,-72,-77,-79,-81,-82,-86,-68,-83,-84,-85,89,89,-69,-73,-78,-80,-87,]),'SEMICOLOM':([53,55,58,59,79,80,81,95,96,97,98,117,126,127,128,129,130,131,133,136,137,138,139,140,147,148,149,150,158,161,169,181,182,183,184,185,186,209,210,211,212,216,228,],[-67,-72,-77,-79,-81,-82,-86,-68,-83,-84,-85,157,163,164,165,166,167,168,170,-69,-73,-78,-80,-87,177,178,179,180,187,192,194,203,204,205,206,207,208,220,221,222,223,227,234,]),'STEP':([53,55,58,59,79,80,81,95,96,97,98,136,137,138,139,140,141,],[-67,-72,-77,-79,-81,-82,-86,-68,-83,-84,-85,-69,-73,-78,-80,-87,172,]),'ET':([53,55,58,59,79,80,81,95,96,97,98,136,137,138,139,140,175,176,],[-67,-72,-77,-79,-81,-82,-86,-68,-83,-84,-85,-69,-73,-78,-80,-87,201,202,]),'TIMES':([53,55,58,59,79,80,81,95,96,97,98,136,137,138,139,140,],[91,-72,-77,-79,-81,-82,-86,91,-83,-84,-85,91,-73,-78,-80,-87,]),'DIVIDE':([53,55,58,59,79,80,81,95,96,97,98,136,137,138,139,140,],[92,-72,-77,-79,-81,-82,-86,92,-83,-84,-85,92,-73,-78,-80,-87,]),'DIVIDE_E':([53,55,58,59,79,80,81,95,96,97,98,136,137,138,139,140,],[93,-72,-77,-79,-81,-82,-86,93,-83,-84,-85,93,-73,-78,-80,-87,]),'MODULE':([55,58,59,79,80,81,96,97,98,137,138,139,140,],[99,-77,-79,-81,-82,-86,-83,-84,-85,99,-78,-80,-87,]),'EXPONENT':([58,59,79,80,81,96,97,98,138,139,140,],[100,-79,-81,-82,-86,-83,-84,-85,100,-80,-87,]),'TO':([61,],[102,]),'SN':([62,64,104,105,106,144,235,236,],[103,-55,-56,143,-58,-59,-60,-57,]),'A':([66,68,71,],[109,113,119,]),'B':([66,68,113,],[110,114,152,]),'D':([67,68,71,],[111,115,120,]),'I':([67,68,115,],[112,116,155,]),'STRING':([72,162,],[124,124,]),'NEG':([75,],[129,]),'T':([75,],[130,]),'F':([75,],[131,]),'ELSE':([171,],[196,]),'FEC':([199,217,],[216,228,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,6,7,]),'prinDecl':([0,2,3,],[2,2,2,]),'functionDecl':([0,2,3,],[3,3,3,]),'empty':([0,2,3,4,12,30,54,60,72,74,76,82,83,90,99,100,102,113,114,115,116,145,146,162,171,172,],[4,4,4,8,17,48,48,48,48,48,17,48,48,48,48,48,48,151,153,154,156,48,48,48,195,198,]),'varList':([12,76,],[15,132,]),'var':([12,24,76,],[16,41,16,]),'statementList':([22,40,78,142,174,213,214,215,218,219,],[25,73,134,173,200,224,225,226,229,230,]),'statement':([22,25,40,73,78,134,142,173,174,200,213,214,215,218,219,224,225,226,229,230,],[26,43,26,43,26,43,26,43,26,43,26,26,26,26,26,43,43,43,43,43,]),'conditionif':([30,],[47,]),'expression':([30,60,72,74,82,102,145,146,162,],[49,101,123,128,135,141,175,176,123,]),'term':([30,54,60,72,74,82,83,102,145,146,162,],[53,95,53,53,53,53,136,53,53,53,53,]),'addingOperator':([30,49,54,60,72,74,82,83,90,99,100,101,102,123,128,135,141,145,146,162,175,176,],[54,83,94,54,54,54,54,94,94,94,94,83,54,83,83,83,83,54,54,54,83,83,]),'factor':([30,54,60,72,74,82,83,90,102,145,146,162,],[55,55,55,55,55,55,55,137,55,55,55,55,]),'factorM':([30,54,60,72,74,82,83,90,99,102,145,146,162,],[58,58,58,58,58,58,58,58,138,58,58,58,58,]),'index':([30,54,60,72,74,82,83,90,99,100,102,145,146,162,],[59,59,59,59,59,59,59,59,59,139,59,59,59,59,]),'inCaseLista':([32,],[62,]),'inCasea':([32,62,],[64,104,]),'relation':([49,107,108,],[82,145,146,]),'multiplyingOperator':([53,95,136,],[90,90,90,]),'inCaseListb':([63,],[105,]),'inCaseb':([63,105,],[106,144,]),'printTextList':([72,],[121,]),'printText':([72,162,],[122,193,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> prinDecl program','program',2,'p_program','Parser.py',23),
  ('program -> functionDecl program','program',2,'p_program','Parser.py',24),
  ('program -> empty empty','program',2,'p_program','Parser.py',25),
  ('prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET','prinDecl',7,'p_prinDecl','Parser.py',37),
  ('functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET','functionDecl',8,'p_functionDecl','Parser.py',42),
  ('statementList -> statement','statementList',1,'p_statementList1','Parser.py',52),
  ('statementList -> statementList statement','statementList',2,'p_statementList2','Parser.py',59),
  ('statement -> SET ID COMMA TRUE SEMICOLOM','statement',5,'p_statement1','Parser.py',67),
  ('statement -> SET ID COMMA FALSE SEMICOLOM','statement',5,'p_statement1','Parser.py',68),
  ('statement -> SET ID COMMA expression SEMICOLOM','statement',5,'p_statement1','Parser.py',69),
  ('statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM','statement',6,'p_statement2','Parser.py',76),
  ('statement -> TYPE LPARENT ID RPARENT SEMICOLOM','statement',5,'p_statement3','Parser.py',83),
  ('statement -> IF conditionif LBRACKET statementList RBRACKET empty','statement',6,'p_statement4','Parser.py',90),
  ('statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET','statement',9,'p_statement4','Parser.py',91),
  ('statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET','statement',9,'p_statement5','Parser.py',102),
  ('statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET','statement',9,'p_statement5','Parser.py',103),
  ('statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM','statement',8,'p_statement6','Parser.py',111),
  ('statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM','statement',9,'p_statement6','Parser.py',112),
  ('statement -> SET ID DOT NEG SEMICOLOM','statement',5,'p_statement7','Parser.py',122),
  ('statement -> SET ID DOT T SEMICOLOM','statement',5,'p_statement8','Parser.py',129),
  ('statement -> SET ID DOT F SEMICOLOM','statement',5,'p_statement8','Parser.py',130),
  ('statement -> ABANICO LPARENT A RPARENT SEMICOLOM','statement',5,'p_statement9','Parser.py',137),
  ('statement -> ABANICO LPARENT B RPARENT SEMICOLOM','statement',5,'p_statement9','Parser.py',138),
  ('statement -> VERTICAL LPARENT D RPARENT SEMICOLOM','statement',5,'p_statement10','Parser.py',145),
  ('statement -> VERTICAL LPARENT I RPARENT SEMICOLOM','statement',5,'p_statement10','Parser.py',146),
  ('statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',154),
  ('statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',155),
  ('statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',156),
  ('statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',157),
  ('statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',158),
  ('statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',159),
  ('statement -> GOLPE LPARENT RPARENT SEMICOLOM','statement',4,'p_statement12','Parser.py',167),
  ('statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM','statement',5,'p_statement13','Parser.py',174),
  ('statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',182),
  ('statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',183),
  ('statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',184),
  ('statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',185),
  ('statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM','statement',5,'p_statement15','Parser.py',192),
  ('printTextList -> printText','printTextList',1,'p_printTextList1','Parser.py',201),
  ('printTextList -> printTextList COMMA printText','printTextList',3,'p_printTextList2','Parser.py',206),
  ('printText -> expression','printText',1,'p_printText','Parser.py',211),
  ('printText -> STRING','printText',1,'p_printText','Parser.py',212),
  ('varList -> var','varList',1,'p_varList1','Parser.py',217),
  ('varList -> empty','varList',1,'p_varList1','Parser.py',218),
  ('varList -> varList COMMA var','varList',3,'p_varList2','Parser.py',223),
  ('var -> ID','var',1,'p_var','Parser.py',228),
  ('var -> NUMBER_I','var',1,'p_var','Parser.py',229),
  ('var -> NUMBER_F','var',1,'p_var','Parser.py',230),
  ('var -> TRUE','var',1,'p_var','Parser.py',231),
  ('var -> FALSE','var',1,'p_var','Parser.py',232),
  ('conditionif -> expression relation expression','conditionif',3,'p_conditionif','Parser.py',237),
  ('conditionif -> TRUE','conditionif',1,'p_conditionif','Parser.py',238),
  ('conditionif -> FALSE','conditionif',1,'p_conditionif','Parser.py',239),
  ('conditionif -> ID','conditionif',1,'p_conditionif','Parser.py',240),
  ('inCaseLista -> inCasea','inCaseLista',1,'p_inCaseLista1','Parser.py',248),
  ('inCaseLista -> inCaseLista inCasea','inCaseLista',2,'p_inCaseLista2','Parser.py',253),
  ('inCasea -> CUANDO ID relation expression ET LBRACKET statementList RBRACKET','inCasea',8,'p_inCasea','Parser.py',258),
  ('inCaseListb -> inCaseb','inCaseListb',1,'p_inCaseListb1','Parser.py',264),
  ('inCaseListb -> inCaseListb inCaseb','inCaseListb',2,'p_inCaseListb2','Parser.py',269),
  ('inCaseb -> CUANDO relation expression ET LBRACKET statementList RBRACKET','inCaseb',7,'p_inCaseb','Parser.py',274),
  ('relation -> COMPARE','relation',1,'p_relation1','Parser.py',280),
  ('relation -> NE','relation',1,'p_relation2','Parser.py',285),
  ('relation -> LT','relation',1,'p_relation3','Parser.py',290),
  ('relation -> GT','relation',1,'p_relation4','Parser.py',295),
  ('relation -> LTE','relation',1,'p_relation5','Parser.py',300),
  ('relation -> GTE','relation',1,'p_relation6','Parser.py',305),
  ('expression -> term','expression',1,'p_expression1','Parser.py',310),
  ('expression -> addingOperator term','expression',2,'p_expression2','Parser.py',315),
  ('expression -> expression addingOperator term','expression',3,'p_expression3','Parser.py',320),
  ('addingOperator -> PLUS','addingOperator',1,'p_addingOperator1','Parser.py',325),
  ('addingOperator -> MINUS','addingOperator',1,'p_addingOperator2','Parser.py',330),
  ('term -> factor','term',1,'p_term1','Parser.py',335),
  ('term -> term multiplyingOperator factor','term',3,'p_term2','Parser.py',340),
  ('multiplyingOperator -> TIMES','multiplyingOperator',1,'p_multiplyingOperator1','Parser.py',345),
  ('multiplyingOperator -> DIVIDE','multiplyingOperator',1,'p_multiplyingOperator2','Parser.py',350),
  ('multiplyingOperator -> DIVIDE_E','multiplyingOperator',1,'p_multiplyingOperator3','Parser.py',355),
  ('factor -> factorM','factor',1,'p_factor1','Parser.py',360),
  ('factor -> factor MODULE factorM','factor',3,'p_factor2','Parser.py',365),
  ('factorM -> index','factorM',1,'p_factorM1','Parser.py',370),
  ('factorM -> factorM EXPONENT index','factorM',3,'p_factorM2','Parser.py',375),
  ('index -> empty NUMBER_I','index',2,'p_index1','Parser.py',380),
  ('index -> empty NUMBER_F','index',2,'p_index1','Parser.py',381),
  ('index -> addingOperator NUMBER_I','index',2,'p_index1','Parser.py',382),
  ('index -> addingOperator NUMBER_F','index',2,'p_index1','Parser.py',383),
  ('index -> addingOperator ID','index',2,'p_index1','Parser.py',384),
  ('index -> empty ID','index',2,'p_index1','Parser.py',385),
  ('index -> LPARENT expression RPARENT','index',3,'p_index2','Parser.py',390),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',395),
]
