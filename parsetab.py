
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNCOMPAREleftNEleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEDIVIDE_EleftMODULEleftEXPONENTleftLPARENTRPARENTA ABANICO ASSIGN B COMMA COMPARE CUANDO D DEF DIVIDE DIVIDE_E DOT EC ELSE ET EXEC EXPONENT F FALSE FEC FOR GOLPE GT GTE I ID IF LBRACKET LPARENT LT LTE METRONOMO MINUS MODULE NE NEG NUMBER_F NUMBER_I PERCUTOR PLUS PRIN PRINT RBRACKET RPARENT SEMICOLOM SET SN SPACE STEP STRING T TIMES TO TRUE TYPE VERTICAL VIBRATOprogram : prinDecl program\n\t\t\t | functionDecl program\n\t\t\t | empty emptyprinDecl : DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKETfunctionDecl : DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKETstatementList : statement statementList : statementList statement statement : SET ID COMMA TRUE SEMICOLOM\n    \t\t\t| SET ID COMMA FALSE SEMICOLOM\n    \t\t\t| SET ID COMMA expression SEMICOLOMstatement : EXEC ID LPARENT varList RPARENT SEMICOLOMstatement : TYPE LPARENT ID RPARENT SEMICOLOMstatement : IF conditionif LBRACKET statementList RBRACKET empty\n                 | IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET statement : FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET\n    \t\t\t| FOR ID TO expression STEP empty LBRACKET statementList RBRACKETstatement : EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM\n\t                 | EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOMstatement : SET ID DOT NEG SEMICOLOMstatement : SET ID DOT T SEMICOLOM\n    \t\t\t | SET ID DOT F SEMICOLOMstatement : ABANICO LPARENT A RPARENT SEMICOLOM\n       \t\t\t| ABANICO LPARENT B RPARENT SEMICOLOMstatement : VERTICAL LPARENT D RPARENT SEMICOLOM\n       \t\t\t| VERTICAL LPARENT I RPARENT SEMICOLOMstatement : PERCUTOR LPARENT A empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT B empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT A B RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT D empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT I empty RPARENT SEMICOLOM\n       \t\t\t| PERCUTOR LPARENT D I RPARENT SEMICOLOMstatement : GOLPE LPARENT RPARENT SEMICOLOMstatement : VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOMstatement : METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM\n    \t\t      | METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM\n    \t\t      | METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM\n    \t\t      | METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOMstatement : PRINT LPARENT printTextList RPARENT SEMICOLOMprintTextList : printTextprintTextList : printTextList COMMA printTextprintText : expression\n\t\t\t\t\t| STRINGvarList : var\n\t\t\t\t| emptyvarList : varList COMMA var var : ID\n\t\t\t| NUMBER_I\n\t\t\t| NUMBER_F\n\t\t\t| TRUE\n\t\t\t| FALSEconditionif : expression relation expression\n\t\t\t\t| TRUE\n\t\t\t\t| FALSE\n\t\t\t\t| IDinCaseLista : inCasea inCaseLista : inCaseLista inCaseainCasea : ID relation expressioninCaseListb : inCaseb inCaseListb : inCaseListb inCasebinCaseb : relation expressionrelation : COMPARErelation : NErelation : LTrelation : GTrelation : LTErelation : GTEexpression : termexpression : addingOperator termexpression : expression addingOperator termaddingOperator : PLUSaddingOperator : MINUSterm : factorterm : term multiplyingOperator factormultiplyingOperator : TIMESmultiplyingOperator : DIVIDEmultiplyingOperator : DIVIDE_Efactor : factorMfactor : factor MODULE factorMfactorM : indexfactorM : factorM EXPONENT indexindex : NUMBER_I\n\t\t\t  | NUMBER_F\n\t\t\t  | IDindex : LPARENT expression RPARENTempty : '
    
_lr_action_items = {'DEF':([0,2,3,42,119,],[5,5,5,-4,-5,]),'$end':([0,1,2,3,4,6,7,8,42,119,],[-85,0,-85,-85,-85,-1,-2,-3,-4,-5,]),'PRIN':([5,],[9,]),'ID':([5,12,24,27,28,30,31,32,46,52,53,54,55,56,57,58,59,60,61,63,65,72,74,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,98,101,130,131,132,133,134,137,140,141,157,169,],[10,14,14,44,45,51,62,64,77,-67,92,-72,-70,-71,-77,-79,-81,-82,92,99,-55,92,92,14,92,92,-61,-62,-63,-64,-65,-66,92,-74,-75,-76,-68,-83,92,92,92,-56,92,-69,-73,-78,-80,-84,92,92,-57,92,-57,]),'LPARENT':([9,10,29,30,33,34,35,36,37,38,39,45,53,55,56,61,72,74,79,80,81,82,83,84,85,86,87,88,89,90,93,94,96,101,137,140,157,],[11,12,46,61,66,67,68,69,70,71,72,76,61,-70,-71,61,61,61,61,61,-61,-62,-63,-64,-65,-66,61,-74,-75,-76,61,61,61,61,61,61,61,]),'RPARENT':([11,12,14,15,16,17,18,19,20,21,41,52,54,57,58,59,60,69,76,77,91,92,95,103,104,105,106,107,108,109,110,112,115,116,117,118,126,130,131,132,133,134,146,147,148,149,150,151,183,184,185,186,188,],[13,-85,-46,23,-43,-44,-47,-48,-49,-50,-45,-67,-72,-77,-79,-81,-82,111,-85,127,-68,-83,134,142,143,144,145,-85,-85,-85,-85,153,156,-39,-41,-42,164,-69,-73,-78,-80,-84,176,177,178,179,180,181,202,203,204,205,-40,]),'NUMBER_I':([12,24,30,53,55,56,61,70,72,74,76,79,80,81,82,83,84,85,86,87,88,89,90,93,94,96,101,137,140,154,155,157,167,],[18,18,59,59,-70,-71,59,112,59,59,18,59,59,-61,-62,-63,-64,-65,-66,59,-74,-75,-76,59,59,59,59,59,59,183,185,59,192,]),'NUMBER_F':([12,24,30,53,55,56,61,72,74,76,79,80,81,82,83,84,85,86,87,88,89,90,93,94,96,101,137,140,154,155,157,],[19,19,60,60,-70,-71,60,60,60,19,60,60,-61,-62,-63,-64,-65,-66,60,-74,-75,-76,60,60,60,60,60,60,184,186,60,]),'TRUE':([12,24,30,74,76,],[20,20,49,120,20,]),'FALSE':([12,24,30,74,76,],[21,21,50,121,21,]),'COMMA':([12,14,15,16,17,18,19,20,21,41,44,52,54,57,58,59,60,76,91,92,113,114,115,116,117,118,126,130,131,132,133,134,188,],[-85,-46,24,-43,-44,-47,-48,-49,-50,-45,74,-67,-72,-77,-79,-81,-82,-85,-68,-83,154,155,157,-39,-41,-42,24,-69,-73,-78,-80,-84,-40,]),'LBRACKET':([13,23,47,49,50,51,52,54,57,58,59,60,91,92,97,129,130,131,132,133,134,138,167,191,192,193,],[22,40,78,-52,-53,-54,-67,-72,-77,-79,-81,-82,-68,-83,136,-51,-69,-73,-78,-80,-84,170,-85,206,207,208,]),'SET':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[27,27,-6,27,-7,27,27,27,27,-32,-8,-9,-10,-19,-20,-21,-12,-85,27,27,-22,-23,-24,-25,-33,-38,-11,-13,27,-26,-28,-27,-29,-31,-30,27,27,27,-34,-36,-35,-37,27,27,27,-17,-14,-15,-16,-18,]),'EXEC':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[28,28,-6,28,-7,28,28,28,28,-32,-8,-9,-10,-19,-20,-21,-12,-85,28,28,-22,-23,-24,-25,-33,-38,-11,-13,28,-26,-28,-27,-29,-31,-30,28,28,28,-34,-36,-35,-37,28,28,28,-17,-14,-15,-16,-18,]),'TYPE':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[29,29,-6,29,-7,29,29,29,29,-32,-8,-9,-10,-19,-20,-21,-12,-85,29,29,-22,-23,-24,-25,-33,-38,-11,-13,29,-26,-28,-27,-29,-31,-30,29,29,29,-34,-36,-35,-37,29,29,29,-17,-14,-15,-16,-18,]),'IF':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[30,30,-6,30,-7,30,30,30,30,-32,-8,-9,-10,-19,-20,-21,-12,-85,30,30,-22,-23,-24,-25,-33,-38,-11,-13,30,-26,-28,-27,-29,-31,-30,30,30,30,-34,-36,-35,-37,30,30,30,-17,-14,-15,-16,-18,]),'FOR':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[31,31,-6,31,-7,31,31,31,31,-32,-8,-9,-10,-19,-20,-21,-12,-85,31,31,-22,-23,-24,-25,-33,-38,-11,-13,31,-26,-28,-27,-29,-31,-30,31,31,31,-34,-36,-35,-37,31,31,31,-17,-14,-15,-16,-18,]),'EC':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[32,32,-6,32,-7,32,32,32,32,-32,-8,-9,-10,-19,-20,-21,-12,-85,32,32,-22,-23,-24,-25,-33,-38,-11,-13,32,-26,-28,-27,-29,-31,-30,32,32,32,-34,-36,-35,-37,32,32,32,-17,-14,-15,-16,-18,]),'ABANICO':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[33,33,-6,33,-7,33,33,33,33,-32,-8,-9,-10,-19,-20,-21,-12,-85,33,33,-22,-23,-24,-25,-33,-38,-11,-13,33,-26,-28,-27,-29,-31,-30,33,33,33,-34,-36,-35,-37,33,33,33,-17,-14,-15,-16,-18,]),'VERTICAL':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[34,34,-6,34,-7,34,34,34,34,-32,-8,-9,-10,-19,-20,-21,-12,-85,34,34,-22,-23,-24,-25,-33,-38,-11,-13,34,-26,-28,-27,-29,-31,-30,34,34,34,-34,-36,-35,-37,34,34,34,-17,-14,-15,-16,-18,]),'PERCUTOR':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[35,35,-6,35,-7,35,35,35,35,-32,-8,-9,-10,-19,-20,-21,-12,-85,35,35,-22,-23,-24,-25,-33,-38,-11,-13,35,-26,-28,-27,-29,-31,-30,35,35,35,-34,-36,-35,-37,35,35,35,-17,-14,-15,-16,-18,]),'GOLPE':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[36,36,-6,36,-7,36,36,36,36,-32,-8,-9,-10,-19,-20,-21,-12,-85,36,36,-22,-23,-24,-25,-33,-38,-11,-13,36,-26,-28,-27,-29,-31,-30,36,36,36,-34,-36,-35,-37,36,36,36,-17,-14,-15,-16,-18,]),'VIBRATO':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[37,37,-6,37,-7,37,37,37,37,-32,-8,-9,-10,-19,-20,-21,-12,-85,37,37,-22,-23,-24,-25,-33,-38,-11,-13,37,-26,-28,-27,-29,-31,-30,37,37,37,-34,-36,-35,-37,37,37,37,-17,-14,-15,-16,-18,]),'METRONOMO':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[38,38,-6,38,-7,38,38,38,38,-32,-8,-9,-10,-19,-20,-21,-12,-85,38,38,-22,-23,-24,-25,-33,-38,-11,-13,38,-26,-28,-27,-29,-31,-30,38,38,38,-34,-36,-35,-37,38,38,38,-17,-14,-15,-16,-18,]),'PRINT':([22,25,26,40,43,73,78,128,136,152,158,159,160,161,162,163,165,166,168,170,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,206,207,208,211,212,213,214,215,216,217,218,220,221,222,223,],[39,39,-6,39,-7,39,39,39,39,-32,-8,-9,-10,-19,-20,-21,-12,-85,39,39,-22,-23,-24,-25,-33,-38,-11,-13,39,-26,-28,-27,-29,-31,-30,39,39,39,-34,-36,-35,-37,39,39,39,-17,-14,-15,-16,-18,]),'RBRACKET':([25,26,43,73,128,152,158,159,160,161,162,163,165,166,168,172,173,174,175,182,187,189,190,195,196,197,198,199,200,201,211,212,213,214,215,216,217,218,220,221,222,223,],[42,-6,-7,119,166,-32,-8,-9,-10,-19,-20,-21,-12,-85,194,-22,-23,-24,-25,-33,-38,-11,-13,210,-26,-28,-27,-29,-31,-30,-34,-36,-35,-37,220,221,222,-17,-14,-15,-16,-18,]),'PLUS':([30,48,51,52,54,57,58,59,60,61,72,74,79,81,82,83,84,85,86,91,92,95,96,101,117,122,129,130,131,132,133,134,135,137,140,141,157,169,171,],[55,55,-83,-67,-72,-77,-79,-81,-82,55,55,55,55,-61,-62,-63,-64,-65,-66,-68,-83,55,55,55,55,55,55,-69,-73,-78,-80,-84,55,55,55,55,55,55,55,]),'MINUS':([30,48,51,52,54,57,58,59,60,61,72,74,79,81,82,83,84,85,86,91,92,95,96,101,117,122,129,130,131,132,133,134,135,137,140,141,157,169,171,],[56,56,-83,-67,-72,-77,-79,-81,-82,56,56,56,56,-61,-62,-63,-64,-65,-66,-68,-83,56,56,56,56,56,56,-69,-73,-78,-80,-84,56,56,56,56,56,56,56,]),'DOT':([44,],[75,]),'COMPARE':([48,51,52,54,57,58,59,60,64,91,92,99,100,102,130,131,132,133,134,139,141,171,],[81,-83,-67,-72,-77,-79,-81,-82,81,-68,-83,81,81,-58,-69,-73,-78,-80,-84,-59,-60,-60,]),'NE':([48,51,52,54,57,58,59,60,64,91,92,99,100,102,130,131,132,133,134,139,141,171,],[82,-83,-67,-72,-77,-79,-81,-82,82,-68,-83,82,82,-58,-69,-73,-78,-80,-84,-59,-60,-60,]),'LT':([48,51,52,54,57,58,59,60,64,91,92,99,100,102,130,131,132,133,134,139,141,171,],[83,-83,-67,-72,-77,-79,-81,-82,83,-68,-83,83,83,-58,-69,-73,-78,-80,-84,-59,-60,-60,]),'GT':([48,51,52,54,57,58,59,60,64,91,92,99,100,102,130,131,132,133,134,139,141,171,],[84,-83,-67,-72,-77,-79,-81,-82,84,-68,-83,84,84,-58,-69,-73,-78,-80,-84,-59,-60,-60,]),'LTE':([48,51,52,54,57,58,59,60,64,91,92,99,100,102,130,131,132,133,134,139,141,171,],[85,-83,-67,-72,-77,-79,-81,-82,85,-68,-83,85,85,-58,-69,-73,-78,-80,-84,-59,-60,-60,]),'GTE':([48,51,52,54,57,58,59,60,64,91,92,99,100,102,130,131,132,133,134,139,141,171,],[86,-83,-67,-72,-77,-79,-81,-82,86,-68,-83,86,86,-58,-69,-73,-78,-80,-84,-59,-60,-60,]),'EXPONENT':([51,57,58,59,60,92,132,133,134,],[-83,94,-79,-81,-82,-83,94,-80,-84,]),'MODULE':([51,54,57,58,59,60,92,131,132,133,134,],[-83,93,-77,-79,-81,-82,-83,93,-78,-80,-84,]),'TIMES':([51,52,54,57,58,59,60,91,92,130,131,132,133,134,],[-83,88,-72,-77,-79,-81,-82,88,-83,88,-73,-78,-80,-84,]),'DIVIDE':([51,52,54,57,58,59,60,91,92,130,131,132,133,134,],[-83,89,-72,-77,-79,-81,-82,89,-83,89,-73,-78,-80,-84,]),'DIVIDE_E':([51,52,54,57,58,59,60,91,92,130,131,132,133,134,],[-83,90,-72,-77,-79,-81,-82,90,-83,90,-73,-78,-80,-84,]),'SEMICOLOM':([52,54,57,58,59,60,91,92,111,120,121,122,123,124,125,127,130,131,132,133,134,142,143,144,145,153,156,164,176,177,178,179,180,181,202,203,204,205,209,219,],[-67,-72,-77,-79,-81,-82,-68,-83,152,158,159,160,161,162,163,165,-69,-73,-78,-80,-84,172,173,174,175,182,187,189,196,197,198,199,200,201,211,212,213,214,218,223,]),'STEP':([52,54,57,58,59,60,91,92,130,131,132,133,134,135,],[-67,-72,-77,-79,-81,-82,-68,-83,-69,-73,-78,-80,-84,167,]),'SN':([52,54,57,58,59,60,63,65,91,92,98,100,102,130,131,132,133,134,139,141,169,171,],[-67,-72,-77,-79,-81,-82,97,-55,-68,-83,-56,138,-58,-69,-73,-78,-80,-84,-59,-57,-57,-60,]),'TO':([62,],[96,]),'A':([66,68,71,],[103,107,113,]),'B':([66,68,107,],[104,108,147,]),'D':([67,68,71,],[105,109,114,]),'I':([67,68,109,],[106,110,150,]),'STRING':([72,157,],[118,118,]),'NEG':([75,],[123,]),'T':([75,],[124,]),'F':([75,],[125,]),'ELSE':([166,],[191,]),'FEC':([194,210,],[209,219,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,6,7,]),'prinDecl':([0,2,3,],[2,2,2,]),'functionDecl':([0,2,3,],[3,3,3,]),'empty':([0,2,3,4,12,76,107,108,109,110,166,167,],[4,4,4,8,17,17,146,148,149,151,190,193,]),'varList':([12,76,],[15,126,]),'var':([12,24,76,],[16,41,16,]),'statementList':([22,40,78,136,170,206,207,208,],[25,73,128,168,195,215,216,217,]),'statement':([22,25,40,73,78,128,136,168,170,195,206,207,208,215,216,217,],[26,43,26,43,26,43,26,43,26,43,26,26,26,43,43,43,]),'conditionif':([30,],[47,]),'expression':([30,61,72,74,79,96,101,137,140,157,],[48,95,117,122,129,135,141,169,171,117,]),'term':([30,53,61,72,74,79,80,96,101,137,140,157,],[52,91,52,52,52,52,130,52,52,52,52,52,]),'addingOperator':([30,48,61,72,74,79,95,96,101,117,122,129,135,137,140,141,157,169,171,],[53,80,53,53,53,53,80,53,53,80,80,80,80,53,53,80,53,80,80,]),'factor':([30,53,61,72,74,79,80,87,96,101,137,140,157,],[54,54,54,54,54,54,54,131,54,54,54,54,54,]),'factorM':([30,53,61,72,74,79,80,87,93,96,101,137,140,157,],[57,57,57,57,57,57,57,57,132,57,57,57,57,57,]),'index':([30,53,61,72,74,79,80,87,93,94,96,101,137,140,157,],[58,58,58,58,58,58,58,58,58,133,58,58,58,58,58,]),'inCaseLista':([32,],[63,]),'inCasea':([32,63,],[65,98,]),'relation':([48,64,99,100,],[79,101,137,140,]),'multiplyingOperator':([52,91,130,],[87,87,87,]),'inCaseListb':([64,],[100,]),'inCaseb':([64,100,],[102,139,]),'printTextList':([72,],[115,]),'printText':([72,157,],[116,188,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> prinDecl program','program',2,'p_program','Parser.py',23),
  ('program -> functionDecl program','program',2,'p_program','Parser.py',24),
  ('program -> empty empty','program',2,'p_program','Parser.py',25),
  ('prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET','prinDecl',7,'p_prinDecl','Parser.py',37),
  ('functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET','functionDecl',8,'p_functionDecl','Parser.py',42),
  ('statementList -> statement','statementList',1,'p_statementList1','Parser.py',52),
  ('statementList -> statementList statement','statementList',2,'p_statementList2','Parser.py',59),
  ('statement -> SET ID COMMA TRUE SEMICOLOM','statement',5,'p_statement1','Parser.py',67),
  ('statement -> SET ID COMMA FALSE SEMICOLOM','statement',5,'p_statement1','Parser.py',68),
  ('statement -> SET ID COMMA expression SEMICOLOM','statement',5,'p_statement1','Parser.py',69),
  ('statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM','statement',6,'p_statement2','Parser.py',76),
  ('statement -> TYPE LPARENT ID RPARENT SEMICOLOM','statement',5,'p_statement3','Parser.py',83),
  ('statement -> IF conditionif LBRACKET statementList RBRACKET empty','statement',6,'p_statement4','Parser.py',90),
  ('statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET','statement',9,'p_statement4','Parser.py',91),
  ('statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET','statement',9,'p_statement5','Parser.py',102),
  ('statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET','statement',9,'p_statement5','Parser.py',103),
  ('statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM','statement',8,'p_statement6','Parser.py',111),
  ('statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM','statement',9,'p_statement6','Parser.py',112),
  ('statement -> SET ID DOT NEG SEMICOLOM','statement',5,'p_statement7','Parser.py',122),
  ('statement -> SET ID DOT T SEMICOLOM','statement',5,'p_statement8','Parser.py',129),
  ('statement -> SET ID DOT F SEMICOLOM','statement',5,'p_statement8','Parser.py',130),
  ('statement -> ABANICO LPARENT A RPARENT SEMICOLOM','statement',5,'p_statement9','Parser.py',137),
  ('statement -> ABANICO LPARENT B RPARENT SEMICOLOM','statement',5,'p_statement9','Parser.py',138),
  ('statement -> VERTICAL LPARENT D RPARENT SEMICOLOM','statement',5,'p_statement10','Parser.py',145),
  ('statement -> VERTICAL LPARENT I RPARENT SEMICOLOM','statement',5,'p_statement10','Parser.py',146),
  ('statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',154),
  ('statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',155),
  ('statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',156),
  ('statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',157),
  ('statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',158),
  ('statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM','statement',6,'p_statement11','Parser.py',159),
  ('statement -> GOLPE LPARENT RPARENT SEMICOLOM','statement',4,'p_statement12','Parser.py',167),
  ('statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM','statement',5,'p_statement13','Parser.py',174),
  ('statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',182),
  ('statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',183),
  ('statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',184),
  ('statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM','statement',7,'p_statement14','Parser.py',185),
  ('statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM','statement',5,'p_statement15','Parser.py',192),
  ('printTextList -> printText','printTextList',1,'p_printTextList1','Parser.py',201),
  ('printTextList -> printTextList COMMA printText','printTextList',3,'p_printTextList2','Parser.py',206),
  ('printText -> expression','printText',1,'p_printText','Parser.py',211),
  ('printText -> STRING','printText',1,'p_printText','Parser.py',212),
  ('varList -> var','varList',1,'p_varList1','Parser.py',217),
  ('varList -> empty','varList',1,'p_varList1','Parser.py',218),
  ('varList -> varList COMMA var','varList',3,'p_varList2','Parser.py',223),
  ('var -> ID','var',1,'p_var','Parser.py',228),
  ('var -> NUMBER_I','var',1,'p_var','Parser.py',229),
  ('var -> NUMBER_F','var',1,'p_var','Parser.py',230),
  ('var -> TRUE','var',1,'p_var','Parser.py',231),
  ('var -> FALSE','var',1,'p_var','Parser.py',232),
  ('conditionif -> expression relation expression','conditionif',3,'p_conditionif','Parser.py',237),
  ('conditionif -> TRUE','conditionif',1,'p_conditionif','Parser.py',238),
  ('conditionif -> FALSE','conditionif',1,'p_conditionif','Parser.py',239),
  ('conditionif -> ID','conditionif',1,'p_conditionif','Parser.py',240),
  ('inCaseLista -> inCasea','inCaseLista',1,'p_inCaseLista1','Parser.py',248),
  ('inCaseLista -> inCaseLista inCasea','inCaseLista',2,'p_inCaseLista2','Parser.py',253),
  ('inCasea -> ID relation expression','inCasea',3,'p_inCasea','Parser.py',258),
  ('inCaseListb -> inCaseb','inCaseListb',1,'p_inCaseListb1','Parser.py',263),
  ('inCaseListb -> inCaseListb inCaseb','inCaseListb',2,'p_inCaseListb2','Parser.py',268),
  ('inCaseb -> relation expression','inCaseb',2,'p_inCaseb','Parser.py',273),
  ('relation -> COMPARE','relation',1,'p_relation1','Parser.py',278),
  ('relation -> NE','relation',1,'p_relation2','Parser.py',283),
  ('relation -> LT','relation',1,'p_relation3','Parser.py',288),
  ('relation -> GT','relation',1,'p_relation4','Parser.py',293),
  ('relation -> LTE','relation',1,'p_relation5','Parser.py',298),
  ('relation -> GTE','relation',1,'p_relation6','Parser.py',303),
  ('expression -> term','expression',1,'p_expression1','Parser.py',308),
  ('expression -> addingOperator term','expression',2,'p_expression2','Parser.py',313),
  ('expression -> expression addingOperator term','expression',3,'p_expression3','Parser.py',318),
  ('addingOperator -> PLUS','addingOperator',1,'p_addingOperator1','Parser.py',323),
  ('addingOperator -> MINUS','addingOperator',1,'p_addingOperator2','Parser.py',328),
  ('term -> factor','term',1,'p_term1','Parser.py',333),
  ('term -> term multiplyingOperator factor','term',3,'p_term2','Parser.py',338),
  ('multiplyingOperator -> TIMES','multiplyingOperator',1,'p_multiplyingOperator1','Parser.py',343),
  ('multiplyingOperator -> DIVIDE','multiplyingOperator',1,'p_multiplyingOperator2','Parser.py',348),
  ('multiplyingOperator -> DIVIDE_E','multiplyingOperator',1,'p_multiplyingOperator3','Parser.py',353),
  ('factor -> factorM','factor',1,'p_factor1','Parser.py',358),
  ('factor -> factor MODULE factorM','factor',3,'p_factor2','Parser.py',363),
  ('factorM -> index','factorM',1,'p_factorM1','Parser.py',368),
  ('factorM -> factorM EXPONENT index','factorM',3,'p_factorM2','Parser.py',373),
  ('index -> NUMBER_I','index',1,'p_index1','Parser.py',378),
  ('index -> NUMBER_F','index',1,'p_index1','Parser.py',379),
  ('index -> ID','index',1,'p_index1','Parser.py',380),
  ('index -> LPARENT expression RPARENT','index',3,'p_index2','Parser.py',385),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',390),
]
