Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    SPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> prinDecl program
Rule 2     program -> functionDecl program
Rule 3     program -> empty empty
Rule 4     prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
Rule 5     functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
Rule 6     statementList -> statement
Rule 7     statementList -> statementList statement
Rule 8     statement -> SET ID COMMA TRUE SEMICOLOM
Rule 9     statement -> SET ID COMMA FALSE SEMICOLOM
Rule 10    statement -> SET ID COMMA expression SEMICOLOM
Rule 11    statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM
Rule 12    statement -> TYPE LPARENT ID RPARENT SEMICOLOM
Rule 13    statement -> IF conditionif LBRACKET statementList RBRACKET empty
Rule 14    statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
Rule 15    statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
Rule 16    statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET
Rule 17    statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
Rule 18    statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
Rule 19    statement -> SET ID DOT NEG SEMICOLOM
Rule 20    statement -> SET ID DOT T SEMICOLOM
Rule 21    statement -> SET ID DOT F SEMICOLOM
Rule 22    statement -> ABANICO LPARENT A RPARENT SEMICOLOM
Rule 23    statement -> ABANICO LPARENT B RPARENT SEMICOLOM
Rule 24    statement -> VERTICAL LPARENT D RPARENT SEMICOLOM
Rule 25    statement -> VERTICAL LPARENT I RPARENT SEMICOLOM
Rule 26    statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM
Rule 27    statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM
Rule 28    statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM
Rule 29    statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM
Rule 30    statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM
Rule 31    statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM
Rule 32    statement -> GOLPE LPARENT RPARENT SEMICOLOM
Rule 33    statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
Rule 34    statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
Rule 35    statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
Rule 36    statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
Rule 37    statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
Rule 38    statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM
Rule 39    printTextList -> printText
Rule 40    printTextList -> printTextList COMMA printText
Rule 41    printText -> printvar
Rule 42    printText -> STRING
Rule 43    printvar -> ID
Rule 44    printvar -> NUMBER_I
Rule 45    printvar -> NUMBER_F
Rule 46    printvar -> TRUE
Rule 47    printvar -> FALSE
Rule 48    varList -> var
Rule 49    varList -> empty
Rule 50    varList -> varList COMMA var
Rule 51    var -> ID
Rule 52    var -> NUMBER_I
Rule 53    var -> NUMBER_F
Rule 54    var -> TRUE
Rule 55    var -> FALSE
Rule 56    conditionif -> expression relation expression
Rule 57    conditionif -> TRUE
Rule 58    conditionif -> FALSE
Rule 59    conditionif -> ID
Rule 60    conditionif -> ID relation var
Rule 61    inCaseLista -> inCasea
Rule 62    inCaseLista -> inCaseLista inCasea
Rule 63    inCasea -> CUANDO ID relation expression ET LBRACKET statementList RBRACKET
Rule 64    inCasea -> CUANDO ID relation TRUE ET LBRACKET statementList RBRACKET
Rule 65    inCasea -> CUANDO ID relation FALSE ET LBRACKET statementList RBRACKET
Rule 66    inCaseListb -> inCaseb
Rule 67    inCaseListb -> inCaseListb inCaseb
Rule 68    inCaseb -> CUANDO relation expression ET LBRACKET statementList RBRACKET
Rule 69    inCaseb -> CUANDO relation TRUE ET LBRACKET statementList RBRACKET
Rule 70    inCaseb -> CUANDO relation FALSE ET LBRACKET statementList RBRACKET
Rule 71    relation -> COMPARE
Rule 72    relation -> NE
Rule 73    relation -> LT
Rule 74    relation -> GT
Rule 75    relation -> LTE
Rule 76    relation -> GTE
Rule 77    expression -> term
Rule 78    expression -> addingOperator term
Rule 79    expression -> expression addingOperator term
Rule 80    addingOperator -> PLUS
Rule 81    addingOperator -> MINUS
Rule 82    term -> factor
Rule 83    term -> term multiplyingOperator factor
Rule 84    multiplyingOperator -> TIMES
Rule 85    multiplyingOperator -> DIVIDE
Rule 86    multiplyingOperator -> DIVIDE_E
Rule 87    factor -> factorM
Rule 88    factor -> factor MODULE factorM
Rule 89    factorM -> index
Rule 90    factorM -> factorM EXPONENT index
Rule 91    index -> NUMBER_I empty
Rule 92    index -> NUMBER_F empty
Rule 93    index -> addingOperator NUMBER_I
Rule 94    index -> addingOperator NUMBER_F
Rule 95    index -> addingOperator ID
Rule 96    index -> ID empty
Rule 97    index -> LPARENT expression RPARENT
Rule 98    empty -> <empty>

Terminals, with rules where they appear

A                    : 22 26 28 34 36
ABANICO              : 22 23
ASSIGN               : 
B                    : 23 27 28
COMMA                : 8 9 10 34 35 36 37 40 50
COMPARE              : 71
CUANDO               : 63 64 65 68 69 70
D                    : 24 29 31 35 37
DEF                  : 4 5
DIVIDE               : 85
DIVIDE_E             : 86
DOT                  : 19 20 21
EC                   : 17 18
ELSE                 : 14
ET                   : 63 64 65 68 69 70
EXEC                 : 11
EXPONENT             : 90
F                    : 21
FALSE                : 9 47 55 58 65 70
FEC                  : 17 18
FOR                  : 15 16
GOLPE                : 32
GT                   : 74
GTE                  : 76
I                    : 25 30 31
ID                   : 5 8 9 10 11 12 15 16 18 19 20 21 43 51 59 60 63 64 65 95 96
IF                   : 13 14
LBRACKET             : 4 5 13 14 14 15 16 17 18 63 64 65 68 69 70
LPARENT              : 4 5 11 12 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 97
LT                   : 73
LTE                  : 75
METRONOMO            : 34 35 36 37
MINUS                : 81
MODULE               : 88
NE                   : 72
NEG                  : 19
NUMBER_F             : 36 37 45 53 92 94
NUMBER_I             : 15 33 34 35 44 52 91 93
PERCUTOR             : 26 27 28 29 30 31
PLUS                 : 80
PRIN                 : 4
PRINT                : 38
RBRACKET             : 4 5 13 14 14 15 16 17 18 63 64 65 68 69 70
RPARENT              : 4 5 11 12 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 97
SEMICOLOM            : 8 9 10 11 12 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
SET                  : 8 9 10 19 20 21
SN                   : 17 18
SPACE                : 
STEP                 : 15
STRING               : 42
T                    : 20
TIMES                : 84
TO                   : 15 16
TRUE                 : 8 46 54 57 64 69
TYPE                 : 12
VERTICAL             : 24 25
VIBRATO              : 33
error                : 

Nonterminals, with rules where they appear

addingOperator       : 78 79 93 94 95
conditionif          : 13 14
empty                : 3 3 13 16 16 26 27 29 30 49 91 92 96
expression           : 10 15 16 56 56 63 68 79 97
factor               : 82 83 88
factorM              : 87 88 90
functionDecl         : 2
inCaseLista          : 17 62
inCaseListb          : 18 67
inCasea              : 61 62
inCaseb              : 66 67
index                : 89 90
multiplyingOperator  : 83
prinDecl             : 1
printText            : 39 40
printTextList        : 38 40
printvar             : 41
program              : 1 2 0
relation             : 56 60 63 64 65 68 69 70
statement            : 6 7
statementList        : 4 5 7 13 14 14 15 16 17 18 63 64 65 68 69 70
term                 : 77 78 79 83
var                  : 48 50 60
varList              : 5 11 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . prinDecl program
    (2) program -> . functionDecl program
    (3) program -> . empty empty
    (4) prinDecl -> . DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> . DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
    (98) empty -> .

    DEF             shift and go to state 5
    $end            reduce using rule 98 (empty -> .)

    program                        shift and go to state 1
    prinDecl                       shift and go to state 2
    functionDecl                   shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> prinDecl . program
    (1) program -> . prinDecl program
    (2) program -> . functionDecl program
    (3) program -> . empty empty
    (4) prinDecl -> . DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> . DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
    (98) empty -> .

    DEF             shift and go to state 5
    $end            reduce using rule 98 (empty -> .)

    prinDecl                       shift and go to state 2
    program                        shift and go to state 6
    functionDecl                   shift and go to state 3
    empty                          shift and go to state 4

state 3

    (2) program -> functionDecl . program
    (1) program -> . prinDecl program
    (2) program -> . functionDecl program
    (3) program -> . empty empty
    (4) prinDecl -> . DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> . DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
    (98) empty -> .

    DEF             shift and go to state 5
    $end            reduce using rule 98 (empty -> .)

    functionDecl                   shift and go to state 3
    program                        shift and go to state 7
    prinDecl                       shift and go to state 2
    empty                          shift and go to state 4

state 4

    (3) program -> empty . empty
    (98) empty -> .

    $end            reduce using rule 98 (empty -> .)

    empty                          shift and go to state 8

state 5

    (4) prinDecl -> DEF . PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> DEF . ID LPARENT varList RPARENT LBRACKET statementList RBRACKET

    PRIN            shift and go to state 9
    ID              shift and go to state 10


state 6

    (1) program -> prinDecl program .

    $end            reduce using rule 1 (program -> prinDecl program .)


state 7

    (2) program -> functionDecl program .

    $end            reduce using rule 2 (program -> functionDecl program .)


state 8

    (3) program -> empty empty .

    $end            reduce using rule 3 (program -> empty empty .)


state 9

    (4) prinDecl -> DEF PRIN . LPARENT RPARENT LBRACKET statementList RBRACKET

    LPARENT         shift and go to state 11


state 10

    (5) functionDecl -> DEF ID . LPARENT varList RPARENT LBRACKET statementList RBRACKET

    LPARENT         shift and go to state 12


state 11

    (4) prinDecl -> DEF PRIN LPARENT . RPARENT LBRACKET statementList RBRACKET

    RPARENT         shift and go to state 13


state 12

    (5) functionDecl -> DEF ID LPARENT . varList RPARENT LBRACKET statementList RBRACKET
    (48) varList -> . var
    (49) varList -> . empty
    (50) varList -> . varList COMMA var
    (51) var -> . ID
    (52) var -> . NUMBER_I
    (53) var -> . NUMBER_F
    (54) var -> . TRUE
    (55) var -> . FALSE
    (98) empty -> .

    ID              shift and go to state 14
    NUMBER_I        shift and go to state 18
    NUMBER_F        shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    RPARENT         reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)

    varList                        shift and go to state 15
    var                            shift and go to state 16
    empty                          shift and go to state 17

state 13

    (4) prinDecl -> DEF PRIN LPARENT RPARENT . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 22


state 14

    (51) var -> ID .

    RPARENT         reduce using rule 51 (var -> ID .)
    COMMA           reduce using rule 51 (var -> ID .)
    LBRACKET        reduce using rule 51 (var -> ID .)


state 15

    (5) functionDecl -> DEF ID LPARENT varList . RPARENT LBRACKET statementList RBRACKET
    (50) varList -> varList . COMMA var

    RPARENT         shift and go to state 23
    COMMA           shift and go to state 24


state 16

    (48) varList -> var .

    RPARENT         reduce using rule 48 (varList -> var .)
    COMMA           reduce using rule 48 (varList -> var .)


state 17

    (49) varList -> empty .

    RPARENT         reduce using rule 49 (varList -> empty .)
    COMMA           reduce using rule 49 (varList -> empty .)


state 18

    (52) var -> NUMBER_I .

    RPARENT         reduce using rule 52 (var -> NUMBER_I .)
    COMMA           reduce using rule 52 (var -> NUMBER_I .)
    LBRACKET        reduce using rule 52 (var -> NUMBER_I .)


state 19

    (53) var -> NUMBER_F .

    RPARENT         reduce using rule 53 (var -> NUMBER_F .)
    COMMA           reduce using rule 53 (var -> NUMBER_F .)
    LBRACKET        reduce using rule 53 (var -> NUMBER_F .)


state 20

    (54) var -> TRUE .

    RPARENT         reduce using rule 54 (var -> TRUE .)
    COMMA           reduce using rule 54 (var -> TRUE .)
    LBRACKET        reduce using rule 54 (var -> TRUE .)


state 21

    (55) var -> FALSE .

    RPARENT         reduce using rule 55 (var -> FALSE .)
    COMMA           reduce using rule 55 (var -> FALSE .)
    LBRACKET        reduce using rule 55 (var -> FALSE .)


state 22

    (4) prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 25
    statement                      shift and go to state 26

state 23

    (5) functionDecl -> DEF ID LPARENT varList RPARENT . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 40


state 24

    (50) varList -> varList COMMA . var
    (51) var -> . ID
    (52) var -> . NUMBER_I
    (53) var -> . NUMBER_F
    (54) var -> . TRUE
    (55) var -> . FALSE

    ID              shift and go to state 14
    NUMBER_I        shift and go to state 18
    NUMBER_F        shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21

    var                            shift and go to state 41

state 25

    (4) prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 42
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 26

    (6) statementList -> statement .

    RBRACKET        reduce using rule 6 (statementList -> statement .)
    SET             reduce using rule 6 (statementList -> statement .)
    EXEC            reduce using rule 6 (statementList -> statement .)
    TYPE            reduce using rule 6 (statementList -> statement .)
    IF              reduce using rule 6 (statementList -> statement .)
    FOR             reduce using rule 6 (statementList -> statement .)
    EC              reduce using rule 6 (statementList -> statement .)
    ABANICO         reduce using rule 6 (statementList -> statement .)
    VERTICAL        reduce using rule 6 (statementList -> statement .)
    PERCUTOR        reduce using rule 6 (statementList -> statement .)
    GOLPE           reduce using rule 6 (statementList -> statement .)
    VIBRATO         reduce using rule 6 (statementList -> statement .)
    METRONOMO       reduce using rule 6 (statementList -> statement .)
    PRINT           reduce using rule 6 (statementList -> statement .)


state 27

    (8) statement -> SET . ID COMMA TRUE SEMICOLOM
    (9) statement -> SET . ID COMMA FALSE SEMICOLOM
    (10) statement -> SET . ID COMMA expression SEMICOLOM
    (19) statement -> SET . ID DOT NEG SEMICOLOM
    (20) statement -> SET . ID DOT T SEMICOLOM
    (21) statement -> SET . ID DOT F SEMICOLOM

    ID              shift and go to state 44


state 28

    (11) statement -> EXEC . ID LPARENT varList RPARENT SEMICOLOM

    ID              shift and go to state 45


state 29

    (12) statement -> TYPE . LPARENT ID RPARENT SEMICOLOM

    LPARENT         shift and go to state 46


state 30

    (13) statement -> IF . conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> IF . conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (56) conditionif -> . expression relation expression
    (57) conditionif -> . TRUE
    (58) conditionif -> . FALSE
    (59) conditionif -> . ID
    (60) conditionif -> . ID relation var
    (77) expression -> . term
    (78) expression -> . addingOperator term
    (79) expression -> . expression addingOperator term
    (82) term -> . factor
    (83) term -> . term multiplyingOperator factor
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS
    (87) factor -> . factorM
    (88) factor -> . factor MODULE factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT

    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    LPARENT         shift and go to state 61

    conditionif                    shift and go to state 47
    expression                     shift and go to state 48
    term                           shift and go to state 52
    addingOperator                 shift and go to state 53
    factor                         shift and go to state 54
    factorM                        shift and go to state 57
    index                          shift and go to state 58

state 31

    (15) statement -> FOR . ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> FOR . ID TO expression empty empty LBRACKET statementList RBRACKET

    ID              shift and go to state 62


state 32

    (17) statement -> EC . inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> EC . ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (61) inCaseLista -> . inCasea
    (62) inCaseLista -> . inCaseLista inCasea
    (63) inCasea -> . CUANDO ID relation expression ET LBRACKET statementList RBRACKET
    (64) inCasea -> . CUANDO ID relation TRUE ET LBRACKET statementList RBRACKET
    (65) inCasea -> . CUANDO ID relation FALSE ET LBRACKET statementList RBRACKET

    ID              shift and go to state 64
    CUANDO          shift and go to state 66

    inCaseLista                    shift and go to state 63
    inCasea                        shift and go to state 65

state 33

    (22) statement -> ABANICO . LPARENT A RPARENT SEMICOLOM
    (23) statement -> ABANICO . LPARENT B RPARENT SEMICOLOM

    LPARENT         shift and go to state 67


state 34

    (24) statement -> VERTICAL . LPARENT D RPARENT SEMICOLOM
    (25) statement -> VERTICAL . LPARENT I RPARENT SEMICOLOM

    LPARENT         shift and go to state 68


state 35

    (26) statement -> PERCUTOR . LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> PERCUTOR . LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> PERCUTOR . LPARENT A B RPARENT SEMICOLOM
    (29) statement -> PERCUTOR . LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> PERCUTOR . LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> PERCUTOR . LPARENT D I RPARENT SEMICOLOM

    LPARENT         shift and go to state 69


state 36

    (32) statement -> GOLPE . LPARENT RPARENT SEMICOLOM

    LPARENT         shift and go to state 70


state 37

    (33) statement -> VIBRATO . LPARENT NUMBER_I RPARENT SEMICOLOM

    LPARENT         shift and go to state 71


state 38

    (34) statement -> METRONOMO . LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> METRONOMO . LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> METRONOMO . LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> METRONOMO . LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM

    LPARENT         shift and go to state 72


state 39

    (38) statement -> PRINT . LPARENT printTextList RPARENT SEMICOLOM

    LPARENT         shift and go to state 73


state 40

    (5) functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 74
    statement                      shift and go to state 26

state 41

    (50) varList -> varList COMMA var .

    RPARENT         reduce using rule 50 (varList -> varList COMMA var .)
    COMMA           reduce using rule 50 (varList -> varList COMMA var .)


state 42

    (4) prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET .

    DEF             reduce using rule 4 (prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET .)
    $end            reduce using rule 4 (prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET .)


state 43

    (7) statementList -> statementList statement .

    RBRACKET        reduce using rule 7 (statementList -> statementList statement .)
    SET             reduce using rule 7 (statementList -> statementList statement .)
    EXEC            reduce using rule 7 (statementList -> statementList statement .)
    TYPE            reduce using rule 7 (statementList -> statementList statement .)
    IF              reduce using rule 7 (statementList -> statementList statement .)
    FOR             reduce using rule 7 (statementList -> statementList statement .)
    EC              reduce using rule 7 (statementList -> statementList statement .)
    ABANICO         reduce using rule 7 (statementList -> statementList statement .)
    VERTICAL        reduce using rule 7 (statementList -> statementList statement .)
    PERCUTOR        reduce using rule 7 (statementList -> statementList statement .)
    GOLPE           reduce using rule 7 (statementList -> statementList statement .)
    VIBRATO         reduce using rule 7 (statementList -> statementList statement .)
    METRONOMO       reduce using rule 7 (statementList -> statementList statement .)
    PRINT           reduce using rule 7 (statementList -> statementList statement .)


state 44

    (8) statement -> SET ID . COMMA TRUE SEMICOLOM
    (9) statement -> SET ID . COMMA FALSE SEMICOLOM
    (10) statement -> SET ID . COMMA expression SEMICOLOM
    (19) statement -> SET ID . DOT NEG SEMICOLOM
    (20) statement -> SET ID . DOT T SEMICOLOM
    (21) statement -> SET ID . DOT F SEMICOLOM

    COMMA           shift and go to state 75
    DOT             shift and go to state 76


state 45

    (11) statement -> EXEC ID . LPARENT varList RPARENT SEMICOLOM

    LPARENT         shift and go to state 77


state 46

    (12) statement -> TYPE LPARENT . ID RPARENT SEMICOLOM

    ID              shift and go to state 78


state 47

    (13) statement -> IF conditionif . LBRACKET statementList RBRACKET empty
    (14) statement -> IF conditionif . LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 79


state 48

    (56) conditionif -> expression . relation expression
    (79) expression -> expression . addingOperator term
    (71) relation -> . COMPARE
    (72) relation -> . NE
    (73) relation -> . LT
    (74) relation -> . GT
    (75) relation -> . LTE
    (76) relation -> . GTE
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    COMPARE         shift and go to state 82
    NE              shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    relation                       shift and go to state 80
    addingOperator                 shift and go to state 81

state 49

    (57) conditionif -> TRUE .

    LBRACKET        reduce using rule 57 (conditionif -> TRUE .)


state 50

    (58) conditionif -> FALSE .

    LBRACKET        reduce using rule 58 (conditionif -> FALSE .)


state 51

    (59) conditionif -> ID .
    (60) conditionif -> ID . relation var
    (96) index -> ID . empty
    (71) relation -> . COMPARE
    (72) relation -> . NE
    (73) relation -> . LT
    (74) relation -> . GT
    (75) relation -> . LTE
    (76) relation -> . GTE
    (98) empty -> .

  ! shift/reduce conflict for COMPARE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
    LBRACKET        reduce using rule 59 (conditionif -> ID .)
    COMPARE         shift and go to state 82
    NE              shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    EXPONENT        reduce using rule 98 (empty -> .)
    MODULE          reduce using rule 98 (empty -> .)
    TIMES           reduce using rule 98 (empty -> .)
    DIVIDE          reduce using rule 98 (empty -> .)
    DIVIDE_E        reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)

  ! COMPARE         [ reduce using rule 98 (empty -> .) ]
  ! NE              [ reduce using rule 98 (empty -> .) ]
  ! LT              [ reduce using rule 98 (empty -> .) ]
  ! GT              [ reduce using rule 98 (empty -> .) ]
  ! LTE             [ reduce using rule 98 (empty -> .) ]
  ! GTE             [ reduce using rule 98 (empty -> .) ]

    relation                       shift and go to state 88
    empty                          shift and go to state 89

state 52

    (77) expression -> term .
    (83) term -> term . multiplyingOperator factor
    (84) multiplyingOperator -> . TIMES
    (85) multiplyingOperator -> . DIVIDE
    (86) multiplyingOperator -> . DIVIDE_E

    COMPARE         reduce using rule 77 (expression -> term .)
    NE              reduce using rule 77 (expression -> term .)
    LT              reduce using rule 77 (expression -> term .)
    GT              reduce using rule 77 (expression -> term .)
    LTE             reduce using rule 77 (expression -> term .)
    GTE             reduce using rule 77 (expression -> term .)
    PLUS            reduce using rule 77 (expression -> term .)
    MINUS           reduce using rule 77 (expression -> term .)
    RPARENT         reduce using rule 77 (expression -> term .)
    SEMICOLOM       reduce using rule 77 (expression -> term .)
    LBRACKET        reduce using rule 77 (expression -> term .)
    STEP            reduce using rule 77 (expression -> term .)
    ET              reduce using rule 77 (expression -> term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    DIVIDE_E        shift and go to state 93

    multiplyingOperator            shift and go to state 90

state 53

    (78) expression -> addingOperator . term
    (93) index -> addingOperator . NUMBER_I
    (94) index -> addingOperator . NUMBER_F
    (95) index -> addingOperator . ID
    (82) term -> . factor
    (83) term -> . term multiplyingOperator factor
    (87) factor -> . factorM
    (88) factor -> . factor MODULE factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    NUMBER_I        shift and go to state 96
    NUMBER_F        shift and go to state 97
    ID              shift and go to state 98
    LPARENT         shift and go to state 61
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    addingOperator                 shift and go to state 94
    term                           shift and go to state 95
    factor                         shift and go to state 54
    factorM                        shift and go to state 57
    index                          shift and go to state 58

state 54

    (82) term -> factor .
    (88) factor -> factor . MODULE factorM

    TIMES           reduce using rule 82 (term -> factor .)
    DIVIDE          reduce using rule 82 (term -> factor .)
    DIVIDE_E        reduce using rule 82 (term -> factor .)
    COMPARE         reduce using rule 82 (term -> factor .)
    NE              reduce using rule 82 (term -> factor .)
    LT              reduce using rule 82 (term -> factor .)
    GT              reduce using rule 82 (term -> factor .)
    LTE             reduce using rule 82 (term -> factor .)
    GTE             reduce using rule 82 (term -> factor .)
    PLUS            reduce using rule 82 (term -> factor .)
    MINUS           reduce using rule 82 (term -> factor .)
    RPARENT         reduce using rule 82 (term -> factor .)
    SEMICOLOM       reduce using rule 82 (term -> factor .)
    LBRACKET        reduce using rule 82 (term -> factor .)
    STEP            reduce using rule 82 (term -> factor .)
    ET              reduce using rule 82 (term -> factor .)
    MODULE          shift and go to state 99


state 55

    (80) addingOperator -> PLUS .

    NUMBER_I        reduce using rule 80 (addingOperator -> PLUS .)
    NUMBER_F        reduce using rule 80 (addingOperator -> PLUS .)
    ID              reduce using rule 80 (addingOperator -> PLUS .)
    LPARENT         reduce using rule 80 (addingOperator -> PLUS .)
    PLUS            reduce using rule 80 (addingOperator -> PLUS .)
    MINUS           reduce using rule 80 (addingOperator -> PLUS .)


state 56

    (81) addingOperator -> MINUS .

    NUMBER_I        reduce using rule 81 (addingOperator -> MINUS .)
    NUMBER_F        reduce using rule 81 (addingOperator -> MINUS .)
    ID              reduce using rule 81 (addingOperator -> MINUS .)
    LPARENT         reduce using rule 81 (addingOperator -> MINUS .)
    PLUS            reduce using rule 81 (addingOperator -> MINUS .)
    MINUS           reduce using rule 81 (addingOperator -> MINUS .)


state 57

    (87) factor -> factorM .
    (90) factorM -> factorM . EXPONENT index

    MODULE          reduce using rule 87 (factor -> factorM .)
    TIMES           reduce using rule 87 (factor -> factorM .)
    DIVIDE          reduce using rule 87 (factor -> factorM .)
    DIVIDE_E        reduce using rule 87 (factor -> factorM .)
    COMPARE         reduce using rule 87 (factor -> factorM .)
    NE              reduce using rule 87 (factor -> factorM .)
    LT              reduce using rule 87 (factor -> factorM .)
    GT              reduce using rule 87 (factor -> factorM .)
    LTE             reduce using rule 87 (factor -> factorM .)
    GTE             reduce using rule 87 (factor -> factorM .)
    PLUS            reduce using rule 87 (factor -> factorM .)
    MINUS           reduce using rule 87 (factor -> factorM .)
    RPARENT         reduce using rule 87 (factor -> factorM .)
    SEMICOLOM       reduce using rule 87 (factor -> factorM .)
    LBRACKET        reduce using rule 87 (factor -> factorM .)
    STEP            reduce using rule 87 (factor -> factorM .)
    ET              reduce using rule 87 (factor -> factorM .)
    EXPONENT        shift and go to state 100


state 58

    (89) factorM -> index .

    EXPONENT        reduce using rule 89 (factorM -> index .)
    MODULE          reduce using rule 89 (factorM -> index .)
    TIMES           reduce using rule 89 (factorM -> index .)
    DIVIDE          reduce using rule 89 (factorM -> index .)
    DIVIDE_E        reduce using rule 89 (factorM -> index .)
    COMPARE         reduce using rule 89 (factorM -> index .)
    NE              reduce using rule 89 (factorM -> index .)
    LT              reduce using rule 89 (factorM -> index .)
    GT              reduce using rule 89 (factorM -> index .)
    LTE             reduce using rule 89 (factorM -> index .)
    GTE             reduce using rule 89 (factorM -> index .)
    PLUS            reduce using rule 89 (factorM -> index .)
    MINUS           reduce using rule 89 (factorM -> index .)
    RPARENT         reduce using rule 89 (factorM -> index .)
    SEMICOLOM       reduce using rule 89 (factorM -> index .)
    LBRACKET        reduce using rule 89 (factorM -> index .)
    STEP            reduce using rule 89 (factorM -> index .)
    ET              reduce using rule 89 (factorM -> index .)


state 59

    (91) index -> NUMBER_I . empty
    (98) empty -> .

    EXPONENT        reduce using rule 98 (empty -> .)
    MODULE          reduce using rule 98 (empty -> .)
    TIMES           reduce using rule 98 (empty -> .)
    DIVIDE          reduce using rule 98 (empty -> .)
    DIVIDE_E        reduce using rule 98 (empty -> .)
    COMPARE         reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    RPARENT         reduce using rule 98 (empty -> .)
    SEMICOLOM       reduce using rule 98 (empty -> .)
    LBRACKET        reduce using rule 98 (empty -> .)
    STEP            reduce using rule 98 (empty -> .)
    ET              reduce using rule 98 (empty -> .)

    empty                          shift and go to state 101

state 60

    (92) index -> NUMBER_F . empty
    (98) empty -> .

    EXPONENT        reduce using rule 98 (empty -> .)
    MODULE          reduce using rule 98 (empty -> .)
    TIMES           reduce using rule 98 (empty -> .)
    DIVIDE          reduce using rule 98 (empty -> .)
    DIVIDE_E        reduce using rule 98 (empty -> .)
    COMPARE         reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    RPARENT         reduce using rule 98 (empty -> .)
    SEMICOLOM       reduce using rule 98 (empty -> .)
    LBRACKET        reduce using rule 98 (empty -> .)
    STEP            reduce using rule 98 (empty -> .)
    ET              reduce using rule 98 (empty -> .)

    empty                          shift and go to state 102

state 61

    (97) index -> LPARENT . expression RPARENT
    (77) expression -> . term
    (78) expression -> . addingOperator term
    (79) expression -> . expression addingOperator term
    (82) term -> . factor
    (83) term -> . term multiplyingOperator factor
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS
    (87) factor -> . factorM
    (88) factor -> . factor MODULE factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT

    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    ID              shift and go to state 104
    LPARENT         shift and go to state 61

    expression                     shift and go to state 103
    term                           shift and go to state 52
    addingOperator                 shift and go to state 53
    factor                         shift and go to state 54
    factorM                        shift and go to state 57
    index                          shift and go to state 58

state 62

    (15) statement -> FOR ID . TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> FOR ID . TO expression empty empty LBRACKET statementList RBRACKET

    TO              shift and go to state 105


state 63

    (17) statement -> EC inCaseLista . SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (62) inCaseLista -> inCaseLista . inCasea
    (63) inCasea -> . CUANDO ID relation expression ET LBRACKET statementList RBRACKET
    (64) inCasea -> . CUANDO ID relation TRUE ET LBRACKET statementList RBRACKET
    (65) inCasea -> . CUANDO ID relation FALSE ET LBRACKET statementList RBRACKET

    SN              shift and go to state 106
    CUANDO          shift and go to state 66

    inCasea                        shift and go to state 107

state 64

    (18) statement -> EC ID . inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (66) inCaseListb -> . inCaseb
    (67) inCaseListb -> . inCaseListb inCaseb
    (68) inCaseb -> . CUANDO relation expression ET LBRACKET statementList RBRACKET
    (69) inCaseb -> . CUANDO relation TRUE ET LBRACKET statementList RBRACKET
    (70) inCaseb -> . CUANDO relation FALSE ET LBRACKET statementList RBRACKET

    CUANDO          shift and go to state 110

    inCaseListb                    shift and go to state 108
    inCaseb                        shift and go to state 109

state 65

    (61) inCaseLista -> inCasea .

    SN              reduce using rule 61 (inCaseLista -> inCasea .)
    CUANDO          reduce using rule 61 (inCaseLista -> inCasea .)


state 66

    (63) inCasea -> CUANDO . ID relation expression ET LBRACKET statementList RBRACKET
    (64) inCasea -> CUANDO . ID relation TRUE ET LBRACKET statementList RBRACKET
    (65) inCasea -> CUANDO . ID relation FALSE ET LBRACKET statementList RBRACKET

    ID              shift and go to state 111


state 67

    (22) statement -> ABANICO LPARENT . A RPARENT SEMICOLOM
    (23) statement -> ABANICO LPARENT . B RPARENT SEMICOLOM

    A               shift and go to state 112
    B               shift and go to state 113


state 68

    (24) statement -> VERTICAL LPARENT . D RPARENT SEMICOLOM
    (25) statement -> VERTICAL LPARENT . I RPARENT SEMICOLOM

    D               shift and go to state 114
    I               shift and go to state 115


state 69

    (26) statement -> PERCUTOR LPARENT . A empty RPARENT SEMICOLOM
    (27) statement -> PERCUTOR LPARENT . B empty RPARENT SEMICOLOM
    (28) statement -> PERCUTOR LPARENT . A B RPARENT SEMICOLOM
    (29) statement -> PERCUTOR LPARENT . D empty RPARENT SEMICOLOM
    (30) statement -> PERCUTOR LPARENT . I empty RPARENT SEMICOLOM
    (31) statement -> PERCUTOR LPARENT . D I RPARENT SEMICOLOM

    A               shift and go to state 116
    B               shift and go to state 117
    D               shift and go to state 118
    I               shift and go to state 119


state 70

    (32) statement -> GOLPE LPARENT . RPARENT SEMICOLOM

    RPARENT         shift and go to state 120


state 71

    (33) statement -> VIBRATO LPARENT . NUMBER_I RPARENT SEMICOLOM

    NUMBER_I        shift and go to state 121


state 72

    (34) statement -> METRONOMO LPARENT . A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> METRONOMO LPARENT . D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> METRONOMO LPARENT . A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> METRONOMO LPARENT . D COMMA NUMBER_F RPARENT SEMICOLOM

    A               shift and go to state 122
    D               shift and go to state 123


state 73

    (38) statement -> PRINT LPARENT . printTextList RPARENT SEMICOLOM
    (39) printTextList -> . printText
    (40) printTextList -> . printTextList COMMA printText
    (41) printText -> . printvar
    (42) printText -> . STRING
    (43) printvar -> . ID
    (44) printvar -> . NUMBER_I
    (45) printvar -> . NUMBER_F
    (46) printvar -> . TRUE
    (47) printvar -> . FALSE

    STRING          shift and go to state 127
    ID              shift and go to state 128
    NUMBER_I        shift and go to state 129
    NUMBER_F        shift and go to state 130
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    printTextList                  shift and go to state 124
    printText                      shift and go to state 125
    printvar                       shift and go to state 126

state 74

    (5) functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 133
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 75

    (8) statement -> SET ID COMMA . TRUE SEMICOLOM
    (9) statement -> SET ID COMMA . FALSE SEMICOLOM
    (10) statement -> SET ID COMMA . expression SEMICOLOM
    (77) expression -> . term
    (78) expression -> . addingOperator term
    (79) expression -> . expression addingOperator term
    (82) term -> . factor
    (83) term -> . term multiplyingOperator factor
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS
    (87) factor -> . factorM
    (88) factor -> . factor MODULE factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT

    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    ID              shift and go to state 104
    LPARENT         shift and go to state 61

    expression                     shift and go to state 136
    term                           shift and go to state 52
    addingOperator                 shift and go to state 53
    factor                         shift and go to state 54
    factorM                        shift and go to state 57
    index                          shift and go to state 58

state 76

    (19) statement -> SET ID DOT . NEG SEMICOLOM
    (20) statement -> SET ID DOT . T SEMICOLOM
    (21) statement -> SET ID DOT . F SEMICOLOM

    NEG             shift and go to state 137
    T               shift and go to state 138
    F               shift and go to state 139


state 77

    (11) statement -> EXEC ID LPARENT . varList RPARENT SEMICOLOM
    (48) varList -> . var
    (49) varList -> . empty
    (50) varList -> . varList COMMA var
    (51) var -> . ID
    (52) var -> . NUMBER_I
    (53) var -> . NUMBER_F
    (54) var -> . TRUE
    (55) var -> . FALSE
    (98) empty -> .

    ID              shift and go to state 14
    NUMBER_I        shift and go to state 18
    NUMBER_F        shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    RPARENT         reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)

    varList                        shift and go to state 140
    var                            shift and go to state 16
    empty                          shift and go to state 17

state 78

    (12) statement -> TYPE LPARENT ID . RPARENT SEMICOLOM

    RPARENT         shift and go to state 141


state 79

    (13) statement -> IF conditionif LBRACKET . statementList RBRACKET empty
    (14) statement -> IF conditionif LBRACKET . statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 142
    statement                      shift and go to state 26

state 80

    (56) conditionif -> expression relation . expression
    (77) expression -> . term
    (78) expression -> . addingOperator term
    (79) expression -> . expression addingOperator term
    (82) term -> . factor
    (83) term -> . term multiplyingOperator factor
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS
    (87) factor -> . factorM
    (88) factor -> . factor MODULE factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT

    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    ID              shift and go to state 104
    LPARENT         shift and go to state 61

    expression                     shift and go to state 143
    term                           shift and go to state 52
    addingOperator                 shift and go to state 53
    factor                         shift and go to state 54
    factorM                        shift and go to state 57
    index                          shift and go to state 58

state 81

    (79) expression -> expression addingOperator . term
    (82) term -> . factor
    (83) term -> . term multiplyingOperator factor
    (87) factor -> . factorM
    (88) factor -> . factor MODULE factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    ID              shift and go to state 104
    LPARENT         shift and go to state 61
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    addingOperator                 shift and go to state 94
    term                           shift and go to state 144
    factor                         shift and go to state 54
    factorM                        shift and go to state 57
    index                          shift and go to state 58

state 82

    (71) relation -> COMPARE .

    PLUS            reduce using rule 71 (relation -> COMPARE .)
    MINUS           reduce using rule 71 (relation -> COMPARE .)
    NUMBER_I        reduce using rule 71 (relation -> COMPARE .)
    NUMBER_F        reduce using rule 71 (relation -> COMPARE .)
    ID              reduce using rule 71 (relation -> COMPARE .)
    LPARENT         reduce using rule 71 (relation -> COMPARE .)
    TRUE            reduce using rule 71 (relation -> COMPARE .)
    FALSE           reduce using rule 71 (relation -> COMPARE .)


state 83

    (72) relation -> NE .

    PLUS            reduce using rule 72 (relation -> NE .)
    MINUS           reduce using rule 72 (relation -> NE .)
    NUMBER_I        reduce using rule 72 (relation -> NE .)
    NUMBER_F        reduce using rule 72 (relation -> NE .)
    ID              reduce using rule 72 (relation -> NE .)
    LPARENT         reduce using rule 72 (relation -> NE .)
    TRUE            reduce using rule 72 (relation -> NE .)
    FALSE           reduce using rule 72 (relation -> NE .)


state 84

    (73) relation -> LT .

    PLUS            reduce using rule 73 (relation -> LT .)
    MINUS           reduce using rule 73 (relation -> LT .)
    NUMBER_I        reduce using rule 73 (relation -> LT .)
    NUMBER_F        reduce using rule 73 (relation -> LT .)
    ID              reduce using rule 73 (relation -> LT .)
    LPARENT         reduce using rule 73 (relation -> LT .)
    TRUE            reduce using rule 73 (relation -> LT .)
    FALSE           reduce using rule 73 (relation -> LT .)


state 85

    (74) relation -> GT .

    PLUS            reduce using rule 74 (relation -> GT .)
    MINUS           reduce using rule 74 (relation -> GT .)
    NUMBER_I        reduce using rule 74 (relation -> GT .)
    NUMBER_F        reduce using rule 74 (relation -> GT .)
    ID              reduce using rule 74 (relation -> GT .)
    LPARENT         reduce using rule 74 (relation -> GT .)
    TRUE            reduce using rule 74 (relation -> GT .)
    FALSE           reduce using rule 74 (relation -> GT .)


state 86

    (75) relation -> LTE .

    PLUS            reduce using rule 75 (relation -> LTE .)
    MINUS           reduce using rule 75 (relation -> LTE .)
    NUMBER_I        reduce using rule 75 (relation -> LTE .)
    NUMBER_F        reduce using rule 75 (relation -> LTE .)
    ID              reduce using rule 75 (relation -> LTE .)
    LPARENT         reduce using rule 75 (relation -> LTE .)
    TRUE            reduce using rule 75 (relation -> LTE .)
    FALSE           reduce using rule 75 (relation -> LTE .)


state 87

    (76) relation -> GTE .

    PLUS            reduce using rule 76 (relation -> GTE .)
    MINUS           reduce using rule 76 (relation -> GTE .)
    NUMBER_I        reduce using rule 76 (relation -> GTE .)
    NUMBER_F        reduce using rule 76 (relation -> GTE .)
    ID              reduce using rule 76 (relation -> GTE .)
    LPARENT         reduce using rule 76 (relation -> GTE .)
    TRUE            reduce using rule 76 (relation -> GTE .)
    FALSE           reduce using rule 76 (relation -> GTE .)


state 88

    (60) conditionif -> ID relation . var
    (51) var -> . ID
    (52) var -> . NUMBER_I
    (53) var -> . NUMBER_F
    (54) var -> . TRUE
    (55) var -> . FALSE

    ID              shift and go to state 14
    NUMBER_I        shift and go to state 18
    NUMBER_F        shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21

    var                            shift and go to state 145

state 89

    (96) index -> ID empty .

    EXPONENT        reduce using rule 96 (index -> ID empty .)
    MODULE          reduce using rule 96 (index -> ID empty .)
    TIMES           reduce using rule 96 (index -> ID empty .)
    DIVIDE          reduce using rule 96 (index -> ID empty .)
    DIVIDE_E        reduce using rule 96 (index -> ID empty .)
    COMPARE         reduce using rule 96 (index -> ID empty .)
    NE              reduce using rule 96 (index -> ID empty .)
    LT              reduce using rule 96 (index -> ID empty .)
    GT              reduce using rule 96 (index -> ID empty .)
    LTE             reduce using rule 96 (index -> ID empty .)
    GTE             reduce using rule 96 (index -> ID empty .)
    PLUS            reduce using rule 96 (index -> ID empty .)
    MINUS           reduce using rule 96 (index -> ID empty .)
    RPARENT         reduce using rule 96 (index -> ID empty .)
    SEMICOLOM       reduce using rule 96 (index -> ID empty .)
    LBRACKET        reduce using rule 96 (index -> ID empty .)
    STEP            reduce using rule 96 (index -> ID empty .)
    ET              reduce using rule 96 (index -> ID empty .)


state 90

    (83) term -> term multiplyingOperator . factor
    (87) factor -> . factorM
    (88) factor -> . factor MODULE factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    ID              shift and go to state 104
    LPARENT         shift and go to state 61
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    factor                         shift and go to state 146
    factorM                        shift and go to state 57
    index                          shift and go to state 58
    addingOperator                 shift and go to state 94

state 91

    (84) multiplyingOperator -> TIMES .

    NUMBER_I        reduce using rule 84 (multiplyingOperator -> TIMES .)
    NUMBER_F        reduce using rule 84 (multiplyingOperator -> TIMES .)
    ID              reduce using rule 84 (multiplyingOperator -> TIMES .)
    LPARENT         reduce using rule 84 (multiplyingOperator -> TIMES .)
    PLUS            reduce using rule 84 (multiplyingOperator -> TIMES .)
    MINUS           reduce using rule 84 (multiplyingOperator -> TIMES .)


state 92

    (85) multiplyingOperator -> DIVIDE .

    NUMBER_I        reduce using rule 85 (multiplyingOperator -> DIVIDE .)
    NUMBER_F        reduce using rule 85 (multiplyingOperator -> DIVIDE .)
    ID              reduce using rule 85 (multiplyingOperator -> DIVIDE .)
    LPARENT         reduce using rule 85 (multiplyingOperator -> DIVIDE .)
    PLUS            reduce using rule 85 (multiplyingOperator -> DIVIDE .)
    MINUS           reduce using rule 85 (multiplyingOperator -> DIVIDE .)


state 93

    (86) multiplyingOperator -> DIVIDE_E .

    NUMBER_I        reduce using rule 86 (multiplyingOperator -> DIVIDE_E .)
    NUMBER_F        reduce using rule 86 (multiplyingOperator -> DIVIDE_E .)
    ID              reduce using rule 86 (multiplyingOperator -> DIVIDE_E .)
    LPARENT         reduce using rule 86 (multiplyingOperator -> DIVIDE_E .)
    PLUS            reduce using rule 86 (multiplyingOperator -> DIVIDE_E .)
    MINUS           reduce using rule 86 (multiplyingOperator -> DIVIDE_E .)


state 94

    (93) index -> addingOperator . NUMBER_I
    (94) index -> addingOperator . NUMBER_F
    (95) index -> addingOperator . ID

    NUMBER_I        shift and go to state 147
    NUMBER_F        shift and go to state 148
    ID              shift and go to state 149


state 95

    (78) expression -> addingOperator term .
    (83) term -> term . multiplyingOperator factor
    (84) multiplyingOperator -> . TIMES
    (85) multiplyingOperator -> . DIVIDE
    (86) multiplyingOperator -> . DIVIDE_E

    COMPARE         reduce using rule 78 (expression -> addingOperator term .)
    NE              reduce using rule 78 (expression -> addingOperator term .)
    LT              reduce using rule 78 (expression -> addingOperator term .)
    GT              reduce using rule 78 (expression -> addingOperator term .)
    LTE             reduce using rule 78 (expression -> addingOperator term .)
    GTE             reduce using rule 78 (expression -> addingOperator term .)
    PLUS            reduce using rule 78 (expression -> addingOperator term .)
    MINUS           reduce using rule 78 (expression -> addingOperator term .)
    RPARENT         reduce using rule 78 (expression -> addingOperator term .)
    SEMICOLOM       reduce using rule 78 (expression -> addingOperator term .)
    LBRACKET        reduce using rule 78 (expression -> addingOperator term .)
    STEP            reduce using rule 78 (expression -> addingOperator term .)
    ET              reduce using rule 78 (expression -> addingOperator term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    DIVIDE_E        shift and go to state 93

    multiplyingOperator            shift and go to state 90

state 96

    (93) index -> addingOperator NUMBER_I .
    (91) index -> NUMBER_I . empty
    (98) empty -> .

  ! reduce/reduce conflict for EXPONENT resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for MODULE resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for TIMES resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for DIVIDE_E resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for COMPARE resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for NE resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for LT resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for GT resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for LTE resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for GTE resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for PLUS resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for MINUS resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for RPARENT resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for SEMICOLOM resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for STEP resolved using rule 93 (index -> addingOperator NUMBER_I .)
  ! reduce/reduce conflict for ET resolved using rule 93 (index -> addingOperator NUMBER_I .)
    EXPONENT        reduce using rule 93 (index -> addingOperator NUMBER_I .)
    MODULE          reduce using rule 93 (index -> addingOperator NUMBER_I .)
    TIMES           reduce using rule 93 (index -> addingOperator NUMBER_I .)
    DIVIDE          reduce using rule 93 (index -> addingOperator NUMBER_I .)
    DIVIDE_E        reduce using rule 93 (index -> addingOperator NUMBER_I .)
    COMPARE         reduce using rule 93 (index -> addingOperator NUMBER_I .)
    NE              reduce using rule 93 (index -> addingOperator NUMBER_I .)
    LT              reduce using rule 93 (index -> addingOperator NUMBER_I .)
    GT              reduce using rule 93 (index -> addingOperator NUMBER_I .)
    LTE             reduce using rule 93 (index -> addingOperator NUMBER_I .)
    GTE             reduce using rule 93 (index -> addingOperator NUMBER_I .)
    PLUS            reduce using rule 93 (index -> addingOperator NUMBER_I .)
    MINUS           reduce using rule 93 (index -> addingOperator NUMBER_I .)
    RPARENT         reduce using rule 93 (index -> addingOperator NUMBER_I .)
    SEMICOLOM       reduce using rule 93 (index -> addingOperator NUMBER_I .)
    LBRACKET        reduce using rule 93 (index -> addingOperator NUMBER_I .)
    STEP            reduce using rule 93 (index -> addingOperator NUMBER_I .)
    ET              reduce using rule 93 (index -> addingOperator NUMBER_I .)

  ! EXPONENT        [ reduce using rule 98 (empty -> .) ]
  ! MODULE          [ reduce using rule 98 (empty -> .) ]
  ! TIMES           [ reduce using rule 98 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 98 (empty -> .) ]
  ! DIVIDE_E        [ reduce using rule 98 (empty -> .) ]
  ! COMPARE         [ reduce using rule 98 (empty -> .) ]
  ! NE              [ reduce using rule 98 (empty -> .) ]
  ! LT              [ reduce using rule 98 (empty -> .) ]
  ! GT              [ reduce using rule 98 (empty -> .) ]
  ! LTE             [ reduce using rule 98 (empty -> .) ]
  ! GTE             [ reduce using rule 98 (empty -> .) ]
  ! PLUS            [ reduce using rule 98 (empty -> .) ]
  ! MINUS           [ reduce using rule 98 (empty -> .) ]
  ! RPARENT         [ reduce using rule 98 (empty -> .) ]
  ! SEMICOLOM       [ reduce using rule 98 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 98 (empty -> .) ]
  ! STEP            [ reduce using rule 98 (empty -> .) ]
  ! ET              [ reduce using rule 98 (empty -> .) ]

    empty                          shift and go to state 101

state 97

    (94) index -> addingOperator NUMBER_F .
    (92) index -> NUMBER_F . empty
    (98) empty -> .

  ! reduce/reduce conflict for EXPONENT resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for MODULE resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for TIMES resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for DIVIDE_E resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for COMPARE resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for NE resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for LT resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for GT resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for LTE resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for GTE resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for PLUS resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for MINUS resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for RPARENT resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for SEMICOLOM resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for STEP resolved using rule 94 (index -> addingOperator NUMBER_F .)
  ! reduce/reduce conflict for ET resolved using rule 94 (index -> addingOperator NUMBER_F .)
    EXPONENT        reduce using rule 94 (index -> addingOperator NUMBER_F .)
    MODULE          reduce using rule 94 (index -> addingOperator NUMBER_F .)
    TIMES           reduce using rule 94 (index -> addingOperator NUMBER_F .)
    DIVIDE          reduce using rule 94 (index -> addingOperator NUMBER_F .)
    DIVIDE_E        reduce using rule 94 (index -> addingOperator NUMBER_F .)
    COMPARE         reduce using rule 94 (index -> addingOperator NUMBER_F .)
    NE              reduce using rule 94 (index -> addingOperator NUMBER_F .)
    LT              reduce using rule 94 (index -> addingOperator NUMBER_F .)
    GT              reduce using rule 94 (index -> addingOperator NUMBER_F .)
    LTE             reduce using rule 94 (index -> addingOperator NUMBER_F .)
    GTE             reduce using rule 94 (index -> addingOperator NUMBER_F .)
    PLUS            reduce using rule 94 (index -> addingOperator NUMBER_F .)
    MINUS           reduce using rule 94 (index -> addingOperator NUMBER_F .)
    RPARENT         reduce using rule 94 (index -> addingOperator NUMBER_F .)
    SEMICOLOM       reduce using rule 94 (index -> addingOperator NUMBER_F .)
    LBRACKET        reduce using rule 94 (index -> addingOperator NUMBER_F .)
    STEP            reduce using rule 94 (index -> addingOperator NUMBER_F .)
    ET              reduce using rule 94 (index -> addingOperator NUMBER_F .)

  ! EXPONENT        [ reduce using rule 98 (empty -> .) ]
  ! MODULE          [ reduce using rule 98 (empty -> .) ]
  ! TIMES           [ reduce using rule 98 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 98 (empty -> .) ]
  ! DIVIDE_E        [ reduce using rule 98 (empty -> .) ]
  ! COMPARE         [ reduce using rule 98 (empty -> .) ]
  ! NE              [ reduce using rule 98 (empty -> .) ]
  ! LT              [ reduce using rule 98 (empty -> .) ]
  ! GT              [ reduce using rule 98 (empty -> .) ]
  ! LTE             [ reduce using rule 98 (empty -> .) ]
  ! GTE             [ reduce using rule 98 (empty -> .) ]
  ! PLUS            [ reduce using rule 98 (empty -> .) ]
  ! MINUS           [ reduce using rule 98 (empty -> .) ]
  ! RPARENT         [ reduce using rule 98 (empty -> .) ]
  ! SEMICOLOM       [ reduce using rule 98 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 98 (empty -> .) ]
  ! STEP            [ reduce using rule 98 (empty -> .) ]
  ! ET              [ reduce using rule 98 (empty -> .) ]

    empty                          shift and go to state 102

state 98

    (95) index -> addingOperator ID .
    (96) index -> ID . empty
    (98) empty -> .

  ! reduce/reduce conflict for EXPONENT resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for MODULE resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for DIVIDE_E resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for COMPARE resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for NE resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for LT resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for GT resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for LTE resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for GTE resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for RPARENT resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for SEMICOLOM resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for STEP resolved using rule 95 (index -> addingOperator ID .)
  ! reduce/reduce conflict for ET resolved using rule 95 (index -> addingOperator ID .)
    EXPONENT        reduce using rule 95 (index -> addingOperator ID .)
    MODULE          reduce using rule 95 (index -> addingOperator ID .)
    TIMES           reduce using rule 95 (index -> addingOperator ID .)
    DIVIDE          reduce using rule 95 (index -> addingOperator ID .)
    DIVIDE_E        reduce using rule 95 (index -> addingOperator ID .)
    COMPARE         reduce using rule 95 (index -> addingOperator ID .)
    NE              reduce using rule 95 (index -> addingOperator ID .)
    LT              reduce using rule 95 (index -> addingOperator ID .)
    GT              reduce using rule 95 (index -> addingOperator ID .)
    LTE             reduce using rule 95 (index -> addingOperator ID .)
    GTE             reduce using rule 95 (index -> addingOperator ID .)
    PLUS            reduce using rule 95 (index -> addingOperator ID .)
    MINUS           reduce using rule 95 (index -> addingOperator ID .)
    RPARENT         reduce using rule 95 (index -> addingOperator ID .)
    SEMICOLOM       reduce using rule 95 (index -> addingOperator ID .)
    LBRACKET        reduce using rule 95 (index -> addingOperator ID .)
    STEP            reduce using rule 95 (index -> addingOperator ID .)
    ET              reduce using rule 95 (index -> addingOperator ID .)

  ! EXPONENT        [ reduce using rule 98 (empty -> .) ]
  ! MODULE          [ reduce using rule 98 (empty -> .) ]
  ! TIMES           [ reduce using rule 98 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 98 (empty -> .) ]
  ! DIVIDE_E        [ reduce using rule 98 (empty -> .) ]
  ! COMPARE         [ reduce using rule 98 (empty -> .) ]
  ! NE              [ reduce using rule 98 (empty -> .) ]
  ! LT              [ reduce using rule 98 (empty -> .) ]
  ! GT              [ reduce using rule 98 (empty -> .) ]
  ! LTE             [ reduce using rule 98 (empty -> .) ]
  ! GTE             [ reduce using rule 98 (empty -> .) ]
  ! PLUS            [ reduce using rule 98 (empty -> .) ]
  ! MINUS           [ reduce using rule 98 (empty -> .) ]
  ! RPARENT         [ reduce using rule 98 (empty -> .) ]
  ! SEMICOLOM       [ reduce using rule 98 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 98 (empty -> .) ]
  ! STEP            [ reduce using rule 98 (empty -> .) ]
  ! ET              [ reduce using rule 98 (empty -> .) ]

    empty                          shift and go to state 89

state 99

    (88) factor -> factor MODULE . factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    ID              shift and go to state 104
    LPARENT         shift and go to state 61
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    factorM                        shift and go to state 150
    index                          shift and go to state 58
    addingOperator                 shift and go to state 94

state 100

    (90) factorM -> factorM EXPONENT . index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    ID              shift and go to state 104
    LPARENT         shift and go to state 61
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    index                          shift and go to state 151
    addingOperator                 shift and go to state 94

state 101

    (91) index -> NUMBER_I empty .

    EXPONENT        reduce using rule 91 (index -> NUMBER_I empty .)
    MODULE          reduce using rule 91 (index -> NUMBER_I empty .)
    TIMES           reduce using rule 91 (index -> NUMBER_I empty .)
    DIVIDE          reduce using rule 91 (index -> NUMBER_I empty .)
    DIVIDE_E        reduce using rule 91 (index -> NUMBER_I empty .)
    COMPARE         reduce using rule 91 (index -> NUMBER_I empty .)
    NE              reduce using rule 91 (index -> NUMBER_I empty .)
    LT              reduce using rule 91 (index -> NUMBER_I empty .)
    GT              reduce using rule 91 (index -> NUMBER_I empty .)
    LTE             reduce using rule 91 (index -> NUMBER_I empty .)
    GTE             reduce using rule 91 (index -> NUMBER_I empty .)
    PLUS            reduce using rule 91 (index -> NUMBER_I empty .)
    MINUS           reduce using rule 91 (index -> NUMBER_I empty .)
    RPARENT         reduce using rule 91 (index -> NUMBER_I empty .)
    SEMICOLOM       reduce using rule 91 (index -> NUMBER_I empty .)
    LBRACKET        reduce using rule 91 (index -> NUMBER_I empty .)
    STEP            reduce using rule 91 (index -> NUMBER_I empty .)
    ET              reduce using rule 91 (index -> NUMBER_I empty .)


state 102

    (92) index -> NUMBER_F empty .

    EXPONENT        reduce using rule 92 (index -> NUMBER_F empty .)
    MODULE          reduce using rule 92 (index -> NUMBER_F empty .)
    TIMES           reduce using rule 92 (index -> NUMBER_F empty .)
    DIVIDE          reduce using rule 92 (index -> NUMBER_F empty .)
    DIVIDE_E        reduce using rule 92 (index -> NUMBER_F empty .)
    COMPARE         reduce using rule 92 (index -> NUMBER_F empty .)
    NE              reduce using rule 92 (index -> NUMBER_F empty .)
    LT              reduce using rule 92 (index -> NUMBER_F empty .)
    GT              reduce using rule 92 (index -> NUMBER_F empty .)
    LTE             reduce using rule 92 (index -> NUMBER_F empty .)
    GTE             reduce using rule 92 (index -> NUMBER_F empty .)
    PLUS            reduce using rule 92 (index -> NUMBER_F empty .)
    MINUS           reduce using rule 92 (index -> NUMBER_F empty .)
    RPARENT         reduce using rule 92 (index -> NUMBER_F empty .)
    SEMICOLOM       reduce using rule 92 (index -> NUMBER_F empty .)
    LBRACKET        reduce using rule 92 (index -> NUMBER_F empty .)
    STEP            reduce using rule 92 (index -> NUMBER_F empty .)
    ET              reduce using rule 92 (index -> NUMBER_F empty .)


state 103

    (97) index -> LPARENT expression . RPARENT
    (79) expression -> expression . addingOperator term
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    RPARENT         shift and go to state 152
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    addingOperator                 shift and go to state 81

state 104

    (96) index -> ID . empty
    (98) empty -> .

    EXPONENT        reduce using rule 98 (empty -> .)
    MODULE          reduce using rule 98 (empty -> .)
    TIMES           reduce using rule 98 (empty -> .)
    DIVIDE          reduce using rule 98 (empty -> .)
    DIVIDE_E        reduce using rule 98 (empty -> .)
    RPARENT         reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    SEMICOLOM       reduce using rule 98 (empty -> .)
    LBRACKET        reduce using rule 98 (empty -> .)
    COMPARE         reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    STEP            reduce using rule 98 (empty -> .)
    ET              reduce using rule 98 (empty -> .)

    empty                          shift and go to state 89

state 105

    (15) statement -> FOR ID TO . expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> FOR ID TO . expression empty empty LBRACKET statementList RBRACKET
    (77) expression -> . term
    (78) expression -> . addingOperator term
    (79) expression -> . expression addingOperator term
    (82) term -> . factor
    (83) term -> . term multiplyingOperator factor
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS
    (87) factor -> . factorM
    (88) factor -> . factor MODULE factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT

    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    ID              shift and go to state 104
    LPARENT         shift and go to state 61

    expression                     shift and go to state 153
    term                           shift and go to state 52
    addingOperator                 shift and go to state 53
    factor                         shift and go to state 54
    factorM                        shift and go to state 57
    index                          shift and go to state 58

state 106

    (17) statement -> EC inCaseLista SN . LBRACKET statementList RBRACKET FEC SEMICOLOM

    LBRACKET        shift and go to state 154


state 107

    (62) inCaseLista -> inCaseLista inCasea .

    SN              reduce using rule 62 (inCaseLista -> inCaseLista inCasea .)
    CUANDO          reduce using rule 62 (inCaseLista -> inCaseLista inCasea .)


state 108

    (18) statement -> EC ID inCaseListb . SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (67) inCaseListb -> inCaseListb . inCaseb
    (68) inCaseb -> . CUANDO relation expression ET LBRACKET statementList RBRACKET
    (69) inCaseb -> . CUANDO relation TRUE ET LBRACKET statementList RBRACKET
    (70) inCaseb -> . CUANDO relation FALSE ET LBRACKET statementList RBRACKET

    SN              shift and go to state 155
    CUANDO          shift and go to state 110

    inCaseb                        shift and go to state 156

state 109

    (66) inCaseListb -> inCaseb .

    SN              reduce using rule 66 (inCaseListb -> inCaseb .)
    CUANDO          reduce using rule 66 (inCaseListb -> inCaseb .)


state 110

    (68) inCaseb -> CUANDO . relation expression ET LBRACKET statementList RBRACKET
    (69) inCaseb -> CUANDO . relation TRUE ET LBRACKET statementList RBRACKET
    (70) inCaseb -> CUANDO . relation FALSE ET LBRACKET statementList RBRACKET
    (71) relation -> . COMPARE
    (72) relation -> . NE
    (73) relation -> . LT
    (74) relation -> . GT
    (75) relation -> . LTE
    (76) relation -> . GTE

    COMPARE         shift and go to state 82
    NE              shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87

    relation                       shift and go to state 157

state 111

    (63) inCasea -> CUANDO ID . relation expression ET LBRACKET statementList RBRACKET
    (64) inCasea -> CUANDO ID . relation TRUE ET LBRACKET statementList RBRACKET
    (65) inCasea -> CUANDO ID . relation FALSE ET LBRACKET statementList RBRACKET
    (71) relation -> . COMPARE
    (72) relation -> . NE
    (73) relation -> . LT
    (74) relation -> . GT
    (75) relation -> . LTE
    (76) relation -> . GTE

    COMPARE         shift and go to state 82
    NE              shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87

    relation                       shift and go to state 158

state 112

    (22) statement -> ABANICO LPARENT A . RPARENT SEMICOLOM

    RPARENT         shift and go to state 159


state 113

    (23) statement -> ABANICO LPARENT B . RPARENT SEMICOLOM

    RPARENT         shift and go to state 160


state 114

    (24) statement -> VERTICAL LPARENT D . RPARENT SEMICOLOM

    RPARENT         shift and go to state 161


state 115

    (25) statement -> VERTICAL LPARENT I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 162


state 116

    (26) statement -> PERCUTOR LPARENT A . empty RPARENT SEMICOLOM
    (28) statement -> PERCUTOR LPARENT A . B RPARENT SEMICOLOM
    (98) empty -> .

    B               shift and go to state 164
    RPARENT         reduce using rule 98 (empty -> .)

    empty                          shift and go to state 163

state 117

    (27) statement -> PERCUTOR LPARENT B . empty RPARENT SEMICOLOM
    (98) empty -> .

    RPARENT         reduce using rule 98 (empty -> .)

    empty                          shift and go to state 165

state 118

    (29) statement -> PERCUTOR LPARENT D . empty RPARENT SEMICOLOM
    (31) statement -> PERCUTOR LPARENT D . I RPARENT SEMICOLOM
    (98) empty -> .

    I               shift and go to state 167
    RPARENT         reduce using rule 98 (empty -> .)

    empty                          shift and go to state 166

state 119

    (30) statement -> PERCUTOR LPARENT I . empty RPARENT SEMICOLOM
    (98) empty -> .

    RPARENT         reduce using rule 98 (empty -> .)

    empty                          shift and go to state 168

state 120

    (32) statement -> GOLPE LPARENT RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 169


state 121

    (33) statement -> VIBRATO LPARENT NUMBER_I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 170


state 122

    (34) statement -> METRONOMO LPARENT A . COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> METRONOMO LPARENT A . COMMA NUMBER_F RPARENT SEMICOLOM

    COMMA           shift and go to state 171


state 123

    (35) statement -> METRONOMO LPARENT D . COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> METRONOMO LPARENT D . COMMA NUMBER_F RPARENT SEMICOLOM

    COMMA           shift and go to state 172


state 124

    (38) statement -> PRINT LPARENT printTextList . RPARENT SEMICOLOM
    (40) printTextList -> printTextList . COMMA printText

    RPARENT         shift and go to state 173
    COMMA           shift and go to state 174


state 125

    (39) printTextList -> printText .

    RPARENT         reduce using rule 39 (printTextList -> printText .)
    COMMA           reduce using rule 39 (printTextList -> printText .)


state 126

    (41) printText -> printvar .

    RPARENT         reduce using rule 41 (printText -> printvar .)
    COMMA           reduce using rule 41 (printText -> printvar .)


state 127

    (42) printText -> STRING .

    RPARENT         reduce using rule 42 (printText -> STRING .)
    COMMA           reduce using rule 42 (printText -> STRING .)


state 128

    (43) printvar -> ID .

    RPARENT         reduce using rule 43 (printvar -> ID .)
    COMMA           reduce using rule 43 (printvar -> ID .)


state 129

    (44) printvar -> NUMBER_I .

    RPARENT         reduce using rule 44 (printvar -> NUMBER_I .)
    COMMA           reduce using rule 44 (printvar -> NUMBER_I .)


state 130

    (45) printvar -> NUMBER_F .

    RPARENT         reduce using rule 45 (printvar -> NUMBER_F .)
    COMMA           reduce using rule 45 (printvar -> NUMBER_F .)


state 131

    (46) printvar -> TRUE .

    RPARENT         reduce using rule 46 (printvar -> TRUE .)
    COMMA           reduce using rule 46 (printvar -> TRUE .)


state 132

    (47) printvar -> FALSE .

    RPARENT         reduce using rule 47 (printvar -> FALSE .)
    COMMA           reduce using rule 47 (printvar -> FALSE .)


state 133

    (5) functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET .

    DEF             reduce using rule 5 (functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET .)
    $end            reduce using rule 5 (functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET .)


state 134

    (8) statement -> SET ID COMMA TRUE . SEMICOLOM

    SEMICOLOM       shift and go to state 175


state 135

    (9) statement -> SET ID COMMA FALSE . SEMICOLOM

    SEMICOLOM       shift and go to state 176


state 136

    (10) statement -> SET ID COMMA expression . SEMICOLOM
    (79) expression -> expression . addingOperator term
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    SEMICOLOM       shift and go to state 177
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    addingOperator                 shift and go to state 81

state 137

    (19) statement -> SET ID DOT NEG . SEMICOLOM

    SEMICOLOM       shift and go to state 178


state 138

    (20) statement -> SET ID DOT T . SEMICOLOM

    SEMICOLOM       shift and go to state 179


state 139

    (21) statement -> SET ID DOT F . SEMICOLOM

    SEMICOLOM       shift and go to state 180


state 140

    (11) statement -> EXEC ID LPARENT varList . RPARENT SEMICOLOM
    (50) varList -> varList . COMMA var

    RPARENT         shift and go to state 181
    COMMA           shift and go to state 24


state 141

    (12) statement -> TYPE LPARENT ID RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 182


state 142

    (13) statement -> IF conditionif LBRACKET statementList . RBRACKET empty
    (14) statement -> IF conditionif LBRACKET statementList . RBRACKET ELSE LBRACKET statementList RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 183
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 143

    (56) conditionif -> expression relation expression .
    (79) expression -> expression . addingOperator term
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    LBRACKET        reduce using rule 56 (conditionif -> expression relation expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    addingOperator                 shift and go to state 81

state 144

    (79) expression -> expression addingOperator term .
    (83) term -> term . multiplyingOperator factor
    (84) multiplyingOperator -> . TIMES
    (85) multiplyingOperator -> . DIVIDE
    (86) multiplyingOperator -> . DIVIDE_E

    COMPARE         reduce using rule 79 (expression -> expression addingOperator term .)
    NE              reduce using rule 79 (expression -> expression addingOperator term .)
    LT              reduce using rule 79 (expression -> expression addingOperator term .)
    GT              reduce using rule 79 (expression -> expression addingOperator term .)
    LTE             reduce using rule 79 (expression -> expression addingOperator term .)
    GTE             reduce using rule 79 (expression -> expression addingOperator term .)
    PLUS            reduce using rule 79 (expression -> expression addingOperator term .)
    MINUS           reduce using rule 79 (expression -> expression addingOperator term .)
    RPARENT         reduce using rule 79 (expression -> expression addingOperator term .)
    SEMICOLOM       reduce using rule 79 (expression -> expression addingOperator term .)
    LBRACKET        reduce using rule 79 (expression -> expression addingOperator term .)
    STEP            reduce using rule 79 (expression -> expression addingOperator term .)
    ET              reduce using rule 79 (expression -> expression addingOperator term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    DIVIDE_E        shift and go to state 93

    multiplyingOperator            shift and go to state 90

state 145

    (60) conditionif -> ID relation var .

    LBRACKET        reduce using rule 60 (conditionif -> ID relation var .)


state 146

    (83) term -> term multiplyingOperator factor .
    (88) factor -> factor . MODULE factorM

    TIMES           reduce using rule 83 (term -> term multiplyingOperator factor .)
    DIVIDE          reduce using rule 83 (term -> term multiplyingOperator factor .)
    DIVIDE_E        reduce using rule 83 (term -> term multiplyingOperator factor .)
    COMPARE         reduce using rule 83 (term -> term multiplyingOperator factor .)
    NE              reduce using rule 83 (term -> term multiplyingOperator factor .)
    LT              reduce using rule 83 (term -> term multiplyingOperator factor .)
    GT              reduce using rule 83 (term -> term multiplyingOperator factor .)
    LTE             reduce using rule 83 (term -> term multiplyingOperator factor .)
    GTE             reduce using rule 83 (term -> term multiplyingOperator factor .)
    PLUS            reduce using rule 83 (term -> term multiplyingOperator factor .)
    MINUS           reduce using rule 83 (term -> term multiplyingOperator factor .)
    RPARENT         reduce using rule 83 (term -> term multiplyingOperator factor .)
    SEMICOLOM       reduce using rule 83 (term -> term multiplyingOperator factor .)
    LBRACKET        reduce using rule 83 (term -> term multiplyingOperator factor .)
    STEP            reduce using rule 83 (term -> term multiplyingOperator factor .)
    ET              reduce using rule 83 (term -> term multiplyingOperator factor .)
    MODULE          shift and go to state 99


state 147

    (93) index -> addingOperator NUMBER_I .

    EXPONENT        reduce using rule 93 (index -> addingOperator NUMBER_I .)
    MODULE          reduce using rule 93 (index -> addingOperator NUMBER_I .)
    TIMES           reduce using rule 93 (index -> addingOperator NUMBER_I .)
    DIVIDE          reduce using rule 93 (index -> addingOperator NUMBER_I .)
    DIVIDE_E        reduce using rule 93 (index -> addingOperator NUMBER_I .)
    COMPARE         reduce using rule 93 (index -> addingOperator NUMBER_I .)
    NE              reduce using rule 93 (index -> addingOperator NUMBER_I .)
    LT              reduce using rule 93 (index -> addingOperator NUMBER_I .)
    GT              reduce using rule 93 (index -> addingOperator NUMBER_I .)
    LTE             reduce using rule 93 (index -> addingOperator NUMBER_I .)
    GTE             reduce using rule 93 (index -> addingOperator NUMBER_I .)
    PLUS            reduce using rule 93 (index -> addingOperator NUMBER_I .)
    MINUS           reduce using rule 93 (index -> addingOperator NUMBER_I .)
    RPARENT         reduce using rule 93 (index -> addingOperator NUMBER_I .)
    SEMICOLOM       reduce using rule 93 (index -> addingOperator NUMBER_I .)
    LBRACKET        reduce using rule 93 (index -> addingOperator NUMBER_I .)
    STEP            reduce using rule 93 (index -> addingOperator NUMBER_I .)
    ET              reduce using rule 93 (index -> addingOperator NUMBER_I .)


state 148

    (94) index -> addingOperator NUMBER_F .

    EXPONENT        reduce using rule 94 (index -> addingOperator NUMBER_F .)
    MODULE          reduce using rule 94 (index -> addingOperator NUMBER_F .)
    TIMES           reduce using rule 94 (index -> addingOperator NUMBER_F .)
    DIVIDE          reduce using rule 94 (index -> addingOperator NUMBER_F .)
    DIVIDE_E        reduce using rule 94 (index -> addingOperator NUMBER_F .)
    COMPARE         reduce using rule 94 (index -> addingOperator NUMBER_F .)
    NE              reduce using rule 94 (index -> addingOperator NUMBER_F .)
    LT              reduce using rule 94 (index -> addingOperator NUMBER_F .)
    GT              reduce using rule 94 (index -> addingOperator NUMBER_F .)
    LTE             reduce using rule 94 (index -> addingOperator NUMBER_F .)
    GTE             reduce using rule 94 (index -> addingOperator NUMBER_F .)
    PLUS            reduce using rule 94 (index -> addingOperator NUMBER_F .)
    MINUS           reduce using rule 94 (index -> addingOperator NUMBER_F .)
    RPARENT         reduce using rule 94 (index -> addingOperator NUMBER_F .)
    SEMICOLOM       reduce using rule 94 (index -> addingOperator NUMBER_F .)
    LBRACKET        reduce using rule 94 (index -> addingOperator NUMBER_F .)
    STEP            reduce using rule 94 (index -> addingOperator NUMBER_F .)
    ET              reduce using rule 94 (index -> addingOperator NUMBER_F .)


state 149

    (95) index -> addingOperator ID .

    EXPONENT        reduce using rule 95 (index -> addingOperator ID .)
    MODULE          reduce using rule 95 (index -> addingOperator ID .)
    TIMES           reduce using rule 95 (index -> addingOperator ID .)
    DIVIDE          reduce using rule 95 (index -> addingOperator ID .)
    DIVIDE_E        reduce using rule 95 (index -> addingOperator ID .)
    COMPARE         reduce using rule 95 (index -> addingOperator ID .)
    NE              reduce using rule 95 (index -> addingOperator ID .)
    LT              reduce using rule 95 (index -> addingOperator ID .)
    GT              reduce using rule 95 (index -> addingOperator ID .)
    LTE             reduce using rule 95 (index -> addingOperator ID .)
    GTE             reduce using rule 95 (index -> addingOperator ID .)
    PLUS            reduce using rule 95 (index -> addingOperator ID .)
    MINUS           reduce using rule 95 (index -> addingOperator ID .)
    RPARENT         reduce using rule 95 (index -> addingOperator ID .)
    SEMICOLOM       reduce using rule 95 (index -> addingOperator ID .)
    LBRACKET        reduce using rule 95 (index -> addingOperator ID .)
    STEP            reduce using rule 95 (index -> addingOperator ID .)
    ET              reduce using rule 95 (index -> addingOperator ID .)


state 150

    (88) factor -> factor MODULE factorM .
    (90) factorM -> factorM . EXPONENT index

    MODULE          reduce using rule 88 (factor -> factor MODULE factorM .)
    TIMES           reduce using rule 88 (factor -> factor MODULE factorM .)
    DIVIDE          reduce using rule 88 (factor -> factor MODULE factorM .)
    DIVIDE_E        reduce using rule 88 (factor -> factor MODULE factorM .)
    COMPARE         reduce using rule 88 (factor -> factor MODULE factorM .)
    NE              reduce using rule 88 (factor -> factor MODULE factorM .)
    LT              reduce using rule 88 (factor -> factor MODULE factorM .)
    GT              reduce using rule 88 (factor -> factor MODULE factorM .)
    LTE             reduce using rule 88 (factor -> factor MODULE factorM .)
    GTE             reduce using rule 88 (factor -> factor MODULE factorM .)
    PLUS            reduce using rule 88 (factor -> factor MODULE factorM .)
    MINUS           reduce using rule 88 (factor -> factor MODULE factorM .)
    RPARENT         reduce using rule 88 (factor -> factor MODULE factorM .)
    SEMICOLOM       reduce using rule 88 (factor -> factor MODULE factorM .)
    LBRACKET        reduce using rule 88 (factor -> factor MODULE factorM .)
    STEP            reduce using rule 88 (factor -> factor MODULE factorM .)
    ET              reduce using rule 88 (factor -> factor MODULE factorM .)
    EXPONENT        shift and go to state 100


state 151

    (90) factorM -> factorM EXPONENT index .

    EXPONENT        reduce using rule 90 (factorM -> factorM EXPONENT index .)
    MODULE          reduce using rule 90 (factorM -> factorM EXPONENT index .)
    TIMES           reduce using rule 90 (factorM -> factorM EXPONENT index .)
    DIVIDE          reduce using rule 90 (factorM -> factorM EXPONENT index .)
    DIVIDE_E        reduce using rule 90 (factorM -> factorM EXPONENT index .)
    COMPARE         reduce using rule 90 (factorM -> factorM EXPONENT index .)
    NE              reduce using rule 90 (factorM -> factorM EXPONENT index .)
    LT              reduce using rule 90 (factorM -> factorM EXPONENT index .)
    GT              reduce using rule 90 (factorM -> factorM EXPONENT index .)
    LTE             reduce using rule 90 (factorM -> factorM EXPONENT index .)
    GTE             reduce using rule 90 (factorM -> factorM EXPONENT index .)
    PLUS            reduce using rule 90 (factorM -> factorM EXPONENT index .)
    MINUS           reduce using rule 90 (factorM -> factorM EXPONENT index .)
    RPARENT         reduce using rule 90 (factorM -> factorM EXPONENT index .)
    SEMICOLOM       reduce using rule 90 (factorM -> factorM EXPONENT index .)
    LBRACKET        reduce using rule 90 (factorM -> factorM EXPONENT index .)
    STEP            reduce using rule 90 (factorM -> factorM EXPONENT index .)
    ET              reduce using rule 90 (factorM -> factorM EXPONENT index .)


state 152

    (97) index -> LPARENT expression RPARENT .

    EXPONENT        reduce using rule 97 (index -> LPARENT expression RPARENT .)
    MODULE          reduce using rule 97 (index -> LPARENT expression RPARENT .)
    TIMES           reduce using rule 97 (index -> LPARENT expression RPARENT .)
    DIVIDE          reduce using rule 97 (index -> LPARENT expression RPARENT .)
    DIVIDE_E        reduce using rule 97 (index -> LPARENT expression RPARENT .)
    COMPARE         reduce using rule 97 (index -> LPARENT expression RPARENT .)
    NE              reduce using rule 97 (index -> LPARENT expression RPARENT .)
    LT              reduce using rule 97 (index -> LPARENT expression RPARENT .)
    GT              reduce using rule 97 (index -> LPARENT expression RPARENT .)
    LTE             reduce using rule 97 (index -> LPARENT expression RPARENT .)
    GTE             reduce using rule 97 (index -> LPARENT expression RPARENT .)
    PLUS            reduce using rule 97 (index -> LPARENT expression RPARENT .)
    MINUS           reduce using rule 97 (index -> LPARENT expression RPARENT .)
    RPARENT         reduce using rule 97 (index -> LPARENT expression RPARENT .)
    SEMICOLOM       reduce using rule 97 (index -> LPARENT expression RPARENT .)
    LBRACKET        reduce using rule 97 (index -> LPARENT expression RPARENT .)
    STEP            reduce using rule 97 (index -> LPARENT expression RPARENT .)
    ET              reduce using rule 97 (index -> LPARENT expression RPARENT .)


state 153

    (15) statement -> FOR ID TO expression . STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> FOR ID TO expression . empty empty LBRACKET statementList RBRACKET
    (79) expression -> expression . addingOperator term
    (98) empty -> .
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    STEP            shift and go to state 184
    LBRACKET        reduce using rule 98 (empty -> .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    empty                          shift and go to state 185
    addingOperator                 shift and go to state 81

state 154

    (17) statement -> EC inCaseLista SN LBRACKET . statementList RBRACKET FEC SEMICOLOM
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 186
    statement                      shift and go to state 26

state 155

    (18) statement -> EC ID inCaseListb SN . LBRACKET statementList RBRACKET FEC SEMICOLOM

    LBRACKET        shift and go to state 187


state 156

    (67) inCaseListb -> inCaseListb inCaseb .

    SN              reduce using rule 67 (inCaseListb -> inCaseListb inCaseb .)
    CUANDO          reduce using rule 67 (inCaseListb -> inCaseListb inCaseb .)


state 157

    (68) inCaseb -> CUANDO relation . expression ET LBRACKET statementList RBRACKET
    (69) inCaseb -> CUANDO relation . TRUE ET LBRACKET statementList RBRACKET
    (70) inCaseb -> CUANDO relation . FALSE ET LBRACKET statementList RBRACKET
    (77) expression -> . term
    (78) expression -> . addingOperator term
    (79) expression -> . expression addingOperator term
    (82) term -> . factor
    (83) term -> . term multiplyingOperator factor
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS
    (87) factor -> . factorM
    (88) factor -> . factor MODULE factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT

    TRUE            shift and go to state 189
    FALSE           shift and go to state 190
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    ID              shift and go to state 104
    LPARENT         shift and go to state 61

    expression                     shift and go to state 188
    term                           shift and go to state 52
    addingOperator                 shift and go to state 53
    factor                         shift and go to state 54
    factorM                        shift and go to state 57
    index                          shift and go to state 58

state 158

    (63) inCasea -> CUANDO ID relation . expression ET LBRACKET statementList RBRACKET
    (64) inCasea -> CUANDO ID relation . TRUE ET LBRACKET statementList RBRACKET
    (65) inCasea -> CUANDO ID relation . FALSE ET LBRACKET statementList RBRACKET
    (77) expression -> . term
    (78) expression -> . addingOperator term
    (79) expression -> . expression addingOperator term
    (82) term -> . factor
    (83) term -> . term multiplyingOperator factor
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS
    (87) factor -> . factorM
    (88) factor -> . factor MODULE factorM
    (89) factorM -> . index
    (90) factorM -> . factorM EXPONENT index
    (91) index -> . NUMBER_I empty
    (92) index -> . NUMBER_F empty
    (93) index -> . addingOperator NUMBER_I
    (94) index -> . addingOperator NUMBER_F
    (95) index -> . addingOperator ID
    (96) index -> . ID empty
    (97) index -> . LPARENT expression RPARENT

    TRUE            shift and go to state 192
    FALSE           shift and go to state 193
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    NUMBER_I        shift and go to state 59
    NUMBER_F        shift and go to state 60
    ID              shift and go to state 104
    LPARENT         shift and go to state 61

    expression                     shift and go to state 191
    term                           shift and go to state 52
    addingOperator                 shift and go to state 53
    factor                         shift and go to state 54
    factorM                        shift and go to state 57
    index                          shift and go to state 58

state 159

    (22) statement -> ABANICO LPARENT A RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 194


state 160

    (23) statement -> ABANICO LPARENT B RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 195


state 161

    (24) statement -> VERTICAL LPARENT D RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 196


state 162

    (25) statement -> VERTICAL LPARENT I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 197


state 163

    (26) statement -> PERCUTOR LPARENT A empty . RPARENT SEMICOLOM

    RPARENT         shift and go to state 198


state 164

    (28) statement -> PERCUTOR LPARENT A B . RPARENT SEMICOLOM

    RPARENT         shift and go to state 199


state 165

    (27) statement -> PERCUTOR LPARENT B empty . RPARENT SEMICOLOM

    RPARENT         shift and go to state 200


state 166

    (29) statement -> PERCUTOR LPARENT D empty . RPARENT SEMICOLOM

    RPARENT         shift and go to state 201


state 167

    (31) statement -> PERCUTOR LPARENT D I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 202


state 168

    (30) statement -> PERCUTOR LPARENT I empty . RPARENT SEMICOLOM

    RPARENT         shift and go to state 203


state 169

    (32) statement -> GOLPE LPARENT RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    SET             reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    EXEC            reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    TYPE            reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    IF              reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    FOR             reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    EC              reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    PRINT           reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)


state 170

    (33) statement -> VIBRATO LPARENT NUMBER_I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 204


state 171

    (34) statement -> METRONOMO LPARENT A COMMA . NUMBER_I RPARENT SEMICOLOM
    (36) statement -> METRONOMO LPARENT A COMMA . NUMBER_F RPARENT SEMICOLOM

    NUMBER_I        shift and go to state 205
    NUMBER_F        shift and go to state 206


state 172

    (35) statement -> METRONOMO LPARENT D COMMA . NUMBER_I RPARENT SEMICOLOM
    (37) statement -> METRONOMO LPARENT D COMMA . NUMBER_F RPARENT SEMICOLOM

    NUMBER_I        shift and go to state 207
    NUMBER_F        shift and go to state 208


state 173

    (38) statement -> PRINT LPARENT printTextList RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 209


state 174

    (40) printTextList -> printTextList COMMA . printText
    (41) printText -> . printvar
    (42) printText -> . STRING
    (43) printvar -> . ID
    (44) printvar -> . NUMBER_I
    (45) printvar -> . NUMBER_F
    (46) printvar -> . TRUE
    (47) printvar -> . FALSE

    STRING          shift and go to state 127
    ID              shift and go to state 128
    NUMBER_I        shift and go to state 129
    NUMBER_F        shift and go to state 130
    TRUE            shift and go to state 131
    FALSE           shift and go to state 132

    printText                      shift and go to state 210
    printvar                       shift and go to state 126

state 175

    (8) statement -> SET ID COMMA TRUE SEMICOLOM .

    RBRACKET        reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    SET             reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    EXEC            reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    TYPE            reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    IF              reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    FOR             reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    EC              reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    ABANICO         reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    VERTICAL        reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    PERCUTOR        reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    GOLPE           reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    VIBRATO         reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    METRONOMO       reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    PRINT           reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)


state 176

    (9) statement -> SET ID COMMA FALSE SEMICOLOM .

    RBRACKET        reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    SET             reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    EXEC            reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    TYPE            reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    IF              reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    FOR             reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    EC              reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    ABANICO         reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    VERTICAL        reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    PERCUTOR        reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    GOLPE           reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    VIBRATO         reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    METRONOMO       reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    PRINT           reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)


state 177

    (10) statement -> SET ID COMMA expression SEMICOLOM .

    RBRACKET        reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    SET             reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    EXEC            reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    TYPE            reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    IF              reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    FOR             reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    EC              reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    ABANICO         reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    VERTICAL        reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    PERCUTOR        reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    GOLPE           reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    VIBRATO         reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    METRONOMO       reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    PRINT           reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)


state 178

    (19) statement -> SET ID DOT NEG SEMICOLOM .

    RBRACKET        reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    SET             reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    EXEC            reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    TYPE            reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    IF              reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    FOR             reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    EC              reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    ABANICO         reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    VERTICAL        reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    PERCUTOR        reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    GOLPE           reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    VIBRATO         reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    METRONOMO       reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    PRINT           reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)


state 179

    (20) statement -> SET ID DOT T SEMICOLOM .

    RBRACKET        reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    SET             reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    EXEC            reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    TYPE            reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    IF              reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    FOR             reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    EC              reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    ABANICO         reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    VERTICAL        reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    PERCUTOR        reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    GOLPE           reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    VIBRATO         reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    METRONOMO       reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    PRINT           reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)


state 180

    (21) statement -> SET ID DOT F SEMICOLOM .

    RBRACKET        reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    SET             reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    EXEC            reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    TYPE            reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    IF              reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    FOR             reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    EC              reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    ABANICO         reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    VERTICAL        reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    PERCUTOR        reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    GOLPE           reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    VIBRATO         reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    METRONOMO       reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    PRINT           reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)


state 181

    (11) statement -> EXEC ID LPARENT varList RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 211


state 182

    (12) statement -> TYPE LPARENT ID RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    SET             reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    EXEC            reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    TYPE            reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    IF              reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    FOR             reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    EC              reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    PRINT           reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)


state 183

    (13) statement -> IF conditionif LBRACKET statementList RBRACKET . empty
    (14) statement -> IF conditionif LBRACKET statementList RBRACKET . ELSE LBRACKET statementList RBRACKET
    (98) empty -> .

    ELSE            shift and go to state 213
    RBRACKET        reduce using rule 98 (empty -> .)
    SET             reduce using rule 98 (empty -> .)
    EXEC            reduce using rule 98 (empty -> .)
    TYPE            reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    EC              reduce using rule 98 (empty -> .)
    ABANICO         reduce using rule 98 (empty -> .)
    VERTICAL        reduce using rule 98 (empty -> .)
    PERCUTOR        reduce using rule 98 (empty -> .)
    GOLPE           reduce using rule 98 (empty -> .)
    VIBRATO         reduce using rule 98 (empty -> .)
    METRONOMO       reduce using rule 98 (empty -> .)
    PRINT           reduce using rule 98 (empty -> .)

    empty                          shift and go to state 212

state 184

    (15) statement -> FOR ID TO expression STEP . NUMBER_I LBRACKET statementList RBRACKET

    NUMBER_I        shift and go to state 214


state 185

    (16) statement -> FOR ID TO expression empty . empty LBRACKET statementList RBRACKET
    (98) empty -> .

    LBRACKET        reduce using rule 98 (empty -> .)

    empty                          shift and go to state 215

state 186

    (17) statement -> EC inCaseLista SN LBRACKET statementList . RBRACKET FEC SEMICOLOM
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 216
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 187

    (18) statement -> EC ID inCaseListb SN LBRACKET . statementList RBRACKET FEC SEMICOLOM
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 217
    statement                      shift and go to state 26

state 188

    (68) inCaseb -> CUANDO relation expression . ET LBRACKET statementList RBRACKET
    (79) expression -> expression . addingOperator term
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    ET              shift and go to state 218
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    addingOperator                 shift and go to state 81

state 189

    (69) inCaseb -> CUANDO relation TRUE . ET LBRACKET statementList RBRACKET

    ET              shift and go to state 219


state 190

    (70) inCaseb -> CUANDO relation FALSE . ET LBRACKET statementList RBRACKET

    ET              shift and go to state 220


state 191

    (63) inCasea -> CUANDO ID relation expression . ET LBRACKET statementList RBRACKET
    (79) expression -> expression . addingOperator term
    (80) addingOperator -> . PLUS
    (81) addingOperator -> . MINUS

    ET              shift and go to state 221
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56

    addingOperator                 shift and go to state 81

state 192

    (64) inCasea -> CUANDO ID relation TRUE . ET LBRACKET statementList RBRACKET

    ET              shift and go to state 222


state 193

    (65) inCasea -> CUANDO ID relation FALSE . ET LBRACKET statementList RBRACKET

    ET              shift and go to state 223


state 194

    (22) statement -> ABANICO LPARENT A RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    SET             reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    EXEC            reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    TYPE            reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    IF              reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    FOR             reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    EC              reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    PRINT           reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)


state 195

    (23) statement -> ABANICO LPARENT B RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    SET             reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    EXEC            reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    TYPE            reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    IF              reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    FOR             reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    EC              reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    PRINT           reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)


state 196

    (24) statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    SET             reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    EXEC            reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    TYPE            reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    IF              reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    FOR             reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    EC              reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    PRINT           reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)


state 197

    (25) statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    SET             reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    IF              reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    FOR             reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    EC              reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)


state 198

    (26) statement -> PERCUTOR LPARENT A empty RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 224


state 199

    (28) statement -> PERCUTOR LPARENT A B RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 225


state 200

    (27) statement -> PERCUTOR LPARENT B empty RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 226


state 201

    (29) statement -> PERCUTOR LPARENT D empty RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 227


state 202

    (31) statement -> PERCUTOR LPARENT D I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 228


state 203

    (30) statement -> PERCUTOR LPARENT I empty RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 229


state 204

    (33) statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    SET             reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    IF              reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    FOR             reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    EC              reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)


state 205

    (34) statement -> METRONOMO LPARENT A COMMA NUMBER_I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 230


state 206

    (36) statement -> METRONOMO LPARENT A COMMA NUMBER_F . RPARENT SEMICOLOM

    RPARENT         shift and go to state 231


state 207

    (35) statement -> METRONOMO LPARENT D COMMA NUMBER_I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 232


state 208

    (37) statement -> METRONOMO LPARENT D COMMA NUMBER_F . RPARENT SEMICOLOM

    RPARENT         shift and go to state 233


state 209

    (38) statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    SET             reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    EXEC            reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    TYPE            reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    IF              reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    FOR             reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    EC              reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    PRINT           reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)


state 210

    (40) printTextList -> printTextList COMMA printText .

    RPARENT         reduce using rule 40 (printTextList -> printTextList COMMA printText .)
    COMMA           reduce using rule 40 (printTextList -> printTextList COMMA printText .)


state 211

    (11) statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    SET             reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    EXEC            reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    TYPE            reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    IF              reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    FOR             reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    EC              reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    PRINT           reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)


state 212

    (13) statement -> IF conditionif LBRACKET statementList RBRACKET empty .

    RBRACKET        reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    SET             reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    EXEC            reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    TYPE            reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    IF              reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    FOR             reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    EC              reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    ABANICO         reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    VERTICAL        reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    PERCUTOR        reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    GOLPE           reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    VIBRATO         reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    METRONOMO       reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    PRINT           reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)


state 213

    (14) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 234


state 214

    (15) statement -> FOR ID TO expression STEP NUMBER_I . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 235


state 215

    (16) statement -> FOR ID TO expression empty empty . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 236


state 216

    (17) statement -> EC inCaseLista SN LBRACKET statementList RBRACKET . FEC SEMICOLOM

    FEC             shift and go to state 237


state 217

    (18) statement -> EC ID inCaseListb SN LBRACKET statementList . RBRACKET FEC SEMICOLOM
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 238
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 218

    (68) inCaseb -> CUANDO relation expression ET . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 239


state 219

    (69) inCaseb -> CUANDO relation TRUE ET . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 240


state 220

    (70) inCaseb -> CUANDO relation FALSE ET . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 241


state 221

    (63) inCasea -> CUANDO ID relation expression ET . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 242


state 222

    (64) inCasea -> CUANDO ID relation TRUE ET . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 243


state 223

    (65) inCasea -> CUANDO ID relation FALSE ET . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 244


state 224

    (26) statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    SET             reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    EXEC            reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    TYPE            reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    IF              reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    FOR             reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    EC              reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    PRINT           reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)


state 225

    (28) statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    SET             reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    EXEC            reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    TYPE            reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    IF              reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    FOR             reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    EC              reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    PRINT           reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)


state 226

    (27) statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    SET             reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    EXEC            reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    TYPE            reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    IF              reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    FOR             reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    EC              reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    PRINT           reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)


state 227

    (29) statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    SET             reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    EXEC            reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    TYPE            reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    IF              reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    FOR             reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    EC              reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    PRINT           reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)


state 228

    (31) statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    SET             reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    IF              reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    FOR             reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    EC              reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)


state 229

    (30) statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    SET             reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    EXEC            reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    TYPE            reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    IF              reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    FOR             reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    EC              reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    PRINT           reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)


state 230

    (34) statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 245


state 231

    (36) statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 246


state 232

    (35) statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 247


state 233

    (37) statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 248


state 234

    (14) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 249
    statement                      shift and go to state 26

state 235

    (15) statement -> FOR ID TO expression STEP NUMBER_I LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 250
    statement                      shift and go to state 26

state 236

    (16) statement -> FOR ID TO expression empty empty LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 251
    statement                      shift and go to state 26

state 237

    (17) statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC . SEMICOLOM

    SEMICOLOM       shift and go to state 252


state 238

    (18) statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET . FEC SEMICOLOM

    FEC             shift and go to state 253


state 239

    (68) inCaseb -> CUANDO relation expression ET LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 254
    statement                      shift and go to state 26

state 240

    (69) inCaseb -> CUANDO relation TRUE ET LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 255
    statement                      shift and go to state 26

state 241

    (70) inCaseb -> CUANDO relation FALSE ET LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 256
    statement                      shift and go to state 26

state 242

    (63) inCasea -> CUANDO ID relation expression ET LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 257
    statement                      shift and go to state 26

state 243

    (64) inCasea -> CUANDO ID relation TRUE ET LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 258
    statement                      shift and go to state 26

state 244

    (65) inCasea -> CUANDO ID relation FALSE ET LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 259
    statement                      shift and go to state 26

state 245

    (34) statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    SET             reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    IF              reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    FOR             reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    EC              reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)


state 246

    (36) statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    SET             reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    EXEC            reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    TYPE            reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    IF              reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    FOR             reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    EC              reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    PRINT           reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)


state 247

    (35) statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    SET             reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    IF              reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    FOR             reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    EC              reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)


state 248

    (37) statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    SET             reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    EXEC            reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    TYPE            reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    IF              reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    FOR             reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    EC              reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    PRINT           reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)


state 249

    (14) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 260
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 250

    (15) statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 261
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 251

    (16) statement -> FOR ID TO expression empty empty LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 262
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 252

    (17) statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .

    RBRACKET        reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    SET             reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EXEC            reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    TYPE            reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    IF              reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    FOR             reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EC              reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    ABANICO         reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VERTICAL        reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PERCUTOR        reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    GOLPE           reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VIBRATO         reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    METRONOMO       reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PRINT           reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)


state 253

    (18) statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC . SEMICOLOM

    SEMICOLOM       shift and go to state 263


state 254

    (68) inCaseb -> CUANDO relation expression ET LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 264
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 255

    (69) inCaseb -> CUANDO relation TRUE ET LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 265
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 256

    (70) inCaseb -> CUANDO relation FALSE ET LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 266
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 257

    (63) inCasea -> CUANDO ID relation expression ET LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 267
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 258

    (64) inCasea -> CUANDO ID relation TRUE ET LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 268
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 259

    (65) inCasea -> CUANDO ID relation FALSE ET LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression empty empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 269
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 260

    (14) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .

    RBRACKET        reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    SET             reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    EXEC            reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    TYPE            reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    IF              reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    FOR             reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    EC              reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    ABANICO         reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    VERTICAL        reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    PERCUTOR        reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    GOLPE           reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    VIBRATO         reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    METRONOMO       reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    PRINT           reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)


state 261

    (15) statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .

    RBRACKET        reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    SET             reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    EXEC            reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    TYPE            reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    IF              reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    FOR             reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    EC              reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    ABANICO         reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    VERTICAL        reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    PERCUTOR        reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    GOLPE           reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    VIBRATO         reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    METRONOMO       reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    PRINT           reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)


state 262

    (16) statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .

    RBRACKET        reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    SET             reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    EXEC            reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    TYPE            reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    IF              reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    FOR             reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    EC              reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    ABANICO         reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    VERTICAL        reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    PERCUTOR        reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    GOLPE           reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    VIBRATO         reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    METRONOMO       reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)
    PRINT           reduce using rule 16 (statement -> FOR ID TO expression empty empty LBRACKET statementList RBRACKET .)


state 263

    (18) statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .

    RBRACKET        reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    SET             reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EXEC            reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    TYPE            reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    IF              reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    FOR             reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EC              reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    ABANICO         reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VERTICAL        reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PERCUTOR        reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    GOLPE           reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VIBRATO         reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    METRONOMO       reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PRINT           reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)


state 264

    (68) inCaseb -> CUANDO relation expression ET LBRACKET statementList RBRACKET .

    SN              reduce using rule 68 (inCaseb -> CUANDO relation expression ET LBRACKET statementList RBRACKET .)
    CUANDO          reduce using rule 68 (inCaseb -> CUANDO relation expression ET LBRACKET statementList RBRACKET .)


state 265

    (69) inCaseb -> CUANDO relation TRUE ET LBRACKET statementList RBRACKET .

    SN              reduce using rule 69 (inCaseb -> CUANDO relation TRUE ET LBRACKET statementList RBRACKET .)
    CUANDO          reduce using rule 69 (inCaseb -> CUANDO relation TRUE ET LBRACKET statementList RBRACKET .)


state 266

    (70) inCaseb -> CUANDO relation FALSE ET LBRACKET statementList RBRACKET .

    SN              reduce using rule 70 (inCaseb -> CUANDO relation FALSE ET LBRACKET statementList RBRACKET .)
    CUANDO          reduce using rule 70 (inCaseb -> CUANDO relation FALSE ET LBRACKET statementList RBRACKET .)


state 267

    (63) inCasea -> CUANDO ID relation expression ET LBRACKET statementList RBRACKET .

    SN              reduce using rule 63 (inCasea -> CUANDO ID relation expression ET LBRACKET statementList RBRACKET .)
    CUANDO          reduce using rule 63 (inCasea -> CUANDO ID relation expression ET LBRACKET statementList RBRACKET .)


state 268

    (64) inCasea -> CUANDO ID relation TRUE ET LBRACKET statementList RBRACKET .

    SN              reduce using rule 64 (inCasea -> CUANDO ID relation TRUE ET LBRACKET statementList RBRACKET .)
    CUANDO          reduce using rule 64 (inCasea -> CUANDO ID relation TRUE ET LBRACKET statementList RBRACKET .)


state 269

    (65) inCasea -> CUANDO ID relation FALSE ET LBRACKET statementList RBRACKET .

    SN              reduce using rule 65 (inCasea -> CUANDO ID relation FALSE ET LBRACKET statementList RBRACKET .)
    CUANDO          reduce using rule 65 (inCasea -> CUANDO ID relation FALSE ET LBRACKET statementList RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMPARE in state 51 resolved as shift
WARNING: shift/reduce conflict for NE in state 51 resolved as shift
WARNING: shift/reduce conflict for LT in state 51 resolved as shift
WARNING: shift/reduce conflict for GT in state 51 resolved as shift
WARNING: shift/reduce conflict for LTE in state 51 resolved as shift
WARNING: shift/reduce conflict for GTE in state 51 resolved as shift
WARNING: reduce/reduce conflict in state 96 resolved using rule (index -> addingOperator NUMBER_I)
WARNING: rejected rule (empty -> <empty>) in state 96
WARNING: reduce/reduce conflict in state 97 resolved using rule (index -> addingOperator NUMBER_F)
WARNING: rejected rule (empty -> <empty>) in state 97
WARNING: reduce/reduce conflict in state 98 resolved using rule (index -> addingOperator ID)
WARNING: rejected rule (empty -> <empty>) in state 98
