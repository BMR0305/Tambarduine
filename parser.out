Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    CUANDO
    DIVIDE_E
    ET
    EXPONENT
    MODULE
    SPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> functionDecl block
Rule 3     block -> empty
Rule 4     functionDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
Rule 5     functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
Rule 6     statementList -> statement
Rule 7     statementList -> statementList statement
Rule 8     statement -> SET ID COMMA NUMBER_I SEMICOLOM
Rule 9     statement -> SET ID COMMA NUMBER_F SEMICOLOM
Rule 10    statement -> SET ID COMMA TRUE SEMICOLOM
Rule 11    statement -> SET ID COMMA FALSE SEMICOLOM
Rule 12    statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM
Rule 13    statement -> TYPE LPARENT ID RPARENT SEMICOLOM
Rule 14    statement -> IF conditionif LBRACKET statementList RBRACKET
Rule 15    statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
Rule 16    statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
Rule 17    statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET
Rule 18    statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
Rule 19    statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
Rule 20    statement -> SET ID DOT NEG SEMICOLOM
Rule 21    statement -> SET ID DOT T SEMICOLOM
Rule 22    statement -> SET ID DOT F SEMICOLOM
Rule 23    statement -> ABANICO LPARENT A RPARENT SEMICOLOM
Rule 24    statement -> ABANICO LPARENT B RPARENT SEMICOLOM
Rule 25    statement -> VERTICAL LPARENT D RPARENT SEMICOLOM
Rule 26    statement -> VERTICAL LPARENT I RPARENT SEMICOLOM
Rule 27    statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM
Rule 28    statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM
Rule 29    statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM
Rule 30    statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM
Rule 31    statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM
Rule 32    statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM
Rule 33    statement -> GOLPE LPARENT RPARENT SEMICOLOM
Rule 34    statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
Rule 35    statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
Rule 36    statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
Rule 37    statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
Rule 38    statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
Rule 39    statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM
Rule 40    printTextList -> printText
Rule 41    printTextList -> printTextList COMMA printText
Rule 42    printText -> factor
Rule 43    printText -> STRING
Rule 44    varList -> var
Rule 45    varList -> empty
Rule 46    varList -> varList COMMA var
Rule 47    var -> ID
Rule 48    var -> NUMBER_I
Rule 49    var -> NUMBER_F
Rule 50    var -> TRUE
Rule 51    var -> FALSE
Rule 52    conditionif -> expression relation expression
Rule 53    conditionif -> TRUE
Rule 54    conditionif -> FALSE
Rule 55    conditionif -> ID
Rule 56    inCaseLista -> inCasea
Rule 57    inCaseLista -> inCaseLista inCasea
Rule 58    inCasea -> ID relation expression
Rule 59    inCaseListb -> inCaseb
Rule 60    inCaseListb -> inCaseListb inCaseb
Rule 61    inCaseb -> relation expression
Rule 62    relation -> COMPARE
Rule 63    relation -> NE
Rule 64    relation -> LT
Rule 65    relation -> GT
Rule 66    relation -> LTE
Rule 67    relation -> GTE
Rule 68    expression -> term
Rule 69    expression -> addingOperator term
Rule 70    expression -> expression addingOperator term
Rule 71    addingOperator -> PLUS
Rule 72    addingOperator -> MINUS
Rule 73    term -> factor
Rule 74    term -> term multiplyingOperator factor
Rule 75    multiplyingOperator -> TIMES
Rule 76    multiplyingOperator -> DIVIDE
Rule 77    factor -> ID
Rule 78    factor -> NUMBER_I
Rule 79    factor -> NUMBER_F
Rule 80    factor -> LPARENT expression RPARENT
Rule 81    empty -> <empty>

Terminals, with rules where they appear

A                    : 23 27 29 35 37
ABANICO              : 23 24
ASSIGN               : 
B                    : 24 28 29
COMMA                : 8 9 10 11 35 36 37 38 41 46
COMPARE              : 62
CUANDO               : 
D                    : 25 30 32 36 38
DEF                  : 4 5
DIVIDE               : 76
DIVIDE_E             : 
DOT                  : 20 21 22
EC                   : 18 19
ELSE                 : 15
ET                   : 
EXEC                 : 12
EXPONENT             : 
F                    : 22
FALSE                : 11 51 54
FEC                  : 18 19
FOR                  : 16 17
GOLPE                : 33
GT                   : 65
GTE                  : 67
I                    : 26 31 32
ID                   : 5 8 9 10 11 12 13 16 17 19 20 21 22 47 55 58 77
IF                   : 14 15
LBRACKET             : 4 5 14 15 15 16 17 18 19
LPARENT              : 4 5 12 13 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 80
LT                   : 64
LTE                  : 66
METRONOMO            : 35 36 37 38
MINUS                : 72
MODULE               : 
NE                   : 63
NEG                  : 20
NUMBER_F             : 9 37 38 49 79
NUMBER_I             : 8 16 34 35 36 48 78
PERCUTOR             : 27 28 29 30 31 32
PLUS                 : 71
PRIN                 : 4
PRINT                : 39
RBRACKET             : 4 5 14 15 15 16 17 18 19
RPARENT              : 4 5 12 13 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 80
SEMICOLOM            : 8 9 10 11 12 13 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
SET                  : 8 9 10 11 20 21 22
SN                   : 18 19
SPACE                : 
STEP                 : 16 17
STRING               : 43
T                    : 21
TIMES                : 75
TO                   : 16 17
TRUE                 : 10 50 53
TYPE                 : 13
VERTICAL             : 25 26
VIBRATO              : 34
error                : 

Nonterminals, with rules where they appear

addingOperator       : 69 70
block                : 1 2
conditionif          : 14 15
empty                : 3 45
expression           : 52 52 58 61 70 80
factor               : 42 73 74
functionDecl         : 2
inCaseLista          : 18 57
inCaseListb          : 19 60
inCasea              : 56 57
inCaseb              : 59 60
multiplyingOperator  : 74
printText            : 40 41
printTextList        : 39 41
program              : 0
relation             : 52 58 61
statement            : 6 7
statementList        : 4 5 7 14 15 15 16 17 18 19
term                 : 68 69 70 74
var                  : 16 17 44 46
varList              : 5 12 46

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . functionDecl block
    (3) block -> . empty
    (4) functionDecl -> . DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> . DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
    (81) empty -> .

    DEF             shift and go to state 5
    $end            reduce using rule 81 (empty -> .)

    program                        shift and go to state 1
    block                          shift and go to state 2
    functionDecl                   shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> functionDecl . block
    (2) block -> . functionDecl block
    (3) block -> . empty
    (4) functionDecl -> . DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> . DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
    (81) empty -> .

    DEF             shift and go to state 5
    $end            reduce using rule 81 (empty -> .)

    functionDecl                   shift and go to state 3
    block                          shift and go to state 6
    empty                          shift and go to state 4

state 4

    (3) block -> empty .

    $end            reduce using rule 3 (block -> empty .)


state 5

    (4) functionDecl -> DEF . PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> DEF . ID LPARENT varList RPARENT LBRACKET statementList RBRACKET

    PRIN            shift and go to state 7
    ID              shift and go to state 8


state 6

    (2) block -> functionDecl block .

    $end            reduce using rule 2 (block -> functionDecl block .)


state 7

    (4) functionDecl -> DEF PRIN . LPARENT RPARENT LBRACKET statementList RBRACKET

    LPARENT         shift and go to state 9


state 8

    (5) functionDecl -> DEF ID . LPARENT varList RPARENT LBRACKET statementList RBRACKET

    LPARENT         shift and go to state 10


state 9

    (4) functionDecl -> DEF PRIN LPARENT . RPARENT LBRACKET statementList RBRACKET

    RPARENT         shift and go to state 11


state 10

    (5) functionDecl -> DEF ID LPARENT . varList RPARENT LBRACKET statementList RBRACKET
    (44) varList -> . var
    (45) varList -> . empty
    (46) varList -> . varList COMMA var
    (47) var -> . ID
    (48) var -> . NUMBER_I
    (49) var -> . NUMBER_F
    (50) var -> . TRUE
    (51) var -> . FALSE
    (81) empty -> .

    ID              shift and go to state 12
    NUMBER_I        shift and go to state 16
    NUMBER_F        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    RPARENT         reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

    varList                        shift and go to state 13
    var                            shift and go to state 14
    empty                          shift and go to state 15

state 11

    (4) functionDecl -> DEF PRIN LPARENT RPARENT . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 20


state 12

    (47) var -> ID .

    RPARENT         reduce using rule 47 (var -> ID .)
    COMMA           reduce using rule 47 (var -> ID .)
    STEP            reduce using rule 47 (var -> ID .)


state 13

    (5) functionDecl -> DEF ID LPARENT varList . RPARENT LBRACKET statementList RBRACKET
    (46) varList -> varList . COMMA var

    RPARENT         shift and go to state 21
    COMMA           shift and go to state 22


state 14

    (44) varList -> var .

    RPARENT         reduce using rule 44 (varList -> var .)
    COMMA           reduce using rule 44 (varList -> var .)


state 15

    (45) varList -> empty .

    RPARENT         reduce using rule 45 (varList -> empty .)
    COMMA           reduce using rule 45 (varList -> empty .)


state 16

    (48) var -> NUMBER_I .

    RPARENT         reduce using rule 48 (var -> NUMBER_I .)
    COMMA           reduce using rule 48 (var -> NUMBER_I .)
    STEP            reduce using rule 48 (var -> NUMBER_I .)


state 17

    (49) var -> NUMBER_F .

    RPARENT         reduce using rule 49 (var -> NUMBER_F .)
    COMMA           reduce using rule 49 (var -> NUMBER_F .)
    STEP            reduce using rule 49 (var -> NUMBER_F .)


state 18

    (50) var -> TRUE .

    RPARENT         reduce using rule 50 (var -> TRUE .)
    COMMA           reduce using rule 50 (var -> TRUE .)
    STEP            reduce using rule 50 (var -> TRUE .)


state 19

    (51) var -> FALSE .

    RPARENT         reduce using rule 51 (var -> FALSE .)
    COMMA           reduce using rule 51 (var -> FALSE .)
    STEP            reduce using rule 51 (var -> FALSE .)


state 20

    (4) functionDecl -> DEF PRIN LPARENT RPARENT LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statementList                  shift and go to state 23
    statement                      shift and go to state 24

state 21

    (5) functionDecl -> DEF ID LPARENT varList RPARENT . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 38


state 22

    (46) varList -> varList COMMA . var
    (47) var -> . ID
    (48) var -> . NUMBER_I
    (49) var -> . NUMBER_F
    (50) var -> . TRUE
    (51) var -> . FALSE

    ID              shift and go to state 12
    NUMBER_I        shift and go to state 16
    NUMBER_F        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19

    var                            shift and go to state 39

state 23

    (4) functionDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 40
    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statement                      shift and go to state 41

state 24

    (6) statementList -> statement .

    RBRACKET        reduce using rule 6 (statementList -> statement .)
    SET             reduce using rule 6 (statementList -> statement .)
    EXEC            reduce using rule 6 (statementList -> statement .)
    TYPE            reduce using rule 6 (statementList -> statement .)
    IF              reduce using rule 6 (statementList -> statement .)
    FOR             reduce using rule 6 (statementList -> statement .)
    EC              reduce using rule 6 (statementList -> statement .)
    ABANICO         reduce using rule 6 (statementList -> statement .)
    VERTICAL        reduce using rule 6 (statementList -> statement .)
    PERCUTOR        reduce using rule 6 (statementList -> statement .)
    GOLPE           reduce using rule 6 (statementList -> statement .)
    VIBRATO         reduce using rule 6 (statementList -> statement .)
    METRONOMO       reduce using rule 6 (statementList -> statement .)
    PRINT           reduce using rule 6 (statementList -> statement .)


state 25

    (8) statement -> SET . ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> SET . ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> SET . ID COMMA TRUE SEMICOLOM
    (11) statement -> SET . ID COMMA FALSE SEMICOLOM
    (20) statement -> SET . ID DOT NEG SEMICOLOM
    (21) statement -> SET . ID DOT T SEMICOLOM
    (22) statement -> SET . ID DOT F SEMICOLOM

    ID              shift and go to state 42


state 26

    (12) statement -> EXEC . ID LPARENT varList RPARENT SEMICOLOM

    ID              shift and go to state 43


state 27

    (13) statement -> TYPE . LPARENT ID RPARENT SEMICOLOM

    LPARENT         shift and go to state 44


state 28

    (14) statement -> IF . conditionif LBRACKET statementList RBRACKET
    (15) statement -> IF . conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (52) conditionif -> . expression relation expression
    (53) conditionif -> . TRUE
    (54) conditionif -> . FALSE
    (55) conditionif -> . ID
    (68) expression -> . term
    (69) expression -> . addingOperator term
    (70) expression -> . expression addingOperator term
    (73) term -> . factor
    (74) term -> . term multiplyingOperator factor
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    ID              shift and go to state 49
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    conditionif                    shift and go to state 45
    expression                     shift and go to state 46
    term                           shift and go to state 50
    addingOperator                 shift and go to state 51
    factor                         shift and go to state 52

state 29

    (16) statement -> FOR . ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> FOR . ID TO var STEP LBRACKET statementList RBRACKET

    ID              shift and go to state 58


state 30

    (18) statement -> EC . inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> EC . ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (56) inCaseLista -> . inCasea
    (57) inCaseLista -> . inCaseLista inCasea
    (58) inCasea -> . ID relation expression

    ID              shift and go to state 60

    inCaseLista                    shift and go to state 59
    inCasea                        shift and go to state 61

state 31

    (23) statement -> ABANICO . LPARENT A RPARENT SEMICOLOM
    (24) statement -> ABANICO . LPARENT B RPARENT SEMICOLOM

    LPARENT         shift and go to state 62


state 32

    (25) statement -> VERTICAL . LPARENT D RPARENT SEMICOLOM
    (26) statement -> VERTICAL . LPARENT I RPARENT SEMICOLOM

    LPARENT         shift and go to state 63


state 33

    (27) statement -> PERCUTOR . LPARENT A RPARENT SEMICOLOM
    (28) statement -> PERCUTOR . LPARENT B RPARENT SEMICOLOM
    (29) statement -> PERCUTOR . LPARENT A B RPARENT SEMICOLOM
    (30) statement -> PERCUTOR . LPARENT D RPARENT SEMICOLOM
    (31) statement -> PERCUTOR . LPARENT I RPARENT SEMICOLOM
    (32) statement -> PERCUTOR . LPARENT D I RPARENT SEMICOLOM

    LPARENT         shift and go to state 64


state 34

    (33) statement -> GOLPE . LPARENT RPARENT SEMICOLOM

    LPARENT         shift and go to state 65


state 35

    (34) statement -> VIBRATO . LPARENT NUMBER_I RPARENT SEMICOLOM

    LPARENT         shift and go to state 66


state 36

    (35) statement -> METRONOMO . LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> METRONOMO . LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> METRONOMO . LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> METRONOMO . LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM

    LPARENT         shift and go to state 67


state 37

    (39) statement -> PRINT . LPARENT printTextList RPARENT SEMICOLOM

    LPARENT         shift and go to state 68


state 38

    (5) functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statementList                  shift and go to state 69
    statement                      shift and go to state 24

state 39

    (46) varList -> varList COMMA var .

    RPARENT         reduce using rule 46 (varList -> varList COMMA var .)
    COMMA           reduce using rule 46 (varList -> varList COMMA var .)


state 40

    (4) functionDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET .

    DEF             reduce using rule 4 (functionDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET .)
    $end            reduce using rule 4 (functionDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET .)


state 41

    (7) statementList -> statementList statement .

    RBRACKET        reduce using rule 7 (statementList -> statementList statement .)
    SET             reduce using rule 7 (statementList -> statementList statement .)
    EXEC            reduce using rule 7 (statementList -> statementList statement .)
    TYPE            reduce using rule 7 (statementList -> statementList statement .)
    IF              reduce using rule 7 (statementList -> statementList statement .)
    FOR             reduce using rule 7 (statementList -> statementList statement .)
    EC              reduce using rule 7 (statementList -> statementList statement .)
    ABANICO         reduce using rule 7 (statementList -> statementList statement .)
    VERTICAL        reduce using rule 7 (statementList -> statementList statement .)
    PERCUTOR        reduce using rule 7 (statementList -> statementList statement .)
    GOLPE           reduce using rule 7 (statementList -> statementList statement .)
    VIBRATO         reduce using rule 7 (statementList -> statementList statement .)
    METRONOMO       reduce using rule 7 (statementList -> statementList statement .)
    PRINT           reduce using rule 7 (statementList -> statementList statement .)


state 42

    (8) statement -> SET ID . COMMA NUMBER_I SEMICOLOM
    (9) statement -> SET ID . COMMA NUMBER_F SEMICOLOM
    (10) statement -> SET ID . COMMA TRUE SEMICOLOM
    (11) statement -> SET ID . COMMA FALSE SEMICOLOM
    (20) statement -> SET ID . DOT NEG SEMICOLOM
    (21) statement -> SET ID . DOT T SEMICOLOM
    (22) statement -> SET ID . DOT F SEMICOLOM

    COMMA           shift and go to state 70
    DOT             shift and go to state 71


state 43

    (12) statement -> EXEC ID . LPARENT varList RPARENT SEMICOLOM

    LPARENT         shift and go to state 72


state 44

    (13) statement -> TYPE LPARENT . ID RPARENT SEMICOLOM

    ID              shift and go to state 73


state 45

    (14) statement -> IF conditionif . LBRACKET statementList RBRACKET
    (15) statement -> IF conditionif . LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 74


state 46

    (52) conditionif -> expression . relation expression
    (70) expression -> expression . addingOperator term
    (62) relation -> . COMPARE
    (63) relation -> . NE
    (64) relation -> . LT
    (65) relation -> . GT
    (66) relation -> . LTE
    (67) relation -> . GTE
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS

    COMPARE         shift and go to state 77
    NE              shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LTE             shift and go to state 81
    GTE             shift and go to state 82
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54

    relation                       shift and go to state 75
    addingOperator                 shift and go to state 76

state 47

    (53) conditionif -> TRUE .

    LBRACKET        reduce using rule 53 (conditionif -> TRUE .)


state 48

    (54) conditionif -> FALSE .

    LBRACKET        reduce using rule 54 (conditionif -> FALSE .)


state 49

    (55) conditionif -> ID .
    (77) factor -> ID .

    LBRACKET        reduce using rule 55 (conditionif -> ID .)
    TIMES           reduce using rule 77 (factor -> ID .)
    DIVIDE          reduce using rule 77 (factor -> ID .)
    COMPARE         reduce using rule 77 (factor -> ID .)
    NE              reduce using rule 77 (factor -> ID .)
    LT              reduce using rule 77 (factor -> ID .)
    GT              reduce using rule 77 (factor -> ID .)
    LTE             reduce using rule 77 (factor -> ID .)
    GTE             reduce using rule 77 (factor -> ID .)
    PLUS            reduce using rule 77 (factor -> ID .)
    MINUS           reduce using rule 77 (factor -> ID .)


state 50

    (68) expression -> term .
    (74) term -> term . multiplyingOperator factor
    (75) multiplyingOperator -> . TIMES
    (76) multiplyingOperator -> . DIVIDE

    COMPARE         reduce using rule 68 (expression -> term .)
    NE              reduce using rule 68 (expression -> term .)
    LT              reduce using rule 68 (expression -> term .)
    GT              reduce using rule 68 (expression -> term .)
    LTE             reduce using rule 68 (expression -> term .)
    GTE             reduce using rule 68 (expression -> term .)
    PLUS            reduce using rule 68 (expression -> term .)
    MINUS           reduce using rule 68 (expression -> term .)
    RPARENT         reduce using rule 68 (expression -> term .)
    LBRACKET        reduce using rule 68 (expression -> term .)
    SN              reduce using rule 68 (expression -> term .)
    ID              reduce using rule 68 (expression -> term .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85

    multiplyingOperator            shift and go to state 83

state 51

    (69) expression -> addingOperator . term
    (73) term -> . factor
    (74) term -> . term multiplyingOperator factor
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    ID              shift and go to state 87
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    term                           shift and go to state 86
    factor                         shift and go to state 52

state 52

    (73) term -> factor .

    TIMES           reduce using rule 73 (term -> factor .)
    DIVIDE          reduce using rule 73 (term -> factor .)
    COMPARE         reduce using rule 73 (term -> factor .)
    NE              reduce using rule 73 (term -> factor .)
    LT              reduce using rule 73 (term -> factor .)
    GT              reduce using rule 73 (term -> factor .)
    LTE             reduce using rule 73 (term -> factor .)
    GTE             reduce using rule 73 (term -> factor .)
    PLUS            reduce using rule 73 (term -> factor .)
    MINUS           reduce using rule 73 (term -> factor .)
    RPARENT         reduce using rule 73 (term -> factor .)
    LBRACKET        reduce using rule 73 (term -> factor .)
    SN              reduce using rule 73 (term -> factor .)
    ID              reduce using rule 73 (term -> factor .)


state 53

    (71) addingOperator -> PLUS .

    ID              reduce using rule 71 (addingOperator -> PLUS .)
    NUMBER_I        reduce using rule 71 (addingOperator -> PLUS .)
    NUMBER_F        reduce using rule 71 (addingOperator -> PLUS .)
    LPARENT         reduce using rule 71 (addingOperator -> PLUS .)


state 54

    (72) addingOperator -> MINUS .

    ID              reduce using rule 72 (addingOperator -> MINUS .)
    NUMBER_I        reduce using rule 72 (addingOperator -> MINUS .)
    NUMBER_F        reduce using rule 72 (addingOperator -> MINUS .)
    LPARENT         reduce using rule 72 (addingOperator -> MINUS .)


state 55

    (78) factor -> NUMBER_I .

    TIMES           reduce using rule 78 (factor -> NUMBER_I .)
    DIVIDE          reduce using rule 78 (factor -> NUMBER_I .)
    COMPARE         reduce using rule 78 (factor -> NUMBER_I .)
    NE              reduce using rule 78 (factor -> NUMBER_I .)
    LT              reduce using rule 78 (factor -> NUMBER_I .)
    GT              reduce using rule 78 (factor -> NUMBER_I .)
    LTE             reduce using rule 78 (factor -> NUMBER_I .)
    GTE             reduce using rule 78 (factor -> NUMBER_I .)
    PLUS            reduce using rule 78 (factor -> NUMBER_I .)
    MINUS           reduce using rule 78 (factor -> NUMBER_I .)
    RPARENT         reduce using rule 78 (factor -> NUMBER_I .)
    LBRACKET        reduce using rule 78 (factor -> NUMBER_I .)
    SN              reduce using rule 78 (factor -> NUMBER_I .)
    ID              reduce using rule 78 (factor -> NUMBER_I .)
    COMMA           reduce using rule 78 (factor -> NUMBER_I .)


state 56

    (79) factor -> NUMBER_F .

    TIMES           reduce using rule 79 (factor -> NUMBER_F .)
    DIVIDE          reduce using rule 79 (factor -> NUMBER_F .)
    COMPARE         reduce using rule 79 (factor -> NUMBER_F .)
    NE              reduce using rule 79 (factor -> NUMBER_F .)
    LT              reduce using rule 79 (factor -> NUMBER_F .)
    GT              reduce using rule 79 (factor -> NUMBER_F .)
    LTE             reduce using rule 79 (factor -> NUMBER_F .)
    GTE             reduce using rule 79 (factor -> NUMBER_F .)
    PLUS            reduce using rule 79 (factor -> NUMBER_F .)
    MINUS           reduce using rule 79 (factor -> NUMBER_F .)
    RPARENT         reduce using rule 79 (factor -> NUMBER_F .)
    LBRACKET        reduce using rule 79 (factor -> NUMBER_F .)
    SN              reduce using rule 79 (factor -> NUMBER_F .)
    ID              reduce using rule 79 (factor -> NUMBER_F .)
    COMMA           reduce using rule 79 (factor -> NUMBER_F .)


state 57

    (80) factor -> LPARENT . expression RPARENT
    (68) expression -> . term
    (69) expression -> . addingOperator term
    (70) expression -> . expression addingOperator term
    (73) term -> . factor
    (74) term -> . term multiplyingOperator factor
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    ID              shift and go to state 87
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    expression                     shift and go to state 88
    term                           shift and go to state 50
    addingOperator                 shift and go to state 51
    factor                         shift and go to state 52

state 58

    (16) statement -> FOR ID . TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> FOR ID . TO var STEP LBRACKET statementList RBRACKET

    TO              shift and go to state 89


state 59

    (18) statement -> EC inCaseLista . SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (57) inCaseLista -> inCaseLista . inCasea
    (58) inCasea -> . ID relation expression

    SN              shift and go to state 90
    ID              shift and go to state 92

    inCasea                        shift and go to state 91

state 60

    (19) statement -> EC ID . inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (58) inCasea -> ID . relation expression
    (59) inCaseListb -> . inCaseb
    (60) inCaseListb -> . inCaseListb inCaseb
    (62) relation -> . COMPARE
    (63) relation -> . NE
    (64) relation -> . LT
    (65) relation -> . GT
    (66) relation -> . LTE
    (67) relation -> . GTE
    (61) inCaseb -> . relation expression

    COMPARE         shift and go to state 77
    NE              shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LTE             shift and go to state 81
    GTE             shift and go to state 82

    inCaseListb                    shift and go to state 93
    relation                       shift and go to state 94
    inCaseb                        shift and go to state 95

state 61

    (56) inCaseLista -> inCasea .

    SN              reduce using rule 56 (inCaseLista -> inCasea .)
    ID              reduce using rule 56 (inCaseLista -> inCasea .)


state 62

    (23) statement -> ABANICO LPARENT . A RPARENT SEMICOLOM
    (24) statement -> ABANICO LPARENT . B RPARENT SEMICOLOM

    A               shift and go to state 96
    B               shift and go to state 97


state 63

    (25) statement -> VERTICAL LPARENT . D RPARENT SEMICOLOM
    (26) statement -> VERTICAL LPARENT . I RPARENT SEMICOLOM

    D               shift and go to state 98
    I               shift and go to state 99


state 64

    (27) statement -> PERCUTOR LPARENT . A RPARENT SEMICOLOM
    (28) statement -> PERCUTOR LPARENT . B RPARENT SEMICOLOM
    (29) statement -> PERCUTOR LPARENT . A B RPARENT SEMICOLOM
    (30) statement -> PERCUTOR LPARENT . D RPARENT SEMICOLOM
    (31) statement -> PERCUTOR LPARENT . I RPARENT SEMICOLOM
    (32) statement -> PERCUTOR LPARENT . D I RPARENT SEMICOLOM

    A               shift and go to state 100
    B               shift and go to state 101
    D               shift and go to state 102
    I               shift and go to state 103


state 65

    (33) statement -> GOLPE LPARENT . RPARENT SEMICOLOM

    RPARENT         shift and go to state 104


state 66

    (34) statement -> VIBRATO LPARENT . NUMBER_I RPARENT SEMICOLOM

    NUMBER_I        shift and go to state 105


state 67

    (35) statement -> METRONOMO LPARENT . A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> METRONOMO LPARENT . D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> METRONOMO LPARENT . A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> METRONOMO LPARENT . D COMMA NUMBER_F RPARENT SEMICOLOM

    A               shift and go to state 106
    D               shift and go to state 107


state 68

    (39) statement -> PRINT LPARENT . printTextList RPARENT SEMICOLOM
    (40) printTextList -> . printText
    (41) printTextList -> . printTextList COMMA printText
    (42) printText -> . factor
    (43) printText -> . STRING
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    STRING          shift and go to state 111
    ID              shift and go to state 87
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    printTextList                  shift and go to state 108
    printText                      shift and go to state 109
    factor                         shift and go to state 110

state 69

    (5) functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 112
    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statement                      shift and go to state 41

state 70

    (8) statement -> SET ID COMMA . NUMBER_I SEMICOLOM
    (9) statement -> SET ID COMMA . NUMBER_F SEMICOLOM
    (10) statement -> SET ID COMMA . TRUE SEMICOLOM
    (11) statement -> SET ID COMMA . FALSE SEMICOLOM

    NUMBER_I        shift and go to state 113
    NUMBER_F        shift and go to state 114
    TRUE            shift and go to state 115
    FALSE           shift and go to state 116


state 71

    (20) statement -> SET ID DOT . NEG SEMICOLOM
    (21) statement -> SET ID DOT . T SEMICOLOM
    (22) statement -> SET ID DOT . F SEMICOLOM

    NEG             shift and go to state 117
    T               shift and go to state 118
    F               shift and go to state 119


state 72

    (12) statement -> EXEC ID LPARENT . varList RPARENT SEMICOLOM
    (44) varList -> . var
    (45) varList -> . empty
    (46) varList -> . varList COMMA var
    (47) var -> . ID
    (48) var -> . NUMBER_I
    (49) var -> . NUMBER_F
    (50) var -> . TRUE
    (51) var -> . FALSE
    (81) empty -> .

    ID              shift and go to state 12
    NUMBER_I        shift and go to state 16
    NUMBER_F        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    RPARENT         reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

    varList                        shift and go to state 120
    var                            shift and go to state 14
    empty                          shift and go to state 15

state 73

    (13) statement -> TYPE LPARENT ID . RPARENT SEMICOLOM

    RPARENT         shift and go to state 121


state 74

    (14) statement -> IF conditionif LBRACKET . statementList RBRACKET
    (15) statement -> IF conditionif LBRACKET . statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statementList                  shift and go to state 122
    statement                      shift and go to state 24

state 75

    (52) conditionif -> expression relation . expression
    (68) expression -> . term
    (69) expression -> . addingOperator term
    (70) expression -> . expression addingOperator term
    (73) term -> . factor
    (74) term -> . term multiplyingOperator factor
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    ID              shift and go to state 87
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    expression                     shift and go to state 123
    term                           shift and go to state 50
    addingOperator                 shift and go to state 51
    factor                         shift and go to state 52

state 76

    (70) expression -> expression addingOperator . term
    (73) term -> . factor
    (74) term -> . term multiplyingOperator factor
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    ID              shift and go to state 87
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    term                           shift and go to state 124
    factor                         shift and go to state 52

state 77

    (62) relation -> COMPARE .

    PLUS            reduce using rule 62 (relation -> COMPARE .)
    MINUS           reduce using rule 62 (relation -> COMPARE .)
    ID              reduce using rule 62 (relation -> COMPARE .)
    NUMBER_I        reduce using rule 62 (relation -> COMPARE .)
    NUMBER_F        reduce using rule 62 (relation -> COMPARE .)
    LPARENT         reduce using rule 62 (relation -> COMPARE .)


state 78

    (63) relation -> NE .

    PLUS            reduce using rule 63 (relation -> NE .)
    MINUS           reduce using rule 63 (relation -> NE .)
    ID              reduce using rule 63 (relation -> NE .)
    NUMBER_I        reduce using rule 63 (relation -> NE .)
    NUMBER_F        reduce using rule 63 (relation -> NE .)
    LPARENT         reduce using rule 63 (relation -> NE .)


state 79

    (64) relation -> LT .

    PLUS            reduce using rule 64 (relation -> LT .)
    MINUS           reduce using rule 64 (relation -> LT .)
    ID              reduce using rule 64 (relation -> LT .)
    NUMBER_I        reduce using rule 64 (relation -> LT .)
    NUMBER_F        reduce using rule 64 (relation -> LT .)
    LPARENT         reduce using rule 64 (relation -> LT .)


state 80

    (65) relation -> GT .

    PLUS            reduce using rule 65 (relation -> GT .)
    MINUS           reduce using rule 65 (relation -> GT .)
    ID              reduce using rule 65 (relation -> GT .)
    NUMBER_I        reduce using rule 65 (relation -> GT .)
    NUMBER_F        reduce using rule 65 (relation -> GT .)
    LPARENT         reduce using rule 65 (relation -> GT .)


state 81

    (66) relation -> LTE .

    PLUS            reduce using rule 66 (relation -> LTE .)
    MINUS           reduce using rule 66 (relation -> LTE .)
    ID              reduce using rule 66 (relation -> LTE .)
    NUMBER_I        reduce using rule 66 (relation -> LTE .)
    NUMBER_F        reduce using rule 66 (relation -> LTE .)
    LPARENT         reduce using rule 66 (relation -> LTE .)


state 82

    (67) relation -> GTE .

    PLUS            reduce using rule 67 (relation -> GTE .)
    MINUS           reduce using rule 67 (relation -> GTE .)
    ID              reduce using rule 67 (relation -> GTE .)
    NUMBER_I        reduce using rule 67 (relation -> GTE .)
    NUMBER_F        reduce using rule 67 (relation -> GTE .)
    LPARENT         reduce using rule 67 (relation -> GTE .)


state 83

    (74) term -> term multiplyingOperator . factor
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    ID              shift and go to state 87
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    factor                         shift and go to state 125

state 84

    (75) multiplyingOperator -> TIMES .

    ID              reduce using rule 75 (multiplyingOperator -> TIMES .)
    NUMBER_I        reduce using rule 75 (multiplyingOperator -> TIMES .)
    NUMBER_F        reduce using rule 75 (multiplyingOperator -> TIMES .)
    LPARENT         reduce using rule 75 (multiplyingOperator -> TIMES .)


state 85

    (76) multiplyingOperator -> DIVIDE .

    ID              reduce using rule 76 (multiplyingOperator -> DIVIDE .)
    NUMBER_I        reduce using rule 76 (multiplyingOperator -> DIVIDE .)
    NUMBER_F        reduce using rule 76 (multiplyingOperator -> DIVIDE .)
    LPARENT         reduce using rule 76 (multiplyingOperator -> DIVIDE .)


state 86

    (69) expression -> addingOperator term .
    (74) term -> term . multiplyingOperator factor
    (75) multiplyingOperator -> . TIMES
    (76) multiplyingOperator -> . DIVIDE

    COMPARE         reduce using rule 69 (expression -> addingOperator term .)
    NE              reduce using rule 69 (expression -> addingOperator term .)
    LT              reduce using rule 69 (expression -> addingOperator term .)
    GT              reduce using rule 69 (expression -> addingOperator term .)
    LTE             reduce using rule 69 (expression -> addingOperator term .)
    GTE             reduce using rule 69 (expression -> addingOperator term .)
    PLUS            reduce using rule 69 (expression -> addingOperator term .)
    MINUS           reduce using rule 69 (expression -> addingOperator term .)
    RPARENT         reduce using rule 69 (expression -> addingOperator term .)
    LBRACKET        reduce using rule 69 (expression -> addingOperator term .)
    SN              reduce using rule 69 (expression -> addingOperator term .)
    ID              reduce using rule 69 (expression -> addingOperator term .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85

    multiplyingOperator            shift and go to state 83

state 87

    (77) factor -> ID .

    TIMES           reduce using rule 77 (factor -> ID .)
    DIVIDE          reduce using rule 77 (factor -> ID .)
    COMPARE         reduce using rule 77 (factor -> ID .)
    NE              reduce using rule 77 (factor -> ID .)
    LT              reduce using rule 77 (factor -> ID .)
    GT              reduce using rule 77 (factor -> ID .)
    LTE             reduce using rule 77 (factor -> ID .)
    GTE             reduce using rule 77 (factor -> ID .)
    PLUS            reduce using rule 77 (factor -> ID .)
    MINUS           reduce using rule 77 (factor -> ID .)
    RPARENT         reduce using rule 77 (factor -> ID .)
    LBRACKET        reduce using rule 77 (factor -> ID .)
    SN              reduce using rule 77 (factor -> ID .)
    ID              reduce using rule 77 (factor -> ID .)
    COMMA           reduce using rule 77 (factor -> ID .)


state 88

    (80) factor -> LPARENT expression . RPARENT
    (70) expression -> expression . addingOperator term
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS

    RPARENT         shift and go to state 126
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54

    addingOperator                 shift and go to state 76

state 89

    (16) statement -> FOR ID TO . var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> FOR ID TO . var STEP LBRACKET statementList RBRACKET
    (47) var -> . ID
    (48) var -> . NUMBER_I
    (49) var -> . NUMBER_F
    (50) var -> . TRUE
    (51) var -> . FALSE

    ID              shift and go to state 12
    NUMBER_I        shift and go to state 16
    NUMBER_F        shift and go to state 17
    TRUE            shift and go to state 18
    FALSE           shift and go to state 19

    var                            shift and go to state 127

state 90

    (18) statement -> EC inCaseLista SN . LBRACKET statementList RBRACKET FEC SEMICOLOM

    LBRACKET        shift and go to state 128


state 91

    (57) inCaseLista -> inCaseLista inCasea .

    SN              reduce using rule 57 (inCaseLista -> inCaseLista inCasea .)
    ID              reduce using rule 57 (inCaseLista -> inCaseLista inCasea .)


state 92

    (58) inCasea -> ID . relation expression
    (62) relation -> . COMPARE
    (63) relation -> . NE
    (64) relation -> . LT
    (65) relation -> . GT
    (66) relation -> . LTE
    (67) relation -> . GTE

    COMPARE         shift and go to state 77
    NE              shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LTE             shift and go to state 81
    GTE             shift and go to state 82

    relation                       shift and go to state 129

state 93

    (19) statement -> EC ID inCaseListb . SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (60) inCaseListb -> inCaseListb . inCaseb
    (61) inCaseb -> . relation expression
    (62) relation -> . COMPARE
    (63) relation -> . NE
    (64) relation -> . LT
    (65) relation -> . GT
    (66) relation -> . LTE
    (67) relation -> . GTE

    SN              shift and go to state 130
    COMPARE         shift and go to state 77
    NE              shift and go to state 78
    LT              shift and go to state 79
    GT              shift and go to state 80
    LTE             shift and go to state 81
    GTE             shift and go to state 82

    inCaseb                        shift and go to state 131
    relation                       shift and go to state 132

state 94

    (58) inCasea -> ID relation . expression
    (61) inCaseb -> relation . expression
    (68) expression -> . term
    (69) expression -> . addingOperator term
    (70) expression -> . expression addingOperator term
    (73) term -> . factor
    (74) term -> . term multiplyingOperator factor
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    ID              shift and go to state 87
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    expression                     shift and go to state 133
    term                           shift and go to state 50
    addingOperator                 shift and go to state 51
    factor                         shift and go to state 52

state 95

    (59) inCaseListb -> inCaseb .

    SN              reduce using rule 59 (inCaseListb -> inCaseb .)
    COMPARE         reduce using rule 59 (inCaseListb -> inCaseb .)
    NE              reduce using rule 59 (inCaseListb -> inCaseb .)
    LT              reduce using rule 59 (inCaseListb -> inCaseb .)
    GT              reduce using rule 59 (inCaseListb -> inCaseb .)
    LTE             reduce using rule 59 (inCaseListb -> inCaseb .)
    GTE             reduce using rule 59 (inCaseListb -> inCaseb .)


state 96

    (23) statement -> ABANICO LPARENT A . RPARENT SEMICOLOM

    RPARENT         shift and go to state 134


state 97

    (24) statement -> ABANICO LPARENT B . RPARENT SEMICOLOM

    RPARENT         shift and go to state 135


state 98

    (25) statement -> VERTICAL LPARENT D . RPARENT SEMICOLOM

    RPARENT         shift and go to state 136


state 99

    (26) statement -> VERTICAL LPARENT I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 137


state 100

    (27) statement -> PERCUTOR LPARENT A . RPARENT SEMICOLOM
    (29) statement -> PERCUTOR LPARENT A . B RPARENT SEMICOLOM

    RPARENT         shift and go to state 138
    B               shift and go to state 139


state 101

    (28) statement -> PERCUTOR LPARENT B . RPARENT SEMICOLOM

    RPARENT         shift and go to state 140


state 102

    (30) statement -> PERCUTOR LPARENT D . RPARENT SEMICOLOM
    (32) statement -> PERCUTOR LPARENT D . I RPARENT SEMICOLOM

    RPARENT         shift and go to state 141
    I               shift and go to state 142


state 103

    (31) statement -> PERCUTOR LPARENT I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 143


state 104

    (33) statement -> GOLPE LPARENT RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 144


state 105

    (34) statement -> VIBRATO LPARENT NUMBER_I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 145


state 106

    (35) statement -> METRONOMO LPARENT A . COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> METRONOMO LPARENT A . COMMA NUMBER_F RPARENT SEMICOLOM

    COMMA           shift and go to state 146


state 107

    (36) statement -> METRONOMO LPARENT D . COMMA NUMBER_I RPARENT SEMICOLOM
    (38) statement -> METRONOMO LPARENT D . COMMA NUMBER_F RPARENT SEMICOLOM

    COMMA           shift and go to state 147


state 108

    (39) statement -> PRINT LPARENT printTextList . RPARENT SEMICOLOM
    (41) printTextList -> printTextList . COMMA printText

    RPARENT         shift and go to state 148
    COMMA           shift and go to state 149


state 109

    (40) printTextList -> printText .

    RPARENT         reduce using rule 40 (printTextList -> printText .)
    COMMA           reduce using rule 40 (printTextList -> printText .)


state 110

    (42) printText -> factor .

    RPARENT         reduce using rule 42 (printText -> factor .)
    COMMA           reduce using rule 42 (printText -> factor .)


state 111

    (43) printText -> STRING .

    RPARENT         reduce using rule 43 (printText -> STRING .)
    COMMA           reduce using rule 43 (printText -> STRING .)


state 112

    (5) functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET .

    DEF             reduce using rule 5 (functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET .)
    $end            reduce using rule 5 (functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET .)


state 113

    (8) statement -> SET ID COMMA NUMBER_I . SEMICOLOM

    SEMICOLOM       shift and go to state 150


state 114

    (9) statement -> SET ID COMMA NUMBER_F . SEMICOLOM

    SEMICOLOM       shift and go to state 151


state 115

    (10) statement -> SET ID COMMA TRUE . SEMICOLOM

    SEMICOLOM       shift and go to state 152


state 116

    (11) statement -> SET ID COMMA FALSE . SEMICOLOM

    SEMICOLOM       shift and go to state 153


state 117

    (20) statement -> SET ID DOT NEG . SEMICOLOM

    SEMICOLOM       shift and go to state 154


state 118

    (21) statement -> SET ID DOT T . SEMICOLOM

    SEMICOLOM       shift and go to state 155


state 119

    (22) statement -> SET ID DOT F . SEMICOLOM

    SEMICOLOM       shift and go to state 156


state 120

    (12) statement -> EXEC ID LPARENT varList . RPARENT SEMICOLOM
    (46) varList -> varList . COMMA var

    RPARENT         shift and go to state 157
    COMMA           shift and go to state 22


state 121

    (13) statement -> TYPE LPARENT ID RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 158


state 122

    (14) statement -> IF conditionif LBRACKET statementList . RBRACKET
    (15) statement -> IF conditionif LBRACKET statementList . RBRACKET ELSE LBRACKET statementList RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 159
    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statement                      shift and go to state 41

state 123

    (52) conditionif -> expression relation expression .
    (70) expression -> expression . addingOperator term
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS

    LBRACKET        reduce using rule 52 (conditionif -> expression relation expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54

    addingOperator                 shift and go to state 76

state 124

    (70) expression -> expression addingOperator term .
    (74) term -> term . multiplyingOperator factor
    (75) multiplyingOperator -> . TIMES
    (76) multiplyingOperator -> . DIVIDE

    COMPARE         reduce using rule 70 (expression -> expression addingOperator term .)
    NE              reduce using rule 70 (expression -> expression addingOperator term .)
    LT              reduce using rule 70 (expression -> expression addingOperator term .)
    GT              reduce using rule 70 (expression -> expression addingOperator term .)
    LTE             reduce using rule 70 (expression -> expression addingOperator term .)
    GTE             reduce using rule 70 (expression -> expression addingOperator term .)
    PLUS            reduce using rule 70 (expression -> expression addingOperator term .)
    MINUS           reduce using rule 70 (expression -> expression addingOperator term .)
    RPARENT         reduce using rule 70 (expression -> expression addingOperator term .)
    LBRACKET        reduce using rule 70 (expression -> expression addingOperator term .)
    SN              reduce using rule 70 (expression -> expression addingOperator term .)
    ID              reduce using rule 70 (expression -> expression addingOperator term .)
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85

    multiplyingOperator            shift and go to state 83

state 125

    (74) term -> term multiplyingOperator factor .

    TIMES           reduce using rule 74 (term -> term multiplyingOperator factor .)
    DIVIDE          reduce using rule 74 (term -> term multiplyingOperator factor .)
    COMPARE         reduce using rule 74 (term -> term multiplyingOperator factor .)
    NE              reduce using rule 74 (term -> term multiplyingOperator factor .)
    LT              reduce using rule 74 (term -> term multiplyingOperator factor .)
    GT              reduce using rule 74 (term -> term multiplyingOperator factor .)
    LTE             reduce using rule 74 (term -> term multiplyingOperator factor .)
    GTE             reduce using rule 74 (term -> term multiplyingOperator factor .)
    PLUS            reduce using rule 74 (term -> term multiplyingOperator factor .)
    MINUS           reduce using rule 74 (term -> term multiplyingOperator factor .)
    RPARENT         reduce using rule 74 (term -> term multiplyingOperator factor .)
    LBRACKET        reduce using rule 74 (term -> term multiplyingOperator factor .)
    SN              reduce using rule 74 (term -> term multiplyingOperator factor .)
    ID              reduce using rule 74 (term -> term multiplyingOperator factor .)


state 126

    (80) factor -> LPARENT expression RPARENT .

    TIMES           reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    DIVIDE          reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    COMPARE         reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    NE              reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    LT              reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    GT              reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    LTE             reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    GTE             reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    PLUS            reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    MINUS           reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    RPARENT         reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    LBRACKET        reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    SN              reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    ID              reduce using rule 80 (factor -> LPARENT expression RPARENT .)
    COMMA           reduce using rule 80 (factor -> LPARENT expression RPARENT .)


state 127

    (16) statement -> FOR ID TO var . STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> FOR ID TO var . STEP LBRACKET statementList RBRACKET

    STEP            shift and go to state 160


state 128

    (18) statement -> EC inCaseLista SN LBRACKET . statementList RBRACKET FEC SEMICOLOM
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statementList                  shift and go to state 161
    statement                      shift and go to state 24

state 129

    (58) inCasea -> ID relation . expression
    (68) expression -> . term
    (69) expression -> . addingOperator term
    (70) expression -> . expression addingOperator term
    (73) term -> . factor
    (74) term -> . term multiplyingOperator factor
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    ID              shift and go to state 87
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    expression                     shift and go to state 162
    term                           shift and go to state 50
    addingOperator                 shift and go to state 51
    factor                         shift and go to state 52

state 130

    (19) statement -> EC ID inCaseListb SN . LBRACKET statementList RBRACKET FEC SEMICOLOM

    LBRACKET        shift and go to state 163


state 131

    (60) inCaseListb -> inCaseListb inCaseb .

    SN              reduce using rule 60 (inCaseListb -> inCaseListb inCaseb .)
    COMPARE         reduce using rule 60 (inCaseListb -> inCaseListb inCaseb .)
    NE              reduce using rule 60 (inCaseListb -> inCaseListb inCaseb .)
    LT              reduce using rule 60 (inCaseListb -> inCaseListb inCaseb .)
    GT              reduce using rule 60 (inCaseListb -> inCaseListb inCaseb .)
    LTE             reduce using rule 60 (inCaseListb -> inCaseListb inCaseb .)
    GTE             reduce using rule 60 (inCaseListb -> inCaseListb inCaseb .)


state 132

    (61) inCaseb -> relation . expression
    (68) expression -> . term
    (69) expression -> . addingOperator term
    (70) expression -> . expression addingOperator term
    (73) term -> . factor
    (74) term -> . term multiplyingOperator factor
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    ID              shift and go to state 87
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    expression                     shift and go to state 164
    term                           shift and go to state 50
    addingOperator                 shift and go to state 51
    factor                         shift and go to state 52

state 133

    (58) inCasea -> ID relation expression .
    (61) inCaseb -> relation expression .
    (70) expression -> expression . addingOperator term
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS

  ! reduce/reduce conflict for SN resolved using rule 58 (inCasea -> ID relation expression .)
    SN              reduce using rule 58 (inCasea -> ID relation expression .)
    ID              reduce using rule 58 (inCasea -> ID relation expression .)
    COMPARE         reduce using rule 61 (inCaseb -> relation expression .)
    NE              reduce using rule 61 (inCaseb -> relation expression .)
    LT              reduce using rule 61 (inCaseb -> relation expression .)
    GT              reduce using rule 61 (inCaseb -> relation expression .)
    LTE             reduce using rule 61 (inCaseb -> relation expression .)
    GTE             reduce using rule 61 (inCaseb -> relation expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54

  ! SN              [ reduce using rule 61 (inCaseb -> relation expression .) ]

    addingOperator                 shift and go to state 76

state 134

    (23) statement -> ABANICO LPARENT A RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 165


state 135

    (24) statement -> ABANICO LPARENT B RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 166


state 136

    (25) statement -> VERTICAL LPARENT D RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 167


state 137

    (26) statement -> VERTICAL LPARENT I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 168


state 138

    (27) statement -> PERCUTOR LPARENT A RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 169


state 139

    (29) statement -> PERCUTOR LPARENT A B . RPARENT SEMICOLOM

    RPARENT         shift and go to state 170


state 140

    (28) statement -> PERCUTOR LPARENT B RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 171


state 141

    (30) statement -> PERCUTOR LPARENT D RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 172


state 142

    (32) statement -> PERCUTOR LPARENT D I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 173


state 143

    (31) statement -> PERCUTOR LPARENT I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 174


state 144

    (33) statement -> GOLPE LPARENT RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    SET             reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    EXEC            reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    TYPE            reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    IF              reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    FOR             reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    EC              reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    PRINT           reduce using rule 33 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)


state 145

    (34) statement -> VIBRATO LPARENT NUMBER_I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 175


state 146

    (35) statement -> METRONOMO LPARENT A COMMA . NUMBER_I RPARENT SEMICOLOM
    (37) statement -> METRONOMO LPARENT A COMMA . NUMBER_F RPARENT SEMICOLOM

    NUMBER_I        shift and go to state 176
    NUMBER_F        shift and go to state 177


state 147

    (36) statement -> METRONOMO LPARENT D COMMA . NUMBER_I RPARENT SEMICOLOM
    (38) statement -> METRONOMO LPARENT D COMMA . NUMBER_F RPARENT SEMICOLOM

    NUMBER_I        shift and go to state 178
    NUMBER_F        shift and go to state 179


state 148

    (39) statement -> PRINT LPARENT printTextList RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 180


state 149

    (41) printTextList -> printTextList COMMA . printText
    (42) printText -> . factor
    (43) printText -> . STRING
    (77) factor -> . ID
    (78) factor -> . NUMBER_I
    (79) factor -> . NUMBER_F
    (80) factor -> . LPARENT expression RPARENT

    STRING          shift and go to state 111
    ID              shift and go to state 87
    NUMBER_I        shift and go to state 55
    NUMBER_F        shift and go to state 56
    LPARENT         shift and go to state 57

    printText                      shift and go to state 181
    factor                         shift and go to state 110

state 150

    (8) statement -> SET ID COMMA NUMBER_I SEMICOLOM .

    RBRACKET        reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    SET             reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    EXEC            reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    TYPE            reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    IF              reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    FOR             reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    EC              reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    ABANICO         reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    VERTICAL        reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    PERCUTOR        reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    GOLPE           reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    VIBRATO         reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    METRONOMO       reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)
    PRINT           reduce using rule 8 (statement -> SET ID COMMA NUMBER_I SEMICOLOM .)


state 151

    (9) statement -> SET ID COMMA NUMBER_F SEMICOLOM .

    RBRACKET        reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    SET             reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    EXEC            reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    TYPE            reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    IF              reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    FOR             reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    EC              reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    ABANICO         reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    VERTICAL        reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    PERCUTOR        reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    GOLPE           reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    VIBRATO         reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    METRONOMO       reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)
    PRINT           reduce using rule 9 (statement -> SET ID COMMA NUMBER_F SEMICOLOM .)


state 152

    (10) statement -> SET ID COMMA TRUE SEMICOLOM .

    RBRACKET        reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    SET             reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    EXEC            reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    TYPE            reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    IF              reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    FOR             reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    EC              reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    ABANICO         reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    VERTICAL        reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    PERCUTOR        reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    GOLPE           reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    VIBRATO         reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    METRONOMO       reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    PRINT           reduce using rule 10 (statement -> SET ID COMMA TRUE SEMICOLOM .)


state 153

    (11) statement -> SET ID COMMA FALSE SEMICOLOM .

    RBRACKET        reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    SET             reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    EXEC            reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    TYPE            reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    IF              reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    FOR             reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    EC              reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    ABANICO         reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    VERTICAL        reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    PERCUTOR        reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    GOLPE           reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    VIBRATO         reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    METRONOMO       reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    PRINT           reduce using rule 11 (statement -> SET ID COMMA FALSE SEMICOLOM .)


state 154

    (20) statement -> SET ID DOT NEG SEMICOLOM .

    RBRACKET        reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    SET             reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    EXEC            reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    TYPE            reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    IF              reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    FOR             reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    EC              reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    ABANICO         reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    VERTICAL        reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    PERCUTOR        reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    GOLPE           reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    VIBRATO         reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    METRONOMO       reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)
    PRINT           reduce using rule 20 (statement -> SET ID DOT NEG SEMICOLOM .)


state 155

    (21) statement -> SET ID DOT T SEMICOLOM .

    RBRACKET        reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    SET             reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    EXEC            reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    TYPE            reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    IF              reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    FOR             reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    EC              reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    ABANICO         reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    VERTICAL        reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    PERCUTOR        reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    GOLPE           reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    VIBRATO         reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    METRONOMO       reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)
    PRINT           reduce using rule 21 (statement -> SET ID DOT T SEMICOLOM .)


state 156

    (22) statement -> SET ID DOT F SEMICOLOM .

    RBRACKET        reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    SET             reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    EXEC            reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    TYPE            reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    IF              reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    FOR             reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    EC              reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    ABANICO         reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    VERTICAL        reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    PERCUTOR        reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    GOLPE           reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    VIBRATO         reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    METRONOMO       reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)
    PRINT           reduce using rule 22 (statement -> SET ID DOT F SEMICOLOM .)


state 157

    (12) statement -> EXEC ID LPARENT varList RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 182


state 158

    (13) statement -> TYPE LPARENT ID RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    SET             reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    EXEC            reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    TYPE            reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    IF              reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    FOR             reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    EC              reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    PRINT           reduce using rule 13 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)


state 159

    (14) statement -> IF conditionif LBRACKET statementList RBRACKET .
    (15) statement -> IF conditionif LBRACKET statementList RBRACKET . ELSE LBRACKET statementList RBRACKET

    RBRACKET        reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    SET             reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    EXEC            reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    TYPE            reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    IF              reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    FOR             reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    EC              reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    ABANICO         reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    VERTICAL        reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    PERCUTOR        reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    GOLPE           reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    VIBRATO         reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    METRONOMO       reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    PRINT           reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET .)
    ELSE            shift and go to state 183


state 160

    (16) statement -> FOR ID TO var STEP . NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> FOR ID TO var STEP . LBRACKET statementList RBRACKET

    NUMBER_I        shift and go to state 184
    LBRACKET        shift and go to state 185


state 161

    (18) statement -> EC inCaseLista SN LBRACKET statementList . RBRACKET FEC SEMICOLOM
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 186
    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statement                      shift and go to state 41

state 162

    (58) inCasea -> ID relation expression .
    (70) expression -> expression . addingOperator term
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS

    SN              reduce using rule 58 (inCasea -> ID relation expression .)
    ID              reduce using rule 58 (inCasea -> ID relation expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54

    addingOperator                 shift and go to state 76

state 163

    (19) statement -> EC ID inCaseListb SN LBRACKET . statementList RBRACKET FEC SEMICOLOM
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statementList                  shift and go to state 187
    statement                      shift and go to state 24

state 164

    (61) inCaseb -> relation expression .
    (70) expression -> expression . addingOperator term
    (71) addingOperator -> . PLUS
    (72) addingOperator -> . MINUS

    SN              reduce using rule 61 (inCaseb -> relation expression .)
    COMPARE         reduce using rule 61 (inCaseb -> relation expression .)
    NE              reduce using rule 61 (inCaseb -> relation expression .)
    LT              reduce using rule 61 (inCaseb -> relation expression .)
    GT              reduce using rule 61 (inCaseb -> relation expression .)
    LTE             reduce using rule 61 (inCaseb -> relation expression .)
    GTE             reduce using rule 61 (inCaseb -> relation expression .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54

    addingOperator                 shift and go to state 76

state 165

    (23) statement -> ABANICO LPARENT A RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    SET             reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    EXEC            reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    TYPE            reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    IF              reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    FOR             reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    EC              reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    PRINT           reduce using rule 23 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)


state 166

    (24) statement -> ABANICO LPARENT B RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    SET             reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    EXEC            reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    TYPE            reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    IF              reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    FOR             reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    EC              reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    PRINT           reduce using rule 24 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)


state 167

    (25) statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    SET             reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    EXEC            reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    TYPE            reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    IF              reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    FOR             reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    EC              reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    PRINT           reduce using rule 25 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)


state 168

    (26) statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    SET             reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    IF              reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    FOR             reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    EC              reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 26 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)


state 169

    (27) statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    SET             reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    EXEC            reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    TYPE            reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    IF              reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    FOR             reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    EC              reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)
    PRINT           reduce using rule 27 (statement -> PERCUTOR LPARENT A RPARENT SEMICOLOM .)


state 170

    (29) statement -> PERCUTOR LPARENT A B RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 188


state 171

    (28) statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    SET             reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    EXEC            reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    TYPE            reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    IF              reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    FOR             reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    EC              reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)
    PRINT           reduce using rule 28 (statement -> PERCUTOR LPARENT B RPARENT SEMICOLOM .)


state 172

    (30) statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    SET             reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    EXEC            reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    TYPE            reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    IF              reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    FOR             reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    EC              reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)
    PRINT           reduce using rule 30 (statement -> PERCUTOR LPARENT D RPARENT SEMICOLOM .)


state 173

    (32) statement -> PERCUTOR LPARENT D I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 189


state 174

    (31) statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    SET             reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    IF              reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    FOR             reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    EC              reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 31 (statement -> PERCUTOR LPARENT I RPARENT SEMICOLOM .)


state 175

    (34) statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    SET             reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    IF              reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    FOR             reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    EC              reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 34 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)


state 176

    (35) statement -> METRONOMO LPARENT A COMMA NUMBER_I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 190


state 177

    (37) statement -> METRONOMO LPARENT A COMMA NUMBER_F . RPARENT SEMICOLOM

    RPARENT         shift and go to state 191


state 178

    (36) statement -> METRONOMO LPARENT D COMMA NUMBER_I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 192


state 179

    (38) statement -> METRONOMO LPARENT D COMMA NUMBER_F . RPARENT SEMICOLOM

    RPARENT         shift and go to state 193


state 180

    (39) statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    SET             reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    EXEC            reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    TYPE            reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    IF              reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    FOR             reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    EC              reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    PRINT           reduce using rule 39 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)


state 181

    (41) printTextList -> printTextList COMMA printText .

    RPARENT         reduce using rule 41 (printTextList -> printTextList COMMA printText .)
    COMMA           reduce using rule 41 (printTextList -> printTextList COMMA printText .)


state 182

    (12) statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    SET             reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    EXEC            reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    TYPE            reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    IF              reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    FOR             reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    EC              reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    PRINT           reduce using rule 12 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)


state 183

    (15) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 194


state 184

    (16) statement -> FOR ID TO var STEP NUMBER_I . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 195


state 185

    (17) statement -> FOR ID TO var STEP LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statementList                  shift and go to state 196
    statement                      shift and go to state 24

state 186

    (18) statement -> EC inCaseLista SN LBRACKET statementList RBRACKET . FEC SEMICOLOM

    FEC             shift and go to state 197


state 187

    (19) statement -> EC ID inCaseListb SN LBRACKET statementList . RBRACKET FEC SEMICOLOM
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 198
    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statement                      shift and go to state 41

state 188

    (29) statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    SET             reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    EXEC            reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    TYPE            reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    IF              reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    FOR             reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    EC              reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    PRINT           reduce using rule 29 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)


state 189

    (32) statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    SET             reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    IF              reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    FOR             reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    EC              reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 32 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)


state 190

    (35) statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 199


state 191

    (37) statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 200


state 192

    (36) statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 201


state 193

    (38) statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 202


state 194

    (15) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statementList                  shift and go to state 203
    statement                      shift and go to state 24

state 195

    (16) statement -> FOR ID TO var STEP NUMBER_I LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statementList                  shift and go to state 204
    statement                      shift and go to state 24

state 196

    (17) statement -> FOR ID TO var STEP LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 205
    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statement                      shift and go to state 41

state 197

    (18) statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC . SEMICOLOM

    SEMICOLOM       shift and go to state 206


state 198

    (19) statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET . FEC SEMICOLOM

    FEC             shift and go to state 207


state 199

    (35) statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    SET             reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    IF              reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    FOR             reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    EC              reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 35 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)


state 200

    (37) statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    SET             reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    EXEC            reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    TYPE            reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    IF              reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    FOR             reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    EC              reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    PRINT           reduce using rule 37 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)


state 201

    (36) statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    SET             reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    IF              reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    FOR             reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    EC              reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 36 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)


state 202

    (38) statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    SET             reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    EXEC            reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    TYPE            reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    IF              reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    FOR             reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    EC              reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    PRINT           reduce using rule 38 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)


state 203

    (15) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 208
    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statement                      shift and go to state 41

state 204

    (16) statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA NUMBER_I SEMICOLOM
    (9) statement -> . SET ID COMMA NUMBER_F SEMICOLOM
    (10) statement -> . SET ID COMMA TRUE SEMICOLOM
    (11) statement -> . SET ID COMMA FALSE SEMICOLOM
    (12) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (13) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET
    (15) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET
    (17) statement -> . FOR ID TO var STEP LBRACKET statementList RBRACKET
    (18) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (20) statement -> . SET ID DOT NEG SEMICOLOM
    (21) statement -> . SET ID DOT T SEMICOLOM
    (22) statement -> . SET ID DOT F SEMICOLOM
    (23) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (24) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (26) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT A RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT D RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT I RPARENT SEMICOLOM
    (32) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (33) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (34) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (39) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 209
    SET             shift and go to state 25
    EXEC            shift and go to state 26
    TYPE            shift and go to state 27
    IF              shift and go to state 28
    FOR             shift and go to state 29
    EC              shift and go to state 30
    ABANICO         shift and go to state 31
    VERTICAL        shift and go to state 32
    PERCUTOR        shift and go to state 33
    GOLPE           shift and go to state 34
    VIBRATO         shift and go to state 35
    METRONOMO       shift and go to state 36
    PRINT           shift and go to state 37

    statement                      shift and go to state 41

state 205

    (17) statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .

    RBRACKET        reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    SET             reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    EXEC            reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    TYPE            reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    IF              reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    FOR             reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    EC              reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    ABANICO         reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    VERTICAL        reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    PERCUTOR        reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    GOLPE           reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    VIBRATO         reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    METRONOMO       reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)
    PRINT           reduce using rule 17 (statement -> FOR ID TO var STEP LBRACKET statementList RBRACKET .)


state 206

    (18) statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .

    RBRACKET        reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    SET             reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EXEC            reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    TYPE            reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    IF              reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    FOR             reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EC              reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    ABANICO         reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VERTICAL        reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PERCUTOR        reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    GOLPE           reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VIBRATO         reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    METRONOMO       reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PRINT           reduce using rule 18 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)


state 207

    (19) statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC . SEMICOLOM

    SEMICOLOM       shift and go to state 210


state 208

    (15) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .

    RBRACKET        reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    SET             reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    EXEC            reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    TYPE            reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    IF              reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    FOR             reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    EC              reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    ABANICO         reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    VERTICAL        reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    PERCUTOR        reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    GOLPE           reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    VIBRATO         reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    METRONOMO       reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    PRINT           reduce using rule 15 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)


state 209

    (16) statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .

    RBRACKET        reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    SET             reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    EXEC            reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    TYPE            reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    IF              reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    FOR             reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    EC              reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    ABANICO         reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    VERTICAL        reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    PERCUTOR        reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    GOLPE           reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    VIBRATO         reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    METRONOMO       reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)
    PRINT           reduce using rule 16 (statement -> FOR ID TO var STEP NUMBER_I LBRACKET statementList RBRACKET .)


state 210

    (19) statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .

    RBRACKET        reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    SET             reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EXEC            reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    TYPE            reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    IF              reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    FOR             reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EC              reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    ABANICO         reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VERTICAL        reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PERCUTOR        reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    GOLPE           reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VIBRATO         reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    METRONOMO       reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PRINT           reduce using rule 19 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 133 resolved using rule (inCasea -> ID relation expression)
WARNING: rejected rule (inCaseb -> relation expression) in state 133
