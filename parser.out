Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    SPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> prinDecl program
Rule 2     program -> functionDecl program
Rule 3     program -> empty empty
Rule 4     prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
Rule 5     functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
Rule 6     statementList -> statement
Rule 7     statementList -> statementList statement
Rule 8     statement -> SET ID COMMA TRUE SEMICOLOM
Rule 9     statement -> SET ID COMMA FALSE SEMICOLOM
Rule 10    statement -> SET ID COMMA expression SEMICOLOM
Rule 11    statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM
Rule 12    statement -> TYPE LPARENT ID RPARENT SEMICOLOM
Rule 13    statement -> IF conditionif LBRACKET statementList RBRACKET empty
Rule 14    statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
Rule 15    statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
Rule 16    statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
Rule 17    statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
Rule 18    statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
Rule 19    statement -> SET ID DOT NEG SEMICOLOM
Rule 20    statement -> SET ID DOT T SEMICOLOM
Rule 21    statement -> SET ID DOT F SEMICOLOM
Rule 22    statement -> ABANICO LPARENT A RPARENT SEMICOLOM
Rule 23    statement -> ABANICO LPARENT B RPARENT SEMICOLOM
Rule 24    statement -> VERTICAL LPARENT D RPARENT SEMICOLOM
Rule 25    statement -> VERTICAL LPARENT I RPARENT SEMICOLOM
Rule 26    statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM
Rule 27    statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM
Rule 28    statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM
Rule 29    statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM
Rule 30    statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM
Rule 31    statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM
Rule 32    statement -> GOLPE LPARENT RPARENT SEMICOLOM
Rule 33    statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
Rule 34    statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
Rule 35    statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
Rule 36    statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
Rule 37    statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
Rule 38    statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM
Rule 39    printTextList -> printText
Rule 40    printTextList -> printTextList COMMA printText
Rule 41    printText -> var
Rule 42    printText -> STRING
Rule 43    varList -> var
Rule 44    varList -> empty
Rule 45    varList -> varList COMMA var
Rule 46    var -> ID
Rule 47    var -> NUMBER_I
Rule 48    var -> NUMBER_F
Rule 49    var -> TRUE
Rule 50    var -> FALSE
Rule 51    conditionif -> expression relation expression
Rule 52    conditionif -> TRUE
Rule 53    conditionif -> FALSE
Rule 54    conditionif -> ID
Rule 55    inCaseLista -> inCasea
Rule 56    inCaseLista -> inCaseLista inCasea
Rule 57    inCasea -> CUANDO ID relation expression ET LBRACKET statementList RBRACKET
Rule 58    inCaseListb -> inCaseb
Rule 59    inCaseListb -> inCaseListb inCaseb
Rule 60    inCaseb -> CUANDO relation expression ET LBRACKET statementList RBRACKET
Rule 61    relation -> COMPARE
Rule 62    relation -> NE
Rule 63    relation -> LT
Rule 64    relation -> GT
Rule 65    relation -> LTE
Rule 66    relation -> GTE
Rule 67    expression -> term
Rule 68    expression -> addingOperator term
Rule 69    expression -> expression addingOperator term
Rule 70    addingOperator -> PLUS
Rule 71    addingOperator -> MINUS
Rule 72    term -> factor
Rule 73    term -> term multiplyingOperator factor
Rule 74    multiplyingOperator -> TIMES
Rule 75    multiplyingOperator -> DIVIDE
Rule 76    multiplyingOperator -> DIVIDE_E
Rule 77    factor -> factorM
Rule 78    factor -> factor MODULE factorM
Rule 79    factorM -> index
Rule 80    factorM -> factorM EXPONENT index
Rule 81    index -> empty NUMBER_I
Rule 82    index -> empty NUMBER_F
Rule 83    index -> addingOperator NUMBER_I
Rule 84    index -> addingOperator NUMBER_F
Rule 85    index -> addingOperator ID
Rule 86    index -> empty ID
Rule 87    index -> LPARENT expression RPARENT
Rule 88    empty -> <empty>

Terminals, with rules where they appear

A                    : 22 26 28 34 36
ABANICO              : 22 23
ASSIGN               : 
B                    : 23 27 28
COMMA                : 8 9 10 34 35 36 37 40 45
COMPARE              : 61
CUANDO               : 57 60
D                    : 24 29 31 35 37
DEF                  : 4 5
DIVIDE               : 75
DIVIDE_E             : 76
DOT                  : 19 20 21
EC                   : 17 18
ELSE                 : 14
ET                   : 57 60
EXEC                 : 11
EXPONENT             : 80
F                    : 21
FALSE                : 9 50 53
FEC                  : 17 18
FOR                  : 15 16
GOLPE                : 32
GT                   : 64
GTE                  : 66
I                    : 25 30 31
ID                   : 5 8 9 10 11 12 15 16 18 19 20 21 46 54 57 85 86
IF                   : 13 14
LBRACKET             : 4 5 13 14 14 15 16 17 18 57 60
LPARENT              : 4 5 11 12 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 87
LT                   : 63
LTE                  : 65
METRONOMO            : 34 35 36 37
MINUS                : 71
MODULE               : 78
NE                   : 62
NEG                  : 19
NUMBER_F             : 36 37 48 82 84
NUMBER_I             : 15 33 34 35 47 81 83
PERCUTOR             : 26 27 28 29 30 31
PLUS                 : 70
PRIN                 : 4
PRINT                : 38
RBRACKET             : 4 5 13 14 14 15 16 17 18 57 60
RPARENT              : 4 5 11 12 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 87
SEMICOLOM            : 8 9 10 11 12 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
SET                  : 8 9 10 19 20 21
SN                   : 17 18
SPACE                : 
STEP                 : 15 16
STRING               : 42
T                    : 20
TIMES                : 74
TO                   : 15 16
TRUE                 : 8 49 52
TYPE                 : 12
VERTICAL             : 24 25
VIBRATO              : 33
error                : 

Nonterminals, with rules where they appear

addingOperator       : 68 69 83 84 85
conditionif          : 13 14
empty                : 3 3 13 16 26 27 29 30 44 81 82 86
expression           : 10 15 16 51 51 57 60 69 87
factor               : 72 73 78
factorM              : 77 78 80
functionDecl         : 2
inCaseLista          : 17 56
inCaseListb          : 18 59
inCasea              : 55 56
inCaseb              : 58 59
index                : 79 80
multiplyingOperator  : 73
prinDecl             : 1
printText            : 39 40
printTextList        : 38 40
program              : 1 2 0
relation             : 51 57 60
statement            : 6 7
statementList        : 4 5 7 13 14 14 15 16 17 18 57 60
term                 : 67 68 69 73
var                  : 41 43 45
varList              : 5 11 45

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . prinDecl program
    (2) program -> . functionDecl program
    (3) program -> . empty empty
    (4) prinDecl -> . DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> . DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
    (88) empty -> .

    DEF             shift and go to state 5
    $end            reduce using rule 88 (empty -> .)

    program                        shift and go to state 1
    prinDecl                       shift and go to state 2
    functionDecl                   shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> prinDecl . program
    (1) program -> . prinDecl program
    (2) program -> . functionDecl program
    (3) program -> . empty empty
    (4) prinDecl -> . DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> . DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
    (88) empty -> .

    DEF             shift and go to state 5
    $end            reduce using rule 88 (empty -> .)

    prinDecl                       shift and go to state 2
    program                        shift and go to state 6
    functionDecl                   shift and go to state 3
    empty                          shift and go to state 4

state 3

    (2) program -> functionDecl . program
    (1) program -> . prinDecl program
    (2) program -> . functionDecl program
    (3) program -> . empty empty
    (4) prinDecl -> . DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> . DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET
    (88) empty -> .

    DEF             shift and go to state 5
    $end            reduce using rule 88 (empty -> .)

    functionDecl                   shift and go to state 3
    program                        shift and go to state 7
    prinDecl                       shift and go to state 2
    empty                          shift and go to state 4

state 4

    (3) program -> empty . empty
    (88) empty -> .

    $end            reduce using rule 88 (empty -> .)

    empty                          shift and go to state 8

state 5

    (4) prinDecl -> DEF . PRIN LPARENT RPARENT LBRACKET statementList RBRACKET
    (5) functionDecl -> DEF . ID LPARENT varList RPARENT LBRACKET statementList RBRACKET

    PRIN            shift and go to state 9
    ID              shift and go to state 10


state 6

    (1) program -> prinDecl program .

    $end            reduce using rule 1 (program -> prinDecl program .)


state 7

    (2) program -> functionDecl program .

    $end            reduce using rule 2 (program -> functionDecl program .)


state 8

    (3) program -> empty empty .

    $end            reduce using rule 3 (program -> empty empty .)


state 9

    (4) prinDecl -> DEF PRIN . LPARENT RPARENT LBRACKET statementList RBRACKET

    LPARENT         shift and go to state 11


state 10

    (5) functionDecl -> DEF ID . LPARENT varList RPARENT LBRACKET statementList RBRACKET

    LPARENT         shift and go to state 12


state 11

    (4) prinDecl -> DEF PRIN LPARENT . RPARENT LBRACKET statementList RBRACKET

    RPARENT         shift and go to state 13


state 12

    (5) functionDecl -> DEF ID LPARENT . varList RPARENT LBRACKET statementList RBRACKET
    (43) varList -> . var
    (44) varList -> . empty
    (45) varList -> . varList COMMA var
    (46) var -> . ID
    (47) var -> . NUMBER_I
    (48) var -> . NUMBER_F
    (49) var -> . TRUE
    (50) var -> . FALSE
    (88) empty -> .

    ID              shift and go to state 14
    NUMBER_I        shift and go to state 18
    NUMBER_F        shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    RPARENT         reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)

    varList                        shift and go to state 15
    var                            shift and go to state 16
    empty                          shift and go to state 17

state 13

    (4) prinDecl -> DEF PRIN LPARENT RPARENT . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 22


state 14

    (46) var -> ID .

    RPARENT         reduce using rule 46 (var -> ID .)
    COMMA           reduce using rule 46 (var -> ID .)


state 15

    (5) functionDecl -> DEF ID LPARENT varList . RPARENT LBRACKET statementList RBRACKET
    (45) varList -> varList . COMMA var

    RPARENT         shift and go to state 23
    COMMA           shift and go to state 24


state 16

    (43) varList -> var .

    RPARENT         reduce using rule 43 (varList -> var .)
    COMMA           reduce using rule 43 (varList -> var .)


state 17

    (44) varList -> empty .

    RPARENT         reduce using rule 44 (varList -> empty .)
    COMMA           reduce using rule 44 (varList -> empty .)


state 18

    (47) var -> NUMBER_I .

    RPARENT         reduce using rule 47 (var -> NUMBER_I .)
    COMMA           reduce using rule 47 (var -> NUMBER_I .)


state 19

    (48) var -> NUMBER_F .

    RPARENT         reduce using rule 48 (var -> NUMBER_F .)
    COMMA           reduce using rule 48 (var -> NUMBER_F .)


state 20

    (49) var -> TRUE .

    RPARENT         reduce using rule 49 (var -> TRUE .)
    COMMA           reduce using rule 49 (var -> TRUE .)


state 21

    (50) var -> FALSE .

    RPARENT         reduce using rule 50 (var -> FALSE .)
    COMMA           reduce using rule 50 (var -> FALSE .)


state 22

    (4) prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 25
    statement                      shift and go to state 26

state 23

    (5) functionDecl -> DEF ID LPARENT varList RPARENT . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 40


state 24

    (45) varList -> varList COMMA . var
    (46) var -> . ID
    (47) var -> . NUMBER_I
    (48) var -> . NUMBER_F
    (49) var -> . TRUE
    (50) var -> . FALSE

    ID              shift and go to state 14
    NUMBER_I        shift and go to state 18
    NUMBER_F        shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21

    var                            shift and go to state 41

state 25

    (4) prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 42
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 26

    (6) statementList -> statement .

    RBRACKET        reduce using rule 6 (statementList -> statement .)
    SET             reduce using rule 6 (statementList -> statement .)
    EXEC            reduce using rule 6 (statementList -> statement .)
    TYPE            reduce using rule 6 (statementList -> statement .)
    IF              reduce using rule 6 (statementList -> statement .)
    FOR             reduce using rule 6 (statementList -> statement .)
    EC              reduce using rule 6 (statementList -> statement .)
    ABANICO         reduce using rule 6 (statementList -> statement .)
    VERTICAL        reduce using rule 6 (statementList -> statement .)
    PERCUTOR        reduce using rule 6 (statementList -> statement .)
    GOLPE           reduce using rule 6 (statementList -> statement .)
    VIBRATO         reduce using rule 6 (statementList -> statement .)
    METRONOMO       reduce using rule 6 (statementList -> statement .)
    PRINT           reduce using rule 6 (statementList -> statement .)


state 27

    (8) statement -> SET . ID COMMA TRUE SEMICOLOM
    (9) statement -> SET . ID COMMA FALSE SEMICOLOM
    (10) statement -> SET . ID COMMA expression SEMICOLOM
    (19) statement -> SET . ID DOT NEG SEMICOLOM
    (20) statement -> SET . ID DOT T SEMICOLOM
    (21) statement -> SET . ID DOT F SEMICOLOM

    ID              shift and go to state 44


state 28

    (11) statement -> EXEC . ID LPARENT varList RPARENT SEMICOLOM

    ID              shift and go to state 45


state 29

    (12) statement -> TYPE . LPARENT ID RPARENT SEMICOLOM

    LPARENT         shift and go to state 46


state 30

    (13) statement -> IF . conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> IF . conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (51) conditionif -> . expression relation expression
    (52) conditionif -> . TRUE
    (53) conditionif -> . FALSE
    (54) conditionif -> . ID
    (67) expression -> . term
    (68) expression -> . addingOperator term
    (69) expression -> . expression addingOperator term
    (72) term -> . factor
    (73) term -> . term multiplyingOperator factor
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS
    (77) factor -> . factorM
    (78) factor -> . factor MODULE factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    ID              shift and go to state 52
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)

  ! ID              [ reduce using rule 88 (empty -> .) ]

    conditionif                    shift and go to state 47
    empty                          shift and go to state 48
    expression                     shift and go to state 49
    term                           shift and go to state 53
    addingOperator                 shift and go to state 54
    factor                         shift and go to state 55
    factorM                        shift and go to state 58
    index                          shift and go to state 59

state 31

    (15) statement -> FOR . ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> FOR . ID TO expression STEP empty LBRACKET statementList RBRACKET

    ID              shift and go to state 61


state 32

    (17) statement -> EC . inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> EC . ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (55) inCaseLista -> . inCasea
    (56) inCaseLista -> . inCaseLista inCasea
    (57) inCasea -> . CUANDO ID relation expression ET LBRACKET statementList RBRACKET

    ID              shift and go to state 63
    CUANDO          shift and go to state 65

    inCaseLista                    shift and go to state 62
    inCasea                        shift and go to state 64

state 33

    (22) statement -> ABANICO . LPARENT A RPARENT SEMICOLOM
    (23) statement -> ABANICO . LPARENT B RPARENT SEMICOLOM

    LPARENT         shift and go to state 66


state 34

    (24) statement -> VERTICAL . LPARENT D RPARENT SEMICOLOM
    (25) statement -> VERTICAL . LPARENT I RPARENT SEMICOLOM

    LPARENT         shift and go to state 67


state 35

    (26) statement -> PERCUTOR . LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> PERCUTOR . LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> PERCUTOR . LPARENT A B RPARENT SEMICOLOM
    (29) statement -> PERCUTOR . LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> PERCUTOR . LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> PERCUTOR . LPARENT D I RPARENT SEMICOLOM

    LPARENT         shift and go to state 68


state 36

    (32) statement -> GOLPE . LPARENT RPARENT SEMICOLOM

    LPARENT         shift and go to state 69


state 37

    (33) statement -> VIBRATO . LPARENT NUMBER_I RPARENT SEMICOLOM

    LPARENT         shift and go to state 70


state 38

    (34) statement -> METRONOMO . LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> METRONOMO . LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> METRONOMO . LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> METRONOMO . LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM

    LPARENT         shift and go to state 71


state 39

    (38) statement -> PRINT . LPARENT printTextList RPARENT SEMICOLOM

    LPARENT         shift and go to state 72


state 40

    (5) functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 73
    statement                      shift and go to state 26

state 41

    (45) varList -> varList COMMA var .

    RPARENT         reduce using rule 45 (varList -> varList COMMA var .)
    COMMA           reduce using rule 45 (varList -> varList COMMA var .)


state 42

    (4) prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET .

    DEF             reduce using rule 4 (prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET .)
    $end            reduce using rule 4 (prinDecl -> DEF PRIN LPARENT RPARENT LBRACKET statementList RBRACKET .)


state 43

    (7) statementList -> statementList statement .

    RBRACKET        reduce using rule 7 (statementList -> statementList statement .)
    SET             reduce using rule 7 (statementList -> statementList statement .)
    EXEC            reduce using rule 7 (statementList -> statementList statement .)
    TYPE            reduce using rule 7 (statementList -> statementList statement .)
    IF              reduce using rule 7 (statementList -> statementList statement .)
    FOR             reduce using rule 7 (statementList -> statementList statement .)
    EC              reduce using rule 7 (statementList -> statementList statement .)
    ABANICO         reduce using rule 7 (statementList -> statementList statement .)
    VERTICAL        reduce using rule 7 (statementList -> statementList statement .)
    PERCUTOR        reduce using rule 7 (statementList -> statementList statement .)
    GOLPE           reduce using rule 7 (statementList -> statementList statement .)
    VIBRATO         reduce using rule 7 (statementList -> statementList statement .)
    METRONOMO       reduce using rule 7 (statementList -> statementList statement .)
    PRINT           reduce using rule 7 (statementList -> statementList statement .)


state 44

    (8) statement -> SET ID . COMMA TRUE SEMICOLOM
    (9) statement -> SET ID . COMMA FALSE SEMICOLOM
    (10) statement -> SET ID . COMMA expression SEMICOLOM
    (19) statement -> SET ID . DOT NEG SEMICOLOM
    (20) statement -> SET ID . DOT T SEMICOLOM
    (21) statement -> SET ID . DOT F SEMICOLOM

    COMMA           shift and go to state 74
    DOT             shift and go to state 75


state 45

    (11) statement -> EXEC ID . LPARENT varList RPARENT SEMICOLOM

    LPARENT         shift and go to state 76


state 46

    (12) statement -> TYPE LPARENT . ID RPARENT SEMICOLOM

    ID              shift and go to state 77


state 47

    (13) statement -> IF conditionif . LBRACKET statementList RBRACKET empty
    (14) statement -> IF conditionif . LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 78


state 48

    (81) index -> empty . NUMBER_I
    (82) index -> empty . NUMBER_F
    (86) index -> empty . ID

    NUMBER_I        shift and go to state 79
    NUMBER_F        shift and go to state 80
    ID              shift and go to state 81


state 49

    (51) conditionif -> expression . relation expression
    (69) expression -> expression . addingOperator term
    (61) relation -> . COMPARE
    (62) relation -> . NE
    (63) relation -> . LT
    (64) relation -> . GT
    (65) relation -> . LTE
    (66) relation -> . GTE
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    COMPARE         shift and go to state 84
    NE              shift and go to state 85
    LT              shift and go to state 86
    GT              shift and go to state 87
    LTE             shift and go to state 88
    GTE             shift and go to state 89
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    relation                       shift and go to state 82
    addingOperator                 shift and go to state 83

state 50

    (52) conditionif -> TRUE .

    LBRACKET        reduce using rule 52 (conditionif -> TRUE .)


state 51

    (53) conditionif -> FALSE .

    LBRACKET        reduce using rule 53 (conditionif -> FALSE .)


state 52

    (54) conditionif -> ID .

    LBRACKET        reduce using rule 54 (conditionif -> ID .)


state 53

    (67) expression -> term .
    (73) term -> term . multiplyingOperator factor
    (74) multiplyingOperator -> . TIMES
    (75) multiplyingOperator -> . DIVIDE
    (76) multiplyingOperator -> . DIVIDE_E

    COMPARE         reduce using rule 67 (expression -> term .)
    NE              reduce using rule 67 (expression -> term .)
    LT              reduce using rule 67 (expression -> term .)
    GT              reduce using rule 67 (expression -> term .)
    LTE             reduce using rule 67 (expression -> term .)
    GTE             reduce using rule 67 (expression -> term .)
    PLUS            reduce using rule 67 (expression -> term .)
    MINUS           reduce using rule 67 (expression -> term .)
    RPARENT         reduce using rule 67 (expression -> term .)
    SEMICOLOM       reduce using rule 67 (expression -> term .)
    LBRACKET        reduce using rule 67 (expression -> term .)
    STEP            reduce using rule 67 (expression -> term .)
    ET              reduce using rule 67 (expression -> term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    DIVIDE_E        shift and go to state 93

    multiplyingOperator            shift and go to state 90

state 54

    (68) expression -> addingOperator . term
    (83) index -> addingOperator . NUMBER_I
    (84) index -> addingOperator . NUMBER_F
    (85) index -> addingOperator . ID
    (72) term -> . factor
    (73) term -> . term multiplyingOperator factor
    (77) factor -> . factorM
    (78) factor -> . factor MODULE factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

  ! shift/reduce conflict for NUMBER_I resolved as shift
  ! shift/reduce conflict for NUMBER_F resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    NUMBER_I        shift and go to state 96
    NUMBER_F        shift and go to state 97
    ID              shift and go to state 98
    LPARENT         shift and go to state 60
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

  ! NUMBER_I        [ reduce using rule 88 (empty -> .) ]
  ! NUMBER_F        [ reduce using rule 88 (empty -> .) ]
  ! ID              [ reduce using rule 88 (empty -> .) ]

    addingOperator                 shift and go to state 94
    term                           shift and go to state 95
    factor                         shift and go to state 55
    factorM                        shift and go to state 58
    index                          shift and go to state 59
    empty                          shift and go to state 48

state 55

    (72) term -> factor .
    (78) factor -> factor . MODULE factorM

    TIMES           reduce using rule 72 (term -> factor .)
    DIVIDE          reduce using rule 72 (term -> factor .)
    DIVIDE_E        reduce using rule 72 (term -> factor .)
    COMPARE         reduce using rule 72 (term -> factor .)
    NE              reduce using rule 72 (term -> factor .)
    LT              reduce using rule 72 (term -> factor .)
    GT              reduce using rule 72 (term -> factor .)
    LTE             reduce using rule 72 (term -> factor .)
    GTE             reduce using rule 72 (term -> factor .)
    PLUS            reduce using rule 72 (term -> factor .)
    MINUS           reduce using rule 72 (term -> factor .)
    RPARENT         reduce using rule 72 (term -> factor .)
    SEMICOLOM       reduce using rule 72 (term -> factor .)
    LBRACKET        reduce using rule 72 (term -> factor .)
    STEP            reduce using rule 72 (term -> factor .)
    ET              reduce using rule 72 (term -> factor .)
    MODULE          shift and go to state 99


state 56

    (70) addingOperator -> PLUS .

    NUMBER_I        reduce using rule 70 (addingOperator -> PLUS .)
    NUMBER_F        reduce using rule 70 (addingOperator -> PLUS .)
    ID              reduce using rule 70 (addingOperator -> PLUS .)
    LPARENT         reduce using rule 70 (addingOperator -> PLUS .)
    PLUS            reduce using rule 70 (addingOperator -> PLUS .)
    MINUS           reduce using rule 70 (addingOperator -> PLUS .)


state 57

    (71) addingOperator -> MINUS .

    NUMBER_I        reduce using rule 71 (addingOperator -> MINUS .)
    NUMBER_F        reduce using rule 71 (addingOperator -> MINUS .)
    ID              reduce using rule 71 (addingOperator -> MINUS .)
    LPARENT         reduce using rule 71 (addingOperator -> MINUS .)
    PLUS            reduce using rule 71 (addingOperator -> MINUS .)
    MINUS           reduce using rule 71 (addingOperator -> MINUS .)


state 58

    (77) factor -> factorM .
    (80) factorM -> factorM . EXPONENT index

    MODULE          reduce using rule 77 (factor -> factorM .)
    TIMES           reduce using rule 77 (factor -> factorM .)
    DIVIDE          reduce using rule 77 (factor -> factorM .)
    DIVIDE_E        reduce using rule 77 (factor -> factorM .)
    COMPARE         reduce using rule 77 (factor -> factorM .)
    NE              reduce using rule 77 (factor -> factorM .)
    LT              reduce using rule 77 (factor -> factorM .)
    GT              reduce using rule 77 (factor -> factorM .)
    LTE             reduce using rule 77 (factor -> factorM .)
    GTE             reduce using rule 77 (factor -> factorM .)
    PLUS            reduce using rule 77 (factor -> factorM .)
    MINUS           reduce using rule 77 (factor -> factorM .)
    RPARENT         reduce using rule 77 (factor -> factorM .)
    SEMICOLOM       reduce using rule 77 (factor -> factorM .)
    LBRACKET        reduce using rule 77 (factor -> factorM .)
    STEP            reduce using rule 77 (factor -> factorM .)
    ET              reduce using rule 77 (factor -> factorM .)
    EXPONENT        shift and go to state 100


state 59

    (79) factorM -> index .

    EXPONENT        reduce using rule 79 (factorM -> index .)
    MODULE          reduce using rule 79 (factorM -> index .)
    TIMES           reduce using rule 79 (factorM -> index .)
    DIVIDE          reduce using rule 79 (factorM -> index .)
    DIVIDE_E        reduce using rule 79 (factorM -> index .)
    COMPARE         reduce using rule 79 (factorM -> index .)
    NE              reduce using rule 79 (factorM -> index .)
    LT              reduce using rule 79 (factorM -> index .)
    GT              reduce using rule 79 (factorM -> index .)
    LTE             reduce using rule 79 (factorM -> index .)
    GTE             reduce using rule 79 (factorM -> index .)
    PLUS            reduce using rule 79 (factorM -> index .)
    MINUS           reduce using rule 79 (factorM -> index .)
    RPARENT         reduce using rule 79 (factorM -> index .)
    SEMICOLOM       reduce using rule 79 (factorM -> index .)
    LBRACKET        reduce using rule 79 (factorM -> index .)
    STEP            reduce using rule 79 (factorM -> index .)
    ET              reduce using rule 79 (factorM -> index .)


state 60

    (87) index -> LPARENT . expression RPARENT
    (67) expression -> . term
    (68) expression -> . addingOperator term
    (69) expression -> . expression addingOperator term
    (72) term -> . factor
    (73) term -> . term multiplyingOperator factor
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS
    (77) factor -> . factorM
    (78) factor -> . factor MODULE factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)

    expression                     shift and go to state 101
    term                           shift and go to state 53
    addingOperator                 shift and go to state 54
    factor                         shift and go to state 55
    factorM                        shift and go to state 58
    index                          shift and go to state 59
    empty                          shift and go to state 48

state 61

    (15) statement -> FOR ID . TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> FOR ID . TO expression STEP empty LBRACKET statementList RBRACKET

    TO              shift and go to state 102


state 62

    (17) statement -> EC inCaseLista . SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (56) inCaseLista -> inCaseLista . inCasea
    (57) inCasea -> . CUANDO ID relation expression ET LBRACKET statementList RBRACKET

    SN              shift and go to state 103
    CUANDO          shift and go to state 65

    inCasea                        shift and go to state 104

state 63

    (18) statement -> EC ID . inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (58) inCaseListb -> . inCaseb
    (59) inCaseListb -> . inCaseListb inCaseb
    (60) inCaseb -> . CUANDO relation expression ET LBRACKET statementList RBRACKET

    CUANDO          shift and go to state 107

    inCaseListb                    shift and go to state 105
    inCaseb                        shift and go to state 106

state 64

    (55) inCaseLista -> inCasea .

    SN              reduce using rule 55 (inCaseLista -> inCasea .)
    CUANDO          reduce using rule 55 (inCaseLista -> inCasea .)


state 65

    (57) inCasea -> CUANDO . ID relation expression ET LBRACKET statementList RBRACKET

    ID              shift and go to state 108


state 66

    (22) statement -> ABANICO LPARENT . A RPARENT SEMICOLOM
    (23) statement -> ABANICO LPARENT . B RPARENT SEMICOLOM

    A               shift and go to state 109
    B               shift and go to state 110


state 67

    (24) statement -> VERTICAL LPARENT . D RPARENT SEMICOLOM
    (25) statement -> VERTICAL LPARENT . I RPARENT SEMICOLOM

    D               shift and go to state 111
    I               shift and go to state 112


state 68

    (26) statement -> PERCUTOR LPARENT . A empty RPARENT SEMICOLOM
    (27) statement -> PERCUTOR LPARENT . B empty RPARENT SEMICOLOM
    (28) statement -> PERCUTOR LPARENT . A B RPARENT SEMICOLOM
    (29) statement -> PERCUTOR LPARENT . D empty RPARENT SEMICOLOM
    (30) statement -> PERCUTOR LPARENT . I empty RPARENT SEMICOLOM
    (31) statement -> PERCUTOR LPARENT . D I RPARENT SEMICOLOM

    A               shift and go to state 113
    B               shift and go to state 114
    D               shift and go to state 115
    I               shift and go to state 116


state 69

    (32) statement -> GOLPE LPARENT . RPARENT SEMICOLOM

    RPARENT         shift and go to state 117


state 70

    (33) statement -> VIBRATO LPARENT . NUMBER_I RPARENT SEMICOLOM

    NUMBER_I        shift and go to state 118


state 71

    (34) statement -> METRONOMO LPARENT . A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> METRONOMO LPARENT . D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> METRONOMO LPARENT . A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> METRONOMO LPARENT . D COMMA NUMBER_F RPARENT SEMICOLOM

    A               shift and go to state 119
    D               shift and go to state 120


state 72

    (38) statement -> PRINT LPARENT . printTextList RPARENT SEMICOLOM
    (39) printTextList -> . printText
    (40) printTextList -> . printTextList COMMA printText
    (41) printText -> . var
    (42) printText -> . STRING
    (46) var -> . ID
    (47) var -> . NUMBER_I
    (48) var -> . NUMBER_F
    (49) var -> . TRUE
    (50) var -> . FALSE

    STRING          shift and go to state 124
    ID              shift and go to state 14
    NUMBER_I        shift and go to state 18
    NUMBER_F        shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21

    printTextList                  shift and go to state 121
    printText                      shift and go to state 122
    var                            shift and go to state 123

state 73

    (5) functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 125
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 74

    (8) statement -> SET ID COMMA . TRUE SEMICOLOM
    (9) statement -> SET ID COMMA . FALSE SEMICOLOM
    (10) statement -> SET ID COMMA . expression SEMICOLOM
    (67) expression -> . term
    (68) expression -> . addingOperator term
    (69) expression -> . expression addingOperator term
    (72) term -> . factor
    (73) term -> . term multiplyingOperator factor
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS
    (77) factor -> . factorM
    (78) factor -> . factor MODULE factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .

    TRUE            shift and go to state 126
    FALSE           shift and go to state 127
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)

    expression                     shift and go to state 128
    term                           shift and go to state 53
    addingOperator                 shift and go to state 54
    factor                         shift and go to state 55
    factorM                        shift and go to state 58
    index                          shift and go to state 59
    empty                          shift and go to state 48

state 75

    (19) statement -> SET ID DOT . NEG SEMICOLOM
    (20) statement -> SET ID DOT . T SEMICOLOM
    (21) statement -> SET ID DOT . F SEMICOLOM

    NEG             shift and go to state 129
    T               shift and go to state 130
    F               shift and go to state 131


state 76

    (11) statement -> EXEC ID LPARENT . varList RPARENT SEMICOLOM
    (43) varList -> . var
    (44) varList -> . empty
    (45) varList -> . varList COMMA var
    (46) var -> . ID
    (47) var -> . NUMBER_I
    (48) var -> . NUMBER_F
    (49) var -> . TRUE
    (50) var -> . FALSE
    (88) empty -> .

    ID              shift and go to state 14
    NUMBER_I        shift and go to state 18
    NUMBER_F        shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    RPARENT         reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)

    varList                        shift and go to state 132
    var                            shift and go to state 16
    empty                          shift and go to state 17

state 77

    (12) statement -> TYPE LPARENT ID . RPARENT SEMICOLOM

    RPARENT         shift and go to state 133


state 78

    (13) statement -> IF conditionif LBRACKET . statementList RBRACKET empty
    (14) statement -> IF conditionif LBRACKET . statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 134
    statement                      shift and go to state 26

state 79

    (81) index -> empty NUMBER_I .

    EXPONENT        reduce using rule 81 (index -> empty NUMBER_I .)
    MODULE          reduce using rule 81 (index -> empty NUMBER_I .)
    TIMES           reduce using rule 81 (index -> empty NUMBER_I .)
    DIVIDE          reduce using rule 81 (index -> empty NUMBER_I .)
    DIVIDE_E        reduce using rule 81 (index -> empty NUMBER_I .)
    COMPARE         reduce using rule 81 (index -> empty NUMBER_I .)
    NE              reduce using rule 81 (index -> empty NUMBER_I .)
    LT              reduce using rule 81 (index -> empty NUMBER_I .)
    GT              reduce using rule 81 (index -> empty NUMBER_I .)
    LTE             reduce using rule 81 (index -> empty NUMBER_I .)
    GTE             reduce using rule 81 (index -> empty NUMBER_I .)
    PLUS            reduce using rule 81 (index -> empty NUMBER_I .)
    MINUS           reduce using rule 81 (index -> empty NUMBER_I .)
    RPARENT         reduce using rule 81 (index -> empty NUMBER_I .)
    SEMICOLOM       reduce using rule 81 (index -> empty NUMBER_I .)
    LBRACKET        reduce using rule 81 (index -> empty NUMBER_I .)
    STEP            reduce using rule 81 (index -> empty NUMBER_I .)
    ET              reduce using rule 81 (index -> empty NUMBER_I .)


state 80

    (82) index -> empty NUMBER_F .

    EXPONENT        reduce using rule 82 (index -> empty NUMBER_F .)
    MODULE          reduce using rule 82 (index -> empty NUMBER_F .)
    TIMES           reduce using rule 82 (index -> empty NUMBER_F .)
    DIVIDE          reduce using rule 82 (index -> empty NUMBER_F .)
    DIVIDE_E        reduce using rule 82 (index -> empty NUMBER_F .)
    COMPARE         reduce using rule 82 (index -> empty NUMBER_F .)
    NE              reduce using rule 82 (index -> empty NUMBER_F .)
    LT              reduce using rule 82 (index -> empty NUMBER_F .)
    GT              reduce using rule 82 (index -> empty NUMBER_F .)
    LTE             reduce using rule 82 (index -> empty NUMBER_F .)
    GTE             reduce using rule 82 (index -> empty NUMBER_F .)
    PLUS            reduce using rule 82 (index -> empty NUMBER_F .)
    MINUS           reduce using rule 82 (index -> empty NUMBER_F .)
    RPARENT         reduce using rule 82 (index -> empty NUMBER_F .)
    SEMICOLOM       reduce using rule 82 (index -> empty NUMBER_F .)
    LBRACKET        reduce using rule 82 (index -> empty NUMBER_F .)
    STEP            reduce using rule 82 (index -> empty NUMBER_F .)
    ET              reduce using rule 82 (index -> empty NUMBER_F .)


state 81

    (86) index -> empty ID .

    EXPONENT        reduce using rule 86 (index -> empty ID .)
    MODULE          reduce using rule 86 (index -> empty ID .)
    TIMES           reduce using rule 86 (index -> empty ID .)
    DIVIDE          reduce using rule 86 (index -> empty ID .)
    DIVIDE_E        reduce using rule 86 (index -> empty ID .)
    COMPARE         reduce using rule 86 (index -> empty ID .)
    NE              reduce using rule 86 (index -> empty ID .)
    LT              reduce using rule 86 (index -> empty ID .)
    GT              reduce using rule 86 (index -> empty ID .)
    LTE             reduce using rule 86 (index -> empty ID .)
    GTE             reduce using rule 86 (index -> empty ID .)
    PLUS            reduce using rule 86 (index -> empty ID .)
    MINUS           reduce using rule 86 (index -> empty ID .)
    RPARENT         reduce using rule 86 (index -> empty ID .)
    SEMICOLOM       reduce using rule 86 (index -> empty ID .)
    LBRACKET        reduce using rule 86 (index -> empty ID .)
    STEP            reduce using rule 86 (index -> empty ID .)
    ET              reduce using rule 86 (index -> empty ID .)


state 82

    (51) conditionif -> expression relation . expression
    (67) expression -> . term
    (68) expression -> . addingOperator term
    (69) expression -> . expression addingOperator term
    (72) term -> . factor
    (73) term -> . term multiplyingOperator factor
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS
    (77) factor -> . factorM
    (78) factor -> . factor MODULE factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)

    expression                     shift and go to state 135
    term                           shift and go to state 53
    addingOperator                 shift and go to state 54
    factor                         shift and go to state 55
    factorM                        shift and go to state 58
    index                          shift and go to state 59
    empty                          shift and go to state 48

state 83

    (69) expression -> expression addingOperator . term
    (72) term -> . factor
    (73) term -> . term multiplyingOperator factor
    (77) factor -> . factorM
    (78) factor -> . factor MODULE factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    addingOperator                 shift and go to state 94
    term                           shift and go to state 136
    factor                         shift and go to state 55
    factorM                        shift and go to state 58
    index                          shift and go to state 59
    empty                          shift and go to state 48

state 84

    (61) relation -> COMPARE .

    PLUS            reduce using rule 61 (relation -> COMPARE .)
    MINUS           reduce using rule 61 (relation -> COMPARE .)
    LPARENT         reduce using rule 61 (relation -> COMPARE .)
    NUMBER_I        reduce using rule 61 (relation -> COMPARE .)
    NUMBER_F        reduce using rule 61 (relation -> COMPARE .)
    ID              reduce using rule 61 (relation -> COMPARE .)


state 85

    (62) relation -> NE .

    PLUS            reduce using rule 62 (relation -> NE .)
    MINUS           reduce using rule 62 (relation -> NE .)
    LPARENT         reduce using rule 62 (relation -> NE .)
    NUMBER_I        reduce using rule 62 (relation -> NE .)
    NUMBER_F        reduce using rule 62 (relation -> NE .)
    ID              reduce using rule 62 (relation -> NE .)


state 86

    (63) relation -> LT .

    PLUS            reduce using rule 63 (relation -> LT .)
    MINUS           reduce using rule 63 (relation -> LT .)
    LPARENT         reduce using rule 63 (relation -> LT .)
    NUMBER_I        reduce using rule 63 (relation -> LT .)
    NUMBER_F        reduce using rule 63 (relation -> LT .)
    ID              reduce using rule 63 (relation -> LT .)


state 87

    (64) relation -> GT .

    PLUS            reduce using rule 64 (relation -> GT .)
    MINUS           reduce using rule 64 (relation -> GT .)
    LPARENT         reduce using rule 64 (relation -> GT .)
    NUMBER_I        reduce using rule 64 (relation -> GT .)
    NUMBER_F        reduce using rule 64 (relation -> GT .)
    ID              reduce using rule 64 (relation -> GT .)


state 88

    (65) relation -> LTE .

    PLUS            reduce using rule 65 (relation -> LTE .)
    MINUS           reduce using rule 65 (relation -> LTE .)
    LPARENT         reduce using rule 65 (relation -> LTE .)
    NUMBER_I        reduce using rule 65 (relation -> LTE .)
    NUMBER_F        reduce using rule 65 (relation -> LTE .)
    ID              reduce using rule 65 (relation -> LTE .)


state 89

    (66) relation -> GTE .

    PLUS            reduce using rule 66 (relation -> GTE .)
    MINUS           reduce using rule 66 (relation -> GTE .)
    LPARENT         reduce using rule 66 (relation -> GTE .)
    NUMBER_I        reduce using rule 66 (relation -> GTE .)
    NUMBER_F        reduce using rule 66 (relation -> GTE .)
    ID              reduce using rule 66 (relation -> GTE .)


state 90

    (73) term -> term multiplyingOperator . factor
    (77) factor -> . factorM
    (78) factor -> . factor MODULE factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    factor                         shift and go to state 137
    factorM                        shift and go to state 58
    index                          shift and go to state 59
    empty                          shift and go to state 48
    addingOperator                 shift and go to state 94

state 91

    (74) multiplyingOperator -> TIMES .

    LPARENT         reduce using rule 74 (multiplyingOperator -> TIMES .)
    PLUS            reduce using rule 74 (multiplyingOperator -> TIMES .)
    MINUS           reduce using rule 74 (multiplyingOperator -> TIMES .)
    NUMBER_I        reduce using rule 74 (multiplyingOperator -> TIMES .)
    NUMBER_F        reduce using rule 74 (multiplyingOperator -> TIMES .)
    ID              reduce using rule 74 (multiplyingOperator -> TIMES .)


state 92

    (75) multiplyingOperator -> DIVIDE .

    LPARENT         reduce using rule 75 (multiplyingOperator -> DIVIDE .)
    PLUS            reduce using rule 75 (multiplyingOperator -> DIVIDE .)
    MINUS           reduce using rule 75 (multiplyingOperator -> DIVIDE .)
    NUMBER_I        reduce using rule 75 (multiplyingOperator -> DIVIDE .)
    NUMBER_F        reduce using rule 75 (multiplyingOperator -> DIVIDE .)
    ID              reduce using rule 75 (multiplyingOperator -> DIVIDE .)


state 93

    (76) multiplyingOperator -> DIVIDE_E .

    LPARENT         reduce using rule 76 (multiplyingOperator -> DIVIDE_E .)
    PLUS            reduce using rule 76 (multiplyingOperator -> DIVIDE_E .)
    MINUS           reduce using rule 76 (multiplyingOperator -> DIVIDE_E .)
    NUMBER_I        reduce using rule 76 (multiplyingOperator -> DIVIDE_E .)
    NUMBER_F        reduce using rule 76 (multiplyingOperator -> DIVIDE_E .)
    ID              reduce using rule 76 (multiplyingOperator -> DIVIDE_E .)


state 94

    (83) index -> addingOperator . NUMBER_I
    (84) index -> addingOperator . NUMBER_F
    (85) index -> addingOperator . ID

    NUMBER_I        shift and go to state 96
    NUMBER_F        shift and go to state 97
    ID              shift and go to state 98


state 95

    (68) expression -> addingOperator term .
    (73) term -> term . multiplyingOperator factor
    (74) multiplyingOperator -> . TIMES
    (75) multiplyingOperator -> . DIVIDE
    (76) multiplyingOperator -> . DIVIDE_E

    COMPARE         reduce using rule 68 (expression -> addingOperator term .)
    NE              reduce using rule 68 (expression -> addingOperator term .)
    LT              reduce using rule 68 (expression -> addingOperator term .)
    GT              reduce using rule 68 (expression -> addingOperator term .)
    LTE             reduce using rule 68 (expression -> addingOperator term .)
    GTE             reduce using rule 68 (expression -> addingOperator term .)
    PLUS            reduce using rule 68 (expression -> addingOperator term .)
    MINUS           reduce using rule 68 (expression -> addingOperator term .)
    RPARENT         reduce using rule 68 (expression -> addingOperator term .)
    SEMICOLOM       reduce using rule 68 (expression -> addingOperator term .)
    LBRACKET        reduce using rule 68 (expression -> addingOperator term .)
    STEP            reduce using rule 68 (expression -> addingOperator term .)
    ET              reduce using rule 68 (expression -> addingOperator term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    DIVIDE_E        shift and go to state 93

    multiplyingOperator            shift and go to state 90

state 96

    (83) index -> addingOperator NUMBER_I .

    EXPONENT        reduce using rule 83 (index -> addingOperator NUMBER_I .)
    MODULE          reduce using rule 83 (index -> addingOperator NUMBER_I .)
    TIMES           reduce using rule 83 (index -> addingOperator NUMBER_I .)
    DIVIDE          reduce using rule 83 (index -> addingOperator NUMBER_I .)
    DIVIDE_E        reduce using rule 83 (index -> addingOperator NUMBER_I .)
    COMPARE         reduce using rule 83 (index -> addingOperator NUMBER_I .)
    NE              reduce using rule 83 (index -> addingOperator NUMBER_I .)
    LT              reduce using rule 83 (index -> addingOperator NUMBER_I .)
    GT              reduce using rule 83 (index -> addingOperator NUMBER_I .)
    LTE             reduce using rule 83 (index -> addingOperator NUMBER_I .)
    GTE             reduce using rule 83 (index -> addingOperator NUMBER_I .)
    PLUS            reduce using rule 83 (index -> addingOperator NUMBER_I .)
    MINUS           reduce using rule 83 (index -> addingOperator NUMBER_I .)
    RPARENT         reduce using rule 83 (index -> addingOperator NUMBER_I .)
    SEMICOLOM       reduce using rule 83 (index -> addingOperator NUMBER_I .)
    LBRACKET        reduce using rule 83 (index -> addingOperator NUMBER_I .)
    STEP            reduce using rule 83 (index -> addingOperator NUMBER_I .)
    ET              reduce using rule 83 (index -> addingOperator NUMBER_I .)


state 97

    (84) index -> addingOperator NUMBER_F .

    EXPONENT        reduce using rule 84 (index -> addingOperator NUMBER_F .)
    MODULE          reduce using rule 84 (index -> addingOperator NUMBER_F .)
    TIMES           reduce using rule 84 (index -> addingOperator NUMBER_F .)
    DIVIDE          reduce using rule 84 (index -> addingOperator NUMBER_F .)
    DIVIDE_E        reduce using rule 84 (index -> addingOperator NUMBER_F .)
    COMPARE         reduce using rule 84 (index -> addingOperator NUMBER_F .)
    NE              reduce using rule 84 (index -> addingOperator NUMBER_F .)
    LT              reduce using rule 84 (index -> addingOperator NUMBER_F .)
    GT              reduce using rule 84 (index -> addingOperator NUMBER_F .)
    LTE             reduce using rule 84 (index -> addingOperator NUMBER_F .)
    GTE             reduce using rule 84 (index -> addingOperator NUMBER_F .)
    PLUS            reduce using rule 84 (index -> addingOperator NUMBER_F .)
    MINUS           reduce using rule 84 (index -> addingOperator NUMBER_F .)
    RPARENT         reduce using rule 84 (index -> addingOperator NUMBER_F .)
    SEMICOLOM       reduce using rule 84 (index -> addingOperator NUMBER_F .)
    LBRACKET        reduce using rule 84 (index -> addingOperator NUMBER_F .)
    STEP            reduce using rule 84 (index -> addingOperator NUMBER_F .)
    ET              reduce using rule 84 (index -> addingOperator NUMBER_F .)


state 98

    (85) index -> addingOperator ID .

    EXPONENT        reduce using rule 85 (index -> addingOperator ID .)
    MODULE          reduce using rule 85 (index -> addingOperator ID .)
    TIMES           reduce using rule 85 (index -> addingOperator ID .)
    DIVIDE          reduce using rule 85 (index -> addingOperator ID .)
    DIVIDE_E        reduce using rule 85 (index -> addingOperator ID .)
    COMPARE         reduce using rule 85 (index -> addingOperator ID .)
    NE              reduce using rule 85 (index -> addingOperator ID .)
    LT              reduce using rule 85 (index -> addingOperator ID .)
    GT              reduce using rule 85 (index -> addingOperator ID .)
    LTE             reduce using rule 85 (index -> addingOperator ID .)
    GTE             reduce using rule 85 (index -> addingOperator ID .)
    PLUS            reduce using rule 85 (index -> addingOperator ID .)
    MINUS           reduce using rule 85 (index -> addingOperator ID .)
    RPARENT         reduce using rule 85 (index -> addingOperator ID .)
    SEMICOLOM       reduce using rule 85 (index -> addingOperator ID .)
    LBRACKET        reduce using rule 85 (index -> addingOperator ID .)
    STEP            reduce using rule 85 (index -> addingOperator ID .)
    ET              reduce using rule 85 (index -> addingOperator ID .)


state 99

    (78) factor -> factor MODULE . factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    factorM                        shift and go to state 138
    index                          shift and go to state 59
    empty                          shift and go to state 48
    addingOperator                 shift and go to state 94

state 100

    (80) factorM -> factorM EXPONENT . index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    index                          shift and go to state 139
    empty                          shift and go to state 48
    addingOperator                 shift and go to state 94

state 101

    (87) index -> LPARENT expression . RPARENT
    (69) expression -> expression . addingOperator term
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    RPARENT         shift and go to state 140
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    addingOperator                 shift and go to state 83

state 102

    (15) statement -> FOR ID TO . expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> FOR ID TO . expression STEP empty LBRACKET statementList RBRACKET
    (67) expression -> . term
    (68) expression -> . addingOperator term
    (69) expression -> . expression addingOperator term
    (72) term -> . factor
    (73) term -> . term multiplyingOperator factor
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS
    (77) factor -> . factorM
    (78) factor -> . factor MODULE factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)

    expression                     shift and go to state 141
    empty                          shift and go to state 48
    term                           shift and go to state 53
    addingOperator                 shift and go to state 54
    factor                         shift and go to state 55
    factorM                        shift and go to state 58
    index                          shift and go to state 59

state 103

    (17) statement -> EC inCaseLista SN . LBRACKET statementList RBRACKET FEC SEMICOLOM

    LBRACKET        shift and go to state 142


state 104

    (56) inCaseLista -> inCaseLista inCasea .

    SN              reduce using rule 56 (inCaseLista -> inCaseLista inCasea .)
    CUANDO          reduce using rule 56 (inCaseLista -> inCaseLista inCasea .)


state 105

    (18) statement -> EC ID inCaseListb . SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (59) inCaseListb -> inCaseListb . inCaseb
    (60) inCaseb -> . CUANDO relation expression ET LBRACKET statementList RBRACKET

    SN              shift and go to state 143
    CUANDO          shift and go to state 107

    inCaseb                        shift and go to state 144

state 106

    (58) inCaseListb -> inCaseb .

    SN              reduce using rule 58 (inCaseListb -> inCaseb .)
    CUANDO          reduce using rule 58 (inCaseListb -> inCaseb .)


state 107

    (60) inCaseb -> CUANDO . relation expression ET LBRACKET statementList RBRACKET
    (61) relation -> . COMPARE
    (62) relation -> . NE
    (63) relation -> . LT
    (64) relation -> . GT
    (65) relation -> . LTE
    (66) relation -> . GTE

    COMPARE         shift and go to state 84
    NE              shift and go to state 85
    LT              shift and go to state 86
    GT              shift and go to state 87
    LTE             shift and go to state 88
    GTE             shift and go to state 89

    relation                       shift and go to state 145

state 108

    (57) inCasea -> CUANDO ID . relation expression ET LBRACKET statementList RBRACKET
    (61) relation -> . COMPARE
    (62) relation -> . NE
    (63) relation -> . LT
    (64) relation -> . GT
    (65) relation -> . LTE
    (66) relation -> . GTE

    COMPARE         shift and go to state 84
    NE              shift and go to state 85
    LT              shift and go to state 86
    GT              shift and go to state 87
    LTE             shift and go to state 88
    GTE             shift and go to state 89

    relation                       shift and go to state 146

state 109

    (22) statement -> ABANICO LPARENT A . RPARENT SEMICOLOM

    RPARENT         shift and go to state 147


state 110

    (23) statement -> ABANICO LPARENT B . RPARENT SEMICOLOM

    RPARENT         shift and go to state 148


state 111

    (24) statement -> VERTICAL LPARENT D . RPARENT SEMICOLOM

    RPARENT         shift and go to state 149


state 112

    (25) statement -> VERTICAL LPARENT I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 150


state 113

    (26) statement -> PERCUTOR LPARENT A . empty RPARENT SEMICOLOM
    (28) statement -> PERCUTOR LPARENT A . B RPARENT SEMICOLOM
    (88) empty -> .

    B               shift and go to state 152
    RPARENT         reduce using rule 88 (empty -> .)

    empty                          shift and go to state 151

state 114

    (27) statement -> PERCUTOR LPARENT B . empty RPARENT SEMICOLOM
    (88) empty -> .

    RPARENT         reduce using rule 88 (empty -> .)

    empty                          shift and go to state 153

state 115

    (29) statement -> PERCUTOR LPARENT D . empty RPARENT SEMICOLOM
    (31) statement -> PERCUTOR LPARENT D . I RPARENT SEMICOLOM
    (88) empty -> .

    I               shift and go to state 155
    RPARENT         reduce using rule 88 (empty -> .)

    empty                          shift and go to state 154

state 116

    (30) statement -> PERCUTOR LPARENT I . empty RPARENT SEMICOLOM
    (88) empty -> .

    RPARENT         reduce using rule 88 (empty -> .)

    empty                          shift and go to state 156

state 117

    (32) statement -> GOLPE LPARENT RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 157


state 118

    (33) statement -> VIBRATO LPARENT NUMBER_I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 158


state 119

    (34) statement -> METRONOMO LPARENT A . COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> METRONOMO LPARENT A . COMMA NUMBER_F RPARENT SEMICOLOM

    COMMA           shift and go to state 159


state 120

    (35) statement -> METRONOMO LPARENT D . COMMA NUMBER_I RPARENT SEMICOLOM
    (37) statement -> METRONOMO LPARENT D . COMMA NUMBER_F RPARENT SEMICOLOM

    COMMA           shift and go to state 160


state 121

    (38) statement -> PRINT LPARENT printTextList . RPARENT SEMICOLOM
    (40) printTextList -> printTextList . COMMA printText

    RPARENT         shift and go to state 161
    COMMA           shift and go to state 162


state 122

    (39) printTextList -> printText .

    RPARENT         reduce using rule 39 (printTextList -> printText .)
    COMMA           reduce using rule 39 (printTextList -> printText .)


state 123

    (41) printText -> var .

    RPARENT         reduce using rule 41 (printText -> var .)
    COMMA           reduce using rule 41 (printText -> var .)


state 124

    (42) printText -> STRING .

    RPARENT         reduce using rule 42 (printText -> STRING .)
    COMMA           reduce using rule 42 (printText -> STRING .)


state 125

    (5) functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET .

    DEF             reduce using rule 5 (functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET .)
    $end            reduce using rule 5 (functionDecl -> DEF ID LPARENT varList RPARENT LBRACKET statementList RBRACKET .)


state 126

    (8) statement -> SET ID COMMA TRUE . SEMICOLOM

    SEMICOLOM       shift and go to state 163


state 127

    (9) statement -> SET ID COMMA FALSE . SEMICOLOM

    SEMICOLOM       shift and go to state 164


state 128

    (10) statement -> SET ID COMMA expression . SEMICOLOM
    (69) expression -> expression . addingOperator term
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    SEMICOLOM       shift and go to state 165
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    addingOperator                 shift and go to state 83

state 129

    (19) statement -> SET ID DOT NEG . SEMICOLOM

    SEMICOLOM       shift and go to state 166


state 130

    (20) statement -> SET ID DOT T . SEMICOLOM

    SEMICOLOM       shift and go to state 167


state 131

    (21) statement -> SET ID DOT F . SEMICOLOM

    SEMICOLOM       shift and go to state 168


state 132

    (11) statement -> EXEC ID LPARENT varList . RPARENT SEMICOLOM
    (45) varList -> varList . COMMA var

    RPARENT         shift and go to state 169
    COMMA           shift and go to state 24


state 133

    (12) statement -> TYPE LPARENT ID RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 170


state 134

    (13) statement -> IF conditionif LBRACKET statementList . RBRACKET empty
    (14) statement -> IF conditionif LBRACKET statementList . RBRACKET ELSE LBRACKET statementList RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 171
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 135

    (51) conditionif -> expression relation expression .
    (69) expression -> expression . addingOperator term
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    LBRACKET        reduce using rule 51 (conditionif -> expression relation expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    addingOperator                 shift and go to state 83

state 136

    (69) expression -> expression addingOperator term .
    (73) term -> term . multiplyingOperator factor
    (74) multiplyingOperator -> . TIMES
    (75) multiplyingOperator -> . DIVIDE
    (76) multiplyingOperator -> . DIVIDE_E

    COMPARE         reduce using rule 69 (expression -> expression addingOperator term .)
    NE              reduce using rule 69 (expression -> expression addingOperator term .)
    LT              reduce using rule 69 (expression -> expression addingOperator term .)
    GT              reduce using rule 69 (expression -> expression addingOperator term .)
    LTE             reduce using rule 69 (expression -> expression addingOperator term .)
    GTE             reduce using rule 69 (expression -> expression addingOperator term .)
    PLUS            reduce using rule 69 (expression -> expression addingOperator term .)
    MINUS           reduce using rule 69 (expression -> expression addingOperator term .)
    RPARENT         reduce using rule 69 (expression -> expression addingOperator term .)
    SEMICOLOM       reduce using rule 69 (expression -> expression addingOperator term .)
    LBRACKET        reduce using rule 69 (expression -> expression addingOperator term .)
    STEP            reduce using rule 69 (expression -> expression addingOperator term .)
    ET              reduce using rule 69 (expression -> expression addingOperator term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    DIVIDE_E        shift and go to state 93

    multiplyingOperator            shift and go to state 90

state 137

    (73) term -> term multiplyingOperator factor .
    (78) factor -> factor . MODULE factorM

    TIMES           reduce using rule 73 (term -> term multiplyingOperator factor .)
    DIVIDE          reduce using rule 73 (term -> term multiplyingOperator factor .)
    DIVIDE_E        reduce using rule 73 (term -> term multiplyingOperator factor .)
    COMPARE         reduce using rule 73 (term -> term multiplyingOperator factor .)
    NE              reduce using rule 73 (term -> term multiplyingOperator factor .)
    LT              reduce using rule 73 (term -> term multiplyingOperator factor .)
    GT              reduce using rule 73 (term -> term multiplyingOperator factor .)
    LTE             reduce using rule 73 (term -> term multiplyingOperator factor .)
    GTE             reduce using rule 73 (term -> term multiplyingOperator factor .)
    PLUS            reduce using rule 73 (term -> term multiplyingOperator factor .)
    MINUS           reduce using rule 73 (term -> term multiplyingOperator factor .)
    RPARENT         reduce using rule 73 (term -> term multiplyingOperator factor .)
    SEMICOLOM       reduce using rule 73 (term -> term multiplyingOperator factor .)
    LBRACKET        reduce using rule 73 (term -> term multiplyingOperator factor .)
    STEP            reduce using rule 73 (term -> term multiplyingOperator factor .)
    ET              reduce using rule 73 (term -> term multiplyingOperator factor .)
    MODULE          shift and go to state 99


state 138

    (78) factor -> factor MODULE factorM .
    (80) factorM -> factorM . EXPONENT index

    MODULE          reduce using rule 78 (factor -> factor MODULE factorM .)
    TIMES           reduce using rule 78 (factor -> factor MODULE factorM .)
    DIVIDE          reduce using rule 78 (factor -> factor MODULE factorM .)
    DIVIDE_E        reduce using rule 78 (factor -> factor MODULE factorM .)
    COMPARE         reduce using rule 78 (factor -> factor MODULE factorM .)
    NE              reduce using rule 78 (factor -> factor MODULE factorM .)
    LT              reduce using rule 78 (factor -> factor MODULE factorM .)
    GT              reduce using rule 78 (factor -> factor MODULE factorM .)
    LTE             reduce using rule 78 (factor -> factor MODULE factorM .)
    GTE             reduce using rule 78 (factor -> factor MODULE factorM .)
    PLUS            reduce using rule 78 (factor -> factor MODULE factorM .)
    MINUS           reduce using rule 78 (factor -> factor MODULE factorM .)
    RPARENT         reduce using rule 78 (factor -> factor MODULE factorM .)
    SEMICOLOM       reduce using rule 78 (factor -> factor MODULE factorM .)
    LBRACKET        reduce using rule 78 (factor -> factor MODULE factorM .)
    STEP            reduce using rule 78 (factor -> factor MODULE factorM .)
    ET              reduce using rule 78 (factor -> factor MODULE factorM .)
    EXPONENT        shift and go to state 100


state 139

    (80) factorM -> factorM EXPONENT index .

    EXPONENT        reduce using rule 80 (factorM -> factorM EXPONENT index .)
    MODULE          reduce using rule 80 (factorM -> factorM EXPONENT index .)
    TIMES           reduce using rule 80 (factorM -> factorM EXPONENT index .)
    DIVIDE          reduce using rule 80 (factorM -> factorM EXPONENT index .)
    DIVIDE_E        reduce using rule 80 (factorM -> factorM EXPONENT index .)
    COMPARE         reduce using rule 80 (factorM -> factorM EXPONENT index .)
    NE              reduce using rule 80 (factorM -> factorM EXPONENT index .)
    LT              reduce using rule 80 (factorM -> factorM EXPONENT index .)
    GT              reduce using rule 80 (factorM -> factorM EXPONENT index .)
    LTE             reduce using rule 80 (factorM -> factorM EXPONENT index .)
    GTE             reduce using rule 80 (factorM -> factorM EXPONENT index .)
    PLUS            reduce using rule 80 (factorM -> factorM EXPONENT index .)
    MINUS           reduce using rule 80 (factorM -> factorM EXPONENT index .)
    RPARENT         reduce using rule 80 (factorM -> factorM EXPONENT index .)
    SEMICOLOM       reduce using rule 80 (factorM -> factorM EXPONENT index .)
    LBRACKET        reduce using rule 80 (factorM -> factorM EXPONENT index .)
    STEP            reduce using rule 80 (factorM -> factorM EXPONENT index .)
    ET              reduce using rule 80 (factorM -> factorM EXPONENT index .)


state 140

    (87) index -> LPARENT expression RPARENT .

    EXPONENT        reduce using rule 87 (index -> LPARENT expression RPARENT .)
    MODULE          reduce using rule 87 (index -> LPARENT expression RPARENT .)
    TIMES           reduce using rule 87 (index -> LPARENT expression RPARENT .)
    DIVIDE          reduce using rule 87 (index -> LPARENT expression RPARENT .)
    DIVIDE_E        reduce using rule 87 (index -> LPARENT expression RPARENT .)
    COMPARE         reduce using rule 87 (index -> LPARENT expression RPARENT .)
    NE              reduce using rule 87 (index -> LPARENT expression RPARENT .)
    LT              reduce using rule 87 (index -> LPARENT expression RPARENT .)
    GT              reduce using rule 87 (index -> LPARENT expression RPARENT .)
    LTE             reduce using rule 87 (index -> LPARENT expression RPARENT .)
    GTE             reduce using rule 87 (index -> LPARENT expression RPARENT .)
    PLUS            reduce using rule 87 (index -> LPARENT expression RPARENT .)
    MINUS           reduce using rule 87 (index -> LPARENT expression RPARENT .)
    RPARENT         reduce using rule 87 (index -> LPARENT expression RPARENT .)
    SEMICOLOM       reduce using rule 87 (index -> LPARENT expression RPARENT .)
    LBRACKET        reduce using rule 87 (index -> LPARENT expression RPARENT .)
    STEP            reduce using rule 87 (index -> LPARENT expression RPARENT .)
    ET              reduce using rule 87 (index -> LPARENT expression RPARENT .)


state 141

    (15) statement -> FOR ID TO expression . STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> FOR ID TO expression . STEP empty LBRACKET statementList RBRACKET
    (69) expression -> expression . addingOperator term
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    STEP            shift and go to state 172
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    addingOperator                 shift and go to state 83

state 142

    (17) statement -> EC inCaseLista SN LBRACKET . statementList RBRACKET FEC SEMICOLOM
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 173
    statement                      shift and go to state 26

state 143

    (18) statement -> EC ID inCaseListb SN . LBRACKET statementList RBRACKET FEC SEMICOLOM

    LBRACKET        shift and go to state 174


state 144

    (59) inCaseListb -> inCaseListb inCaseb .

    SN              reduce using rule 59 (inCaseListb -> inCaseListb inCaseb .)
    CUANDO          reduce using rule 59 (inCaseListb -> inCaseListb inCaseb .)


state 145

    (60) inCaseb -> CUANDO relation . expression ET LBRACKET statementList RBRACKET
    (67) expression -> . term
    (68) expression -> . addingOperator term
    (69) expression -> . expression addingOperator term
    (72) term -> . factor
    (73) term -> . term multiplyingOperator factor
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS
    (77) factor -> . factorM
    (78) factor -> . factor MODULE factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)

    expression                     shift and go to state 175
    term                           shift and go to state 53
    addingOperator                 shift and go to state 54
    factor                         shift and go to state 55
    factorM                        shift and go to state 58
    index                          shift and go to state 59
    empty                          shift and go to state 48

state 146

    (57) inCasea -> CUANDO ID relation . expression ET LBRACKET statementList RBRACKET
    (67) expression -> . term
    (68) expression -> . addingOperator term
    (69) expression -> . expression addingOperator term
    (72) term -> . factor
    (73) term -> . term multiplyingOperator factor
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS
    (77) factor -> . factorM
    (78) factor -> . factor MODULE factorM
    (79) factorM -> . index
    (80) factorM -> . factorM EXPONENT index
    (81) index -> . empty NUMBER_I
    (82) index -> . empty NUMBER_F
    (83) index -> . addingOperator NUMBER_I
    (84) index -> . addingOperator NUMBER_F
    (85) index -> . addingOperator ID
    (86) index -> . empty ID
    (87) index -> . LPARENT expression RPARENT
    (88) empty -> .

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    LPARENT         shift and go to state 60
    NUMBER_I        reduce using rule 88 (empty -> .)
    NUMBER_F        reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)

    expression                     shift and go to state 176
    term                           shift and go to state 53
    addingOperator                 shift and go to state 54
    factor                         shift and go to state 55
    factorM                        shift and go to state 58
    index                          shift and go to state 59
    empty                          shift and go to state 48

state 147

    (22) statement -> ABANICO LPARENT A RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 177


state 148

    (23) statement -> ABANICO LPARENT B RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 178


state 149

    (24) statement -> VERTICAL LPARENT D RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 179


state 150

    (25) statement -> VERTICAL LPARENT I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 180


state 151

    (26) statement -> PERCUTOR LPARENT A empty . RPARENT SEMICOLOM

    RPARENT         shift and go to state 181


state 152

    (28) statement -> PERCUTOR LPARENT A B . RPARENT SEMICOLOM

    RPARENT         shift and go to state 182


state 153

    (27) statement -> PERCUTOR LPARENT B empty . RPARENT SEMICOLOM

    RPARENT         shift and go to state 183


state 154

    (29) statement -> PERCUTOR LPARENT D empty . RPARENT SEMICOLOM

    RPARENT         shift and go to state 184


state 155

    (31) statement -> PERCUTOR LPARENT D I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 185


state 156

    (30) statement -> PERCUTOR LPARENT I empty . RPARENT SEMICOLOM

    RPARENT         shift and go to state 186


state 157

    (32) statement -> GOLPE LPARENT RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    SET             reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    EXEC            reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    TYPE            reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    IF              reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    FOR             reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    EC              reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)
    PRINT           reduce using rule 32 (statement -> GOLPE LPARENT RPARENT SEMICOLOM .)


state 158

    (33) statement -> VIBRATO LPARENT NUMBER_I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 187


state 159

    (34) statement -> METRONOMO LPARENT A COMMA . NUMBER_I RPARENT SEMICOLOM
    (36) statement -> METRONOMO LPARENT A COMMA . NUMBER_F RPARENT SEMICOLOM

    NUMBER_I        shift and go to state 188
    NUMBER_F        shift and go to state 189


state 160

    (35) statement -> METRONOMO LPARENT D COMMA . NUMBER_I RPARENT SEMICOLOM
    (37) statement -> METRONOMO LPARENT D COMMA . NUMBER_F RPARENT SEMICOLOM

    NUMBER_I        shift and go to state 190
    NUMBER_F        shift and go to state 191


state 161

    (38) statement -> PRINT LPARENT printTextList RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 192


state 162

    (40) printTextList -> printTextList COMMA . printText
    (41) printText -> . var
    (42) printText -> . STRING
    (46) var -> . ID
    (47) var -> . NUMBER_I
    (48) var -> . NUMBER_F
    (49) var -> . TRUE
    (50) var -> . FALSE

    STRING          shift and go to state 124
    ID              shift and go to state 14
    NUMBER_I        shift and go to state 18
    NUMBER_F        shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21

    printText                      shift and go to state 193
    var                            shift and go to state 123

state 163

    (8) statement -> SET ID COMMA TRUE SEMICOLOM .

    RBRACKET        reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    SET             reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    EXEC            reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    TYPE            reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    IF              reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    FOR             reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    EC              reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    ABANICO         reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    VERTICAL        reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    PERCUTOR        reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    GOLPE           reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    VIBRATO         reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    METRONOMO       reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)
    PRINT           reduce using rule 8 (statement -> SET ID COMMA TRUE SEMICOLOM .)


state 164

    (9) statement -> SET ID COMMA FALSE SEMICOLOM .

    RBRACKET        reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    SET             reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    EXEC            reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    TYPE            reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    IF              reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    FOR             reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    EC              reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    ABANICO         reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    VERTICAL        reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    PERCUTOR        reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    GOLPE           reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    VIBRATO         reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    METRONOMO       reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)
    PRINT           reduce using rule 9 (statement -> SET ID COMMA FALSE SEMICOLOM .)


state 165

    (10) statement -> SET ID COMMA expression SEMICOLOM .

    RBRACKET        reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    SET             reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    EXEC            reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    TYPE            reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    IF              reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    FOR             reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    EC              reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    ABANICO         reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    VERTICAL        reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    PERCUTOR        reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    GOLPE           reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    VIBRATO         reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    METRONOMO       reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)
    PRINT           reduce using rule 10 (statement -> SET ID COMMA expression SEMICOLOM .)


state 166

    (19) statement -> SET ID DOT NEG SEMICOLOM .

    RBRACKET        reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    SET             reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    EXEC            reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    TYPE            reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    IF              reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    FOR             reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    EC              reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    ABANICO         reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    VERTICAL        reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    PERCUTOR        reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    GOLPE           reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    VIBRATO         reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    METRONOMO       reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)
    PRINT           reduce using rule 19 (statement -> SET ID DOT NEG SEMICOLOM .)


state 167

    (20) statement -> SET ID DOT T SEMICOLOM .

    RBRACKET        reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    SET             reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    EXEC            reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    TYPE            reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    IF              reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    FOR             reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    EC              reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    ABANICO         reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    VERTICAL        reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    PERCUTOR        reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    GOLPE           reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    VIBRATO         reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    METRONOMO       reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)
    PRINT           reduce using rule 20 (statement -> SET ID DOT T SEMICOLOM .)


state 168

    (21) statement -> SET ID DOT F SEMICOLOM .

    RBRACKET        reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    SET             reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    EXEC            reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    TYPE            reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    IF              reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    FOR             reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    EC              reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    ABANICO         reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    VERTICAL        reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    PERCUTOR        reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    GOLPE           reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    VIBRATO         reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    METRONOMO       reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)
    PRINT           reduce using rule 21 (statement -> SET ID DOT F SEMICOLOM .)


state 169

    (11) statement -> EXEC ID LPARENT varList RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 194


state 170

    (12) statement -> TYPE LPARENT ID RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    SET             reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    EXEC            reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    TYPE            reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    IF              reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    FOR             reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    EC              reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)
    PRINT           reduce using rule 12 (statement -> TYPE LPARENT ID RPARENT SEMICOLOM .)


state 171

    (13) statement -> IF conditionif LBRACKET statementList RBRACKET . empty
    (14) statement -> IF conditionif LBRACKET statementList RBRACKET . ELSE LBRACKET statementList RBRACKET
    (88) empty -> .

    ELSE            shift and go to state 196
    RBRACKET        reduce using rule 88 (empty -> .)
    SET             reduce using rule 88 (empty -> .)
    EXEC            reduce using rule 88 (empty -> .)
    TYPE            reduce using rule 88 (empty -> .)
    IF              reduce using rule 88 (empty -> .)
    FOR             reduce using rule 88 (empty -> .)
    EC              reduce using rule 88 (empty -> .)
    ABANICO         reduce using rule 88 (empty -> .)
    VERTICAL        reduce using rule 88 (empty -> .)
    PERCUTOR        reduce using rule 88 (empty -> .)
    GOLPE           reduce using rule 88 (empty -> .)
    VIBRATO         reduce using rule 88 (empty -> .)
    METRONOMO       reduce using rule 88 (empty -> .)
    PRINT           reduce using rule 88 (empty -> .)

    empty                          shift and go to state 195

state 172

    (15) statement -> FOR ID TO expression STEP . NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> FOR ID TO expression STEP . empty LBRACKET statementList RBRACKET
    (88) empty -> .

    NUMBER_I        shift and go to state 197
    LBRACKET        reduce using rule 88 (empty -> .)

    empty                          shift and go to state 198

state 173

    (17) statement -> EC inCaseLista SN LBRACKET statementList . RBRACKET FEC SEMICOLOM
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 199
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 174

    (18) statement -> EC ID inCaseListb SN LBRACKET . statementList RBRACKET FEC SEMICOLOM
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 200
    statement                      shift and go to state 26

state 175

    (60) inCaseb -> CUANDO relation expression . ET LBRACKET statementList RBRACKET
    (69) expression -> expression . addingOperator term
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    ET              shift and go to state 201
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    addingOperator                 shift and go to state 83

state 176

    (57) inCasea -> CUANDO ID relation expression . ET LBRACKET statementList RBRACKET
    (69) expression -> expression . addingOperator term
    (70) addingOperator -> . PLUS
    (71) addingOperator -> . MINUS

    ET              shift and go to state 202
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57

    addingOperator                 shift and go to state 83

state 177

    (22) statement -> ABANICO LPARENT A RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    SET             reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    EXEC            reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    TYPE            reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    IF              reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    FOR             reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    EC              reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)
    PRINT           reduce using rule 22 (statement -> ABANICO LPARENT A RPARENT SEMICOLOM .)


state 178

    (23) statement -> ABANICO LPARENT B RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    SET             reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    EXEC            reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    TYPE            reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    IF              reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    FOR             reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    EC              reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)
    PRINT           reduce using rule 23 (statement -> ABANICO LPARENT B RPARENT SEMICOLOM .)


state 179

    (24) statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    SET             reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    EXEC            reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    TYPE            reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    IF              reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    FOR             reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    EC              reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)
    PRINT           reduce using rule 24 (statement -> VERTICAL LPARENT D RPARENT SEMICOLOM .)


state 180

    (25) statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    SET             reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    IF              reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    FOR             reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    EC              reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 25 (statement -> VERTICAL LPARENT I RPARENT SEMICOLOM .)


state 181

    (26) statement -> PERCUTOR LPARENT A empty RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 203


state 182

    (28) statement -> PERCUTOR LPARENT A B RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 204


state 183

    (27) statement -> PERCUTOR LPARENT B empty RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 205


state 184

    (29) statement -> PERCUTOR LPARENT D empty RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 206


state 185

    (31) statement -> PERCUTOR LPARENT D I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 207


state 186

    (30) statement -> PERCUTOR LPARENT I empty RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 208


state 187

    (33) statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    SET             reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    IF              reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    FOR             reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    EC              reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 33 (statement -> VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM .)


state 188

    (34) statement -> METRONOMO LPARENT A COMMA NUMBER_I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 209


state 189

    (36) statement -> METRONOMO LPARENT A COMMA NUMBER_F . RPARENT SEMICOLOM

    RPARENT         shift and go to state 210


state 190

    (35) statement -> METRONOMO LPARENT D COMMA NUMBER_I . RPARENT SEMICOLOM

    RPARENT         shift and go to state 211


state 191

    (37) statement -> METRONOMO LPARENT D COMMA NUMBER_F . RPARENT SEMICOLOM

    RPARENT         shift and go to state 212


state 192

    (38) statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    SET             reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    EXEC            reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    TYPE            reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    IF              reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    FOR             reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    EC              reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)
    PRINT           reduce using rule 38 (statement -> PRINT LPARENT printTextList RPARENT SEMICOLOM .)


state 193

    (40) printTextList -> printTextList COMMA printText .

    RPARENT         reduce using rule 40 (printTextList -> printTextList COMMA printText .)
    COMMA           reduce using rule 40 (printTextList -> printTextList COMMA printText .)


state 194

    (11) statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    SET             reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    EXEC            reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    TYPE            reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    IF              reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    FOR             reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    EC              reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)
    PRINT           reduce using rule 11 (statement -> EXEC ID LPARENT varList RPARENT SEMICOLOM .)


state 195

    (13) statement -> IF conditionif LBRACKET statementList RBRACKET empty .

    RBRACKET        reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    SET             reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    EXEC            reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    TYPE            reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    IF              reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    FOR             reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    EC              reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    ABANICO         reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    VERTICAL        reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    PERCUTOR        reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    GOLPE           reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    VIBRATO         reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    METRONOMO       reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)
    PRINT           reduce using rule 13 (statement -> IF conditionif LBRACKET statementList RBRACKET empty .)


state 196

    (14) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 213


state 197

    (15) statement -> FOR ID TO expression STEP NUMBER_I . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 214


state 198

    (16) statement -> FOR ID TO expression STEP empty . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 215


state 199

    (17) statement -> EC inCaseLista SN LBRACKET statementList RBRACKET . FEC SEMICOLOM

    FEC             shift and go to state 216


state 200

    (18) statement -> EC ID inCaseListb SN LBRACKET statementList . RBRACKET FEC SEMICOLOM
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 217
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 201

    (60) inCaseb -> CUANDO relation expression ET . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 218


state 202

    (57) inCasea -> CUANDO ID relation expression ET . LBRACKET statementList RBRACKET

    LBRACKET        shift and go to state 219


state 203

    (26) statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    SET             reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    EXEC            reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    TYPE            reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    IF              reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    FOR             reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    EC              reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)
    PRINT           reduce using rule 26 (statement -> PERCUTOR LPARENT A empty RPARENT SEMICOLOM .)


state 204

    (28) statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    SET             reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    EXEC            reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    TYPE            reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    IF              reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    FOR             reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    EC              reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)
    PRINT           reduce using rule 28 (statement -> PERCUTOR LPARENT A B RPARENT SEMICOLOM .)


state 205

    (27) statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    SET             reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    EXEC            reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    TYPE            reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    IF              reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    FOR             reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    EC              reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)
    PRINT           reduce using rule 27 (statement -> PERCUTOR LPARENT B empty RPARENT SEMICOLOM .)


state 206

    (29) statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    SET             reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    EXEC            reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    TYPE            reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    IF              reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    FOR             reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    EC              reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)
    PRINT           reduce using rule 29 (statement -> PERCUTOR LPARENT D empty RPARENT SEMICOLOM .)


state 207

    (31) statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    SET             reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    IF              reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    FOR             reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    EC              reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 31 (statement -> PERCUTOR LPARENT D I RPARENT SEMICOLOM .)


state 208

    (30) statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    SET             reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    EXEC            reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    TYPE            reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    IF              reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    FOR             reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    EC              reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)
    PRINT           reduce using rule 30 (statement -> PERCUTOR LPARENT I empty RPARENT SEMICOLOM .)


state 209

    (34) statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 220


state 210

    (36) statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 221


state 211

    (35) statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 222


state 212

    (37) statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT . SEMICOLOM

    SEMICOLOM       shift and go to state 223


state 213

    (14) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 224
    statement                      shift and go to state 26

state 214

    (15) statement -> FOR ID TO expression STEP NUMBER_I LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 225
    statement                      shift and go to state 26

state 215

    (16) statement -> FOR ID TO expression STEP empty LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 226
    statement                      shift and go to state 26

state 216

    (17) statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC . SEMICOLOM

    SEMICOLOM       shift and go to state 227


state 217

    (18) statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET . FEC SEMICOLOM

    FEC             shift and go to state 228


state 218

    (60) inCaseb -> CUANDO relation expression ET LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 229
    statement                      shift and go to state 26

state 219

    (57) inCasea -> CUANDO ID relation expression ET LBRACKET . statementList RBRACKET
    (6) statementList -> . statement
    (7) statementList -> . statementList statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statementList                  shift and go to state 230
    statement                      shift and go to state 26

state 220

    (34) statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    SET             reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    IF              reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    FOR             reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    EC              reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 34 (statement -> METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM .)


state 221

    (36) statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    SET             reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    EXEC            reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    TYPE            reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    IF              reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    FOR             reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    EC              reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)
    PRINT           reduce using rule 36 (statement -> METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM .)


state 222

    (35) statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    SET             reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    EXEC            reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    TYPE            reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    IF              reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    FOR             reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    EC              reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)
    PRINT           reduce using rule 35 (statement -> METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM .)


state 223

    (37) statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .

    RBRACKET        reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    SET             reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    EXEC            reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    TYPE            reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    IF              reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    FOR             reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    EC              reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    ABANICO         reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    VERTICAL        reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    PERCUTOR        reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    GOLPE           reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    VIBRATO         reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    METRONOMO       reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)
    PRINT           reduce using rule 37 (statement -> METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM .)


state 224

    (14) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 231
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 225

    (15) statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 232
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 226

    (16) statement -> FOR ID TO expression STEP empty LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 233
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 227

    (17) statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .

    RBRACKET        reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    SET             reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EXEC            reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    TYPE            reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    IF              reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    FOR             reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EC              reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    ABANICO         reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VERTICAL        reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PERCUTOR        reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    GOLPE           reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VIBRATO         reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    METRONOMO       reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PRINT           reduce using rule 17 (statement -> EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)


state 228

    (18) statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC . SEMICOLOM

    SEMICOLOM       shift and go to state 234


state 229

    (60) inCaseb -> CUANDO relation expression ET LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 235
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 230

    (57) inCasea -> CUANDO ID relation expression ET LBRACKET statementList . RBRACKET
    (7) statementList -> statementList . statement
    (8) statement -> . SET ID COMMA TRUE SEMICOLOM
    (9) statement -> . SET ID COMMA FALSE SEMICOLOM
    (10) statement -> . SET ID COMMA expression SEMICOLOM
    (11) statement -> . EXEC ID LPARENT varList RPARENT SEMICOLOM
    (12) statement -> . TYPE LPARENT ID RPARENT SEMICOLOM
    (13) statement -> . IF conditionif LBRACKET statementList RBRACKET empty
    (14) statement -> . IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET
    (15) statement -> . FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET
    (16) statement -> . FOR ID TO expression STEP empty LBRACKET statementList RBRACKET
    (17) statement -> . EC inCaseLista SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (18) statement -> . EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM
    (19) statement -> . SET ID DOT NEG SEMICOLOM
    (20) statement -> . SET ID DOT T SEMICOLOM
    (21) statement -> . SET ID DOT F SEMICOLOM
    (22) statement -> . ABANICO LPARENT A RPARENT SEMICOLOM
    (23) statement -> . ABANICO LPARENT B RPARENT SEMICOLOM
    (24) statement -> . VERTICAL LPARENT D RPARENT SEMICOLOM
    (25) statement -> . VERTICAL LPARENT I RPARENT SEMICOLOM
    (26) statement -> . PERCUTOR LPARENT A empty RPARENT SEMICOLOM
    (27) statement -> . PERCUTOR LPARENT B empty RPARENT SEMICOLOM
    (28) statement -> . PERCUTOR LPARENT A B RPARENT SEMICOLOM
    (29) statement -> . PERCUTOR LPARENT D empty RPARENT SEMICOLOM
    (30) statement -> . PERCUTOR LPARENT I empty RPARENT SEMICOLOM
    (31) statement -> . PERCUTOR LPARENT D I RPARENT SEMICOLOM
    (32) statement -> . GOLPE LPARENT RPARENT SEMICOLOM
    (33) statement -> . VIBRATO LPARENT NUMBER_I RPARENT SEMICOLOM
    (34) statement -> . METRONOMO LPARENT A COMMA NUMBER_I RPARENT SEMICOLOM
    (35) statement -> . METRONOMO LPARENT D COMMA NUMBER_I RPARENT SEMICOLOM
    (36) statement -> . METRONOMO LPARENT A COMMA NUMBER_F RPARENT SEMICOLOM
    (37) statement -> . METRONOMO LPARENT D COMMA NUMBER_F RPARENT SEMICOLOM
    (38) statement -> . PRINT LPARENT printTextList RPARENT SEMICOLOM

    RBRACKET        shift and go to state 236
    SET             shift and go to state 27
    EXEC            shift and go to state 28
    TYPE            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    EC              shift and go to state 32
    ABANICO         shift and go to state 33
    VERTICAL        shift and go to state 34
    PERCUTOR        shift and go to state 35
    GOLPE           shift and go to state 36
    VIBRATO         shift and go to state 37
    METRONOMO       shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 43

state 231

    (14) statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .

    RBRACKET        reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    SET             reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    EXEC            reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    TYPE            reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    IF              reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    FOR             reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    EC              reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    ABANICO         reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    VERTICAL        reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    PERCUTOR        reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    GOLPE           reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    VIBRATO         reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    METRONOMO       reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)
    PRINT           reduce using rule 14 (statement -> IF conditionif LBRACKET statementList RBRACKET ELSE LBRACKET statementList RBRACKET .)


state 232

    (15) statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .

    RBRACKET        reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    SET             reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    EXEC            reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    TYPE            reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    IF              reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    FOR             reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    EC              reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    ABANICO         reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    VERTICAL        reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    PERCUTOR        reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    GOLPE           reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    VIBRATO         reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    METRONOMO       reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)
    PRINT           reduce using rule 15 (statement -> FOR ID TO expression STEP NUMBER_I LBRACKET statementList RBRACKET .)


state 233

    (16) statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .

    RBRACKET        reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    SET             reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    EXEC            reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    TYPE            reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    IF              reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    FOR             reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    EC              reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    ABANICO         reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    VERTICAL        reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    PERCUTOR        reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    GOLPE           reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    VIBRATO         reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    METRONOMO       reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)
    PRINT           reduce using rule 16 (statement -> FOR ID TO expression STEP empty LBRACKET statementList RBRACKET .)


state 234

    (18) statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .

    RBRACKET        reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    SET             reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EXEC            reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    TYPE            reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    IF              reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    FOR             reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    EC              reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    ABANICO         reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VERTICAL        reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PERCUTOR        reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    GOLPE           reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    VIBRATO         reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    METRONOMO       reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)
    PRINT           reduce using rule 18 (statement -> EC ID inCaseListb SN LBRACKET statementList RBRACKET FEC SEMICOLOM .)


state 235

    (60) inCaseb -> CUANDO relation expression ET LBRACKET statementList RBRACKET .

    SN              reduce using rule 60 (inCaseb -> CUANDO relation expression ET LBRACKET statementList RBRACKET .)
    CUANDO          reduce using rule 60 (inCaseb -> CUANDO relation expression ET LBRACKET statementList RBRACKET .)


state 236

    (57) inCasea -> CUANDO ID relation expression ET LBRACKET statementList RBRACKET .

    SN              reduce using rule 57 (inCasea -> CUANDO ID relation expression ET LBRACKET statementList RBRACKET .)
    CUANDO          reduce using rule 57 (inCasea -> CUANDO ID relation expression ET LBRACKET statementList RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 30 resolved as shift
WARNING: shift/reduce conflict for NUMBER_I in state 54 resolved as shift
WARNING: shift/reduce conflict for NUMBER_F in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
